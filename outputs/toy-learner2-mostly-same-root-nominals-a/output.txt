
---------------------

input line #0
input roots: [<__main__.Root object at 0x100e2a4a8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:

create_vi: made definite: la_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a functional word...

now working with the word 'FROG-a', mapping to 3 terminals:

create_vi: made atomic: a_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}

create_vi: made nominalizer: null_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}

create_vi: made nominalizer: null_2, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}

create_vi: made FROG: FROG_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'FROG_1'}

create_vi: made FROG: FROG_2, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'FROG_1', 'FROG_2', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e3e780>, '#', <__main__.Root object at 0x100e3eb00>, '-', <__main__.NominalizerTerminal object at 0x100e3ea20>, '-', <__main__.SemanticTerminal object at 0x100e3e8d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.0
line done
line done

---------------------

input line #1
input roots: [<__main__.Root object at 0x100e3ec88>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:

create_vi: made definite: lo_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a functional word...

now working with the word 'CASTLE-o', mapping to 3 terminals:

create_vi: made atomic: o_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}

create_vi: made nominalizer: null_3, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}

create_vi: made CASTLE: CASTLE_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'CASTLE_1', 'null_3'}

create_vi: made CASTLE: CASTLE_2, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_1', 'null_1', 'o_1', 'CASTLE_2', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '#', <__main__.Root object at 0x100e49128>, '-', <__main__.NominalizerTerminal object at 0x100e49048>, '-', <__main__.SemanticTerminal object at 0x100e44eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: la#CASTLEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e3e668>, '#', <__main__.Root object at 0x100e2a4a8>, '-', <__main__.NominalizerTerminal object at 0x100e2a860>, '-', <__main__.SemanticTerminal object at 0x100e2af60>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic', '-feminine'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 10.0
line done
line done

---------------------

input line #2
input roots: [<__main__.Root object at 0x100e49048>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:

create_vi: made definite: le_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>]

create_vi: made definite: l_1, triggers = set(), weight = 10.0

create_vi: made Agr: a_2, triggers = set(), weight = 10.0

create_vi: made Agr: e_1, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 10.1..already existed

create_vi: made Agr: o_2, triggers = set(), weight = 10.0

create_vi: tried Agr: e_1, triggers = set(), weight = 10.1..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}

now working with the word 'KEY-i', mapping to 3 terminals:

create_vi: made atomic: i_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}

create_vi: made nominalizer: null_4, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}

create_vi: made KEY: KEY_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'KEY_1', 'i_1', 'null_1'}

create_vi: made KEY: KEY_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_2', 'i_1', 'null_4', 'KEY_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e4a6d8>, '#', <__main__.Root object at 0x100e4aa58>, '-', <__main__.NominalizerTerminal object at 0x100e4a978>, '-', <__main__.SemanticTerminal object at 0x100e4a828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: l#KEYi
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e4c048>, '#', <__main__.Root object at 0x100e4c3c8>, '-', <__main__.NominalizerTerminal object at 0x100e4c2e8>, '-', <__main__.SemanticTerminal object at 0x100e4c198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: l#KEYi
vis_used:
Failure
line done
line done

---------------------

input line #3
input roots: [<__main__.Root object at 0x100e4c128>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:

create_vi: made definite: uno_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>]

create_vi: tried Agr: o_2, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 10.2..already existed

create_vi: made definite: un_1, triggers = set(), weight = 10.0
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}

create_vi: made nominalizer: null_5, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}

create_vi: made nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}

create_vi: made GRANDPARENT: GRANDPARENT_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}

create_vi: made GRANDPARENT: GRANDPARENT_2, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e52ba8>, '-', <__main__.AgrTerminal object at 0x100e52b00>, '#', <__main__.Root object at 0x100e52f28>, '-', <__main__.NominalizerTerminal object at 0x100e52e48>, '-', <__main__.SemanticTerminal object at 0x100e52cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: uno#GRANDPARENTo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'GRANDPARENT'}
    selection_strength: True
    weight: 10.1
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: made nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_7
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_8
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 10.6
line done
line done

---------------------

input line #4
input roots: [<__main__.Root object at 0x100e4ada0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:

create_vi: made definite: la_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.6..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}

create_vi: made nominalizer: null_9, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}

create_vi: made nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}

create_vi: made GRANDPARENT: GRANDPARENT_3, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a198>, '#', <__main__.Root object at 0x100e5a518>, '-', <__main__.NominalizerTerminal object at 0x100e5a438>, '-', <__main__.SemanticTerminal object at 0x100e5a2e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: lo#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 11.1
line done
line done

---------------------

input line #5
input roots: [<__main__.Root object at 0x100e5a3c8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.7..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}

create_vi: made CHILD: CHILD_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}

create_vi: made CHILD: CHILD_2, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e2af60>, '#', <__main__.Root object at 0x100e5a978>, '-', <__main__.NominalizerTerminal object at 0x100e5a080>, '-', <__main__.SemanticTerminal object at 0x100e5a278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: lo#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.7
line done
line done

---------------------

input line #6
input roots: [<__main__.Root object at 0x100e3e8d0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.799999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e4d898>, '#', <__main__.Root object at 0x100e4dc18>, '-', <__main__.NominalizerTerminal object at 0x100e4db38>, '-', <__main__.SemanticTerminal object at 0x100e4d9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite', '+atomic'}
we picked la_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'CHILD', 'GRANDPARENT'}
    selection_strength: True
    weight: 10.2
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+feminine', '+definite', '+atomic'}
    diacritic: la_2
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.7
line done
line done

---------------------

input line #7
input roots: [<__main__.Root object at 0x100e4dda0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:

create_vi: made definite: uno_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>]

create_vi: tried Agr: o_2, triggers = set(), weight = 10.7..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 10.299999999999999..already existed

create_vi: made definite: un_2, triggers = set(), weight = 10.0

create_vi: tried definite: uno_2, triggers = set(), weight = 10.1..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}

create_vi: made MOUSE: MOUSE_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'MOUSE_1'}

create_vi: made MOUSE: MOUSE_2, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'o_1', 'null_1', 'null_3', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5deb8>, '#', <__main__.Root object at 0x100e5e278>, '-', <__main__.NominalizerTerminal object at 0x100e5e198>, '-', <__main__.SemanticTerminal object at 0x100e5e048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: uno#MOUSEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 11.1
line done
line done

---------------------

input line #8
input roots: [<__main__.Root object at 0x100e5dc50>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:

create_vi: made definite: una_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 10.399999999999999..already existed

create_vi: made definite: un_3, triggers = set(), weight = 10.0

create_vi: made definite: un_4, triggers = set(), weight = 10.0

create_vi: made Agr: o_3, triggers = set(), weight = 10.0

create_vi: made Agr: a_3, triggers = set(), weight = 10.0

create_vi: tried definite: un_2, triggers = set(), weight = 10.1..already existed

create_vi: made Agr: a_4, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.1..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e61c18>, '-', <__main__.AgrTerminal object at 0x100e61438>, '#', <__main__.Root object at 0x100e61f98>, '-', <__main__.NominalizerTerminal object at 0x100e61eb8>, '-', <__main__.SemanticTerminal object at 0x100e61d68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: una#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.5
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 11.6
line done
line done

---------------------

input line #9
input roots: [<__main__.Root object at 0x100e612e8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.2..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.1..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.399999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}

create_vi: made MILKCOW: MILKCOW_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}

create_vi: made MILKCOW: MILKCOW_2, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5d320>, '-', <__main__.AgrTerminal object at 0x100e5d0b8>, '#', <__main__.Root object at 0x100e4d4a8>, '-', <__main__.NominalizerTerminal object at 0x100e4d898>, '-', <__main__.SemanticTerminal object at 0x100e4deb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: uno#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 10.7
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 11.399999999999999
line done
line done

---------------------

input line #10
input roots: [<__main__.Root object at 0x100e5e6a0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:

create_vi: made definite: li_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>]

create_vi: tried definite: l_1, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.2..already existed

create_vi: made Agr: i_2, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 10.7..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 10.1..already existed

create_vi: made definite: l_2, triggers = set(), weight = 10.0

create_vi: made Agr: i_3, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.2..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 10.2..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}

create_vi: made GRANDPARENT: GRANDPARENT_4, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made GRANDPARENT: GRANDPARENT_5, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi GRANDPARENT_5 	spelling out GRANDPARENT: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made GRANDPARENT: GRANDPARENT_6, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi GRANDPARENT_6 	spelling out GRANDPARENT: set() 		 triggering {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ae48>, '-', <__main__.AgrTerminal object at 0x100e6a668>, '#', <__main__.Root object at 0x100e69208>, '-', <__main__.NominalizerTerminal object at 0x100e69128>, '-', <__main__.SemanticTerminal object at 0x100e6af98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: li#GRANDPARENTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'GRANDPARENT'}
    selection_strength: True
    weight: 10.399999999999999
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.1..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.1..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 11.099999999999996
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.1
line done
line done

---------------------

input line #11
input roots: [<__main__.Root object at 0x100e6a550>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>]

create_vi: tried definite: l_1, triggers = set(), weight = 11.699999999999996..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 10.799999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 11.799999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 10.799999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 10.899999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.1..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 11.899999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 11.999999999999995..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 10.999999999999998..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.2..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}

create_vi: made OFFSPRING: OFFSPRING_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}

create_vi: made OFFSPRING: OFFSPRING_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e45748>, '-', <__main__.AgrTerminal object at 0x100e69f28>, '#', <__main__.Root object at 0x100e45ac8>, '-', <__main__.NominalizerTerminal object at 0x100e459e8>, '-', <__main__.SemanticTerminal object at 0x100e45898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: le#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.7
line done
line done

---------------------

input line #12
input roots: [<__main__.Root object at 0x100e45978>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:

create_vi: made definite: le_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>]

create_vi: tried definite: l_1, triggers = set(), weight = 12.099999999999994..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.399999999999999..already existed

create_vi: made Agr: e_2, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 12.199999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 10.899999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.1..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:

create_vi: made atomic: e_3, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}

create_vi: made nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}

create_vi: made MILKCOW: MILKCOW_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made MILKCOW: MILKCOW_4, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi MILKCOW_4 	spelling out MILKCOW: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6e358>, '-', <__main__.AgrTerminal object at 0x100e6cb38>, '#', <__main__.Root object at 0x100e6e6d8>, '-', <__main__.NominalizerTerminal object at 0x100e6e5f8>, '-', <__main__.SemanticTerminal object at 0x100e6e4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'CHILD', 'GRANDPARENT'}
    selection_strength: True
    weight: 10.699999999999998
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 11.0..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 12.199999999999994
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 10.0
line done
line done

---------------------

input line #13
input roots: [<__main__.Root object at 0x100e6e2e8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 12.799999999999994..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.2..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 12.899999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.699999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}

create_vi: made PIBLING: PIBLING_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}

create_vi: made PIBLING: PIBLING_2, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e69b38>, '-', <__main__.AgrTerminal object at 0x100e6e4a8>, '#', <__main__.Root object at 0x100e6aa20>, '-', <__main__.NominalizerTerminal object at 0x100e6af98>, '-', <__main__.SemanticTerminal object at 0x100e69470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#PIBLING-a
full_pronunciation: uno#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 10.899999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 11.399999999999999
line done
line done

---------------------

input line #14
input roots: [<__main__.Root object at 0x100e45f60>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>]

create_vi: tried definite: l_1, triggers = set(), weight = 12.999999999999993..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 10.7..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 13.099999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 10.899999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 10.799999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.2..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}

create_vi: made PIBLING: PIBLING_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made PIBLING: PIBLING_4, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi PIBLING_4 	spelling out PIBLING: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e632b0>, '-', <__main__.AgrTerminal object at 0x100e72a90>, '#', <__main__.Root object at 0x100e63668>, '-', <__main__.NominalizerTerminal object at 0x100e63550>, '-', <__main__.SemanticTerminal object at 0x100e63400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'CHILD', 'GRANDPARENT'}
    selection_strength: True
    weight: 10.999999999999996
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 13.099999999999993
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 10.799999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 10.6
line done
line done

---------------------

input line #15
input roots: [<__main__.Root object at 0x100e63240>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:

create_vi: made definite: lo_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>]

create_vi: made definite: l_3, triggers = set(), weight = 10.0

create_vi: tried Agr: o_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}

create_vi: made OFFSPRING: OFFSPRING_3, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made OFFSPRING: OFFSPRING_4, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi OFFSPRING_4 	spelling out OFFSPRING: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e65c88>, '-', <__main__.AgrTerminal object at 0x100e654a8>, '#', <__main__.Root object at 0x100e73048>, '-', <__main__.NominalizerTerminal object at 0x100e65f28>, '-', <__main__.SemanticTerminal object at 0x100e65dd8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: lo#OFFSPRINGo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'OFFSPRING', 'GRANDPARENT'}
    selection_strength: True
    weight: 10.699999999999998
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 13.599999999999993
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 11.6
line done
line done

---------------------

input line #16
input roots: [<__main__.Root object at 0x100e65940>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>]

create_vi: tried definite: l_1, triggers = set(), weight = 14.199999999999992..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 11.099999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.299999999999992..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 10.999999999999998..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 11.199999999999998..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.2..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.399999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.499999999999991..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 11.299999999999997..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.399999999999999..already existed

create_vi: made Agr: e_4, triggers = set(), weight = 10.0

create_vi: tried Agr: i_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: made definite: l_4, triggers = set(), weight = 10.0

create_vi: tried Agr: o_2, triggers = set(), weight = 11.099999999999998..already existed

create_vi: made Agr: i_4, triggers = set(), weight = 10.0

create_vi: tried definite: l_1, triggers = set(), weight = 14.59999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}

create_vi: made CLOWN: CLOWN_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}

create_vi: made CLOWN: CLOWN_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6b8d0>, '-', <__main__.AgrTerminal object at 0x100e6b0f0>, '#', <__main__.Root object at 0x100e6bc50>, '-', <__main__.NominalizerTerminal object at 0x100e6bb70>, '-', <__main__.SemanticTerminal object at 0x100e6ba20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#CLOWN-i
full_pronunciation: le#CLOWNe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 14.59999999999999
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.4
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 11.1
line done
line done

---------------------

input line #17
input roots: [<__main__.Root object at 0x100e6bb00>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.1..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.899999999999999..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}

create_vi: made PIBLING: PIBLING_5, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made PIBLING: PIBLING_6, triggers = {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi PIBLING_6 	spelling out PIBLING: set() 		 triggering {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e72940>, '-', <__main__.AgrTerminal object at 0x100e65f28>, '#', <__main__.Root object at 0x100e45d30>, '-', <__main__.NominalizerTerminal object at 0x100e69470>, '-', <__main__.SemanticTerminal object at 0x100e5db70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: laa#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.799999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 11.299999999999999
line done
line done

---------------------

input line #18
input roots: [<__main__.Root object at 0x100e63e10>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>]

create_vi: tried definite: l_1, triggers = set(), weight = 14.59999999999999..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 11.199999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.69999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 11.299999999999997..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 10.6..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.79999999999999..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 10.2..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 11.399999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 14.99999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 11.399999999999997..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 11.499999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 15.099999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 15.199999999999989..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 11.399999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 11.599999999999996..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'CASTLE_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_1', 'null_1', 'o_1', 'CASTLE_2', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e79940>, '-', <__main__.AgrTerminal object at 0x100e79160>, '#', <__main__.Root object at 0x100e79cc0>, '-', <__main__.NominalizerTerminal object at 0x100e79be0>, '-', <__main__.SemanticTerminal object at 0x100e79a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: la#CASTLEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7a7f0>, '-', <__main__.AgrTerminal object at 0x100e79fd0>, '#', <__main__.Root object at 0x100e7ab70>, '-', <__main__.NominalizerTerminal object at 0x100e7aa90>, '-', <__main__.SemanticTerminal object at 0x100e7a940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_8: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 15.199999999999989
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 11.599999999999996
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_8
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.299999999999999
line done
line done

---------------------

input line #19
input roots: [<__main__.Root object at 0x100e7ad30>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 15.799999999999988..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.999999999999998..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 15.899999999999988..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.999999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7f128>, '-', <__main__.AgrTerminal object at 0x100e7b908>, '#', <__main__.Root object at 0x100e7f4e0>, '-', <__main__.NominalizerTerminal object at 0x100e7f3c8>, '-', <__main__.SemanticTerminal object at 0x100e7f278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#PIBLING-a
full_pronunciation: una#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 10.999999999999996
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 11.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.799999999999999
line done
line done

---------------------

input line #20
input roots: [<__main__.Root object at 0x100e7bda0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 15.999999999999988..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 10.7..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 10.799999999999999..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 10.7..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e940>, '-', <__main__.AgrTerminal object at 0x100e7e160>, '#', <__main__.Root object at 0x100e7ecf8>, '-', <__main__.NominalizerTerminal object at 0x100e7ebe0>, '-', <__main__.SemanticTerminal object at 0x100e7ea90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uni#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.799999999999999
line done
line done

---------------------

input line #21
input roots: [<__main__.Root object at 0x100e7b358>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 12.299999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 10.799999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'FOOT-e', mapping to 3 terminals:

create_vi: made atomic: e_5, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}

create_vi: made nominalizer: null_12, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}

create_vi: made FOOT: FOOT_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_1', 'null_12'}

create_vi: made FOOT: FOOT_2, triggers = {('e', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_12', 'FOOT_1', 'e_5', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7efd0>, '-', <__main__.AgrTerminal object at 0x100e5db70>, '#', <__main__.Root object at 0x100e84390>, '-', <__main__.NominalizerTerminal object at 0x100e842b0>, '-', <__main__.SemanticTerminal object at 0x100e84160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: une#FOOTe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84eb8>, '-', <__main__.AgrTerminal object at 0x100e846d8>, '#', <__main__.Root object at 0x100e75278>, '-', <__main__.NominalizerTerminal object at 0x100e75198>, '-', <__main__.SemanticTerminal object at 0x100e75048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: uno#FOOTe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'CLOWN', 'OFFSPRING', 'GRANDPARENT', 'PIBLING'}
    selection_strength: True
    weight: 11.099999999999996
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 10.9..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.899999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 10.799999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 12.299999999999995
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_2
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 10.0
line done
now adding Root: FOOT with -feminine to gender_dict
line done

---------------------

input line #22
input roots: [<__main__.Root object at 0x100e84a20>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 11.099999999999998..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.099999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83780>, '-', <__main__.AgrTerminal object at 0x100e75e80>, '#', <__main__.Root object at 0x100e83b38>, '-', <__main__.NominalizerTerminal object at 0x100e83a20>, '-', <__main__.SemanticTerminal object at 0x100e838d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#MILKCOW-a
full_pronunciation: unoe#MILKCOWo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 10.799999999999999
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.7
line done
line done

---------------------

input line #23
input roots: [<__main__.Root object at 0x100e839b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:

create_vi: made definite: li_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>]

create_vi: tried definite: l_1, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 12.899999999999995..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.1..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}

create_vi: made FLOWER: FLOWER_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'FLOWER_1'}

create_vi: made FLOWER: FLOWER_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'FLOWER_1', 'FLOWER_2', 'null_4', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e891d0>, '-', <__main__.AgrTerminal object at 0x100e869b0>, '#', <__main__.Root object at 0x100e89550>, '-', <__main__.NominalizerTerminal object at 0x100e89470>, '-', <__main__.SemanticTerminal object at 0x100e89320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_11: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: la#FLOWERe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c0b8>, '-', <__main__.AgrTerminal object at 0x100e89898>, '#', <__main__.Root object at 0x100e89160>, '-', <__main__.NominalizerTerminal object at 0x100e89400>, '-', <__main__.SemanticTerminal object at 0x100e89a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_7: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'FOOT', 'CLOWN', 'OFFSPRING'}
    selection_strength: True
    weight: 11.199999999999996
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.999999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 16.699999999999996
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 11.399999999999997
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_7
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.799999999999999
line done
now adding Root: FLOWER with -feminine to gender_dict
line done

---------------------

input line #24
input roots: [<__main__.Root object at 0x100e89b38>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 12.999999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 17.299999999999997..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.399999999999999..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.499999999999998..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 10.799999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}

create_vi: made CHILD: CHILD_3, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e834a8>, '-', <__main__.AgrTerminal object at 0x100e89390>, '#', <__main__.Root object at 0x100e756d8>, '-', <__main__.NominalizerTerminal object at 0x100e830b8>, '-', <__main__.SemanticTerminal object at 0x100e83208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#CHILD-o
full_pronunciation: una#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 11.099999999999996
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.5
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 10.5
line done
line done

---------------------

input line #25
input roots: [<__main__.Root object at 0x100e894e0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 11.199999999999998..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.7..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e846d8>, '-', <__main__.AgrTerminal object at 0x100e83a90>, '#', <__main__.Root object at 0x100e84860>, '-', <__main__.NominalizerTerminal object at 0x100e849b0>, '-', <__main__.SemanticTerminal object at 0x100e84c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_8: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: lo#PIBLINGo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 11.399999999999995
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 11.099999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 17.299999999999997
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 11.199999999999998
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_8
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 11.099999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.799999999999999
line done
line done

---------------------

input line #26
input roots: [<__main__.Root object at 0x100e75668>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 11.799999999999997..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.799999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e79748>, '-', <__main__.AgrTerminal object at 0x100e84320>, '#', <__main__.Root object at 0x100e8c048>, '-', <__main__.NominalizerTerminal object at 0x100e7ba90>, '-', <__main__.SemanticTerminal object at 0x100e7a4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: li#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_5
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 13.399999999999999
line done
line done

---------------------

input line #27
input roots: [<__main__.Root object at 0x100e63ba8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>]

create_vi: tried definite: l_1, triggers = set(), weight = 17.9..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 18.0..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 13.099999999999994..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 18.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 18.200000000000003..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.2..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'MOUSE_1'}

create_vi: made MOUSE: MOUSE_3, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made MOUSE: MOUSE_4, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi MOUSE_4 	spelling out MOUSE: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'MOUSE_3', 'null_4', 'null_1', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cac8>, '-', <__main__.AgrTerminal object at 0x100e8c198>, '#', <__main__.Root object at 0x100e8ccf8>, '-', <__main__.NominalizerTerminal object at 0x100e8cc88>, '-', <__main__.SemanticTerminal object at 0x100e8cba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 18.200000000000003
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 11.399999999999999
line done
line done

---------------------

input line #28
input roots: [<__main__.Root object at 0x100e8cc18>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:

create_vi: made definite: una_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 18.800000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.099999999999996..already existed

create_vi: made definite: l_5, triggers = set(), weight = 10.0

create_vi: tried definite: un_2, triggers = set(), weight = 11.699999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 11.799999999999994..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.1..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_1', 'null_12'}

create_vi: made KEY: KEY_3, triggers = {('e', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made KEY: KEY_4, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi KEY_4 	spelling out KEY: set() 		 triggering {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_5', 'KEY_1', 'null_1', 'KEY_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92898>, '-', <__main__.AgrTerminal object at 0x100e8ce10>, '#', <__main__.Root object at 0x100e92ac8>, '-', <__main__.NominalizerTerminal object at 0x100e92a58>, '-', <__main__.SemanticTerminal object at 0x100e92978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: uno#KEYe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92e80>, '-', <__main__.AgrTerminal object at 0x100e92b00>, '#', <__main__.Root object at 0x100e9b0f0>, '-', <__main__.NominalizerTerminal object at 0x100e9b080>, '-', <__main__.SemanticTerminal object at 0x100e92f60>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_6: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: unoo#KEYo
vis_used:
Failure
line done
line done

---------------------

input line #29
input roots: [<__main__.Root object at 0x100e92fd0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.799999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92f60>, '-', <__main__.AgrTerminal object at 0x100e92748>, '#', <__main__.Root object at 0x100e92358>, '-', <__main__.NominalizerTerminal object at 0x100e92dd8>, '-', <__main__.SemanticTerminal object at 0x100e92b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'CHILD', 'GRANDPARENT'}
    selection_strength: True
    weight: 11.599999999999994
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 11.9..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 18.800000000000004
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 10.799999999999997
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 11.499999999999998
line done
line done

---------------------

input line #30
input roots: [<__main__.Root object at 0x100e92c18>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 13.199999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 19.400000000000006..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.599999999999998..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.699999999999998..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 10.899999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}

create_vi: made nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}

create_vi: made FLOWER: FLOWER_3, triggers = {('e', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made FLOWER: FLOWER_4, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi FLOWER_4 	spelling out FLOWER: set() 		 triggering {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cd68>, '-', <__main__.AgrTerminal object at 0x100e924e0>, '#', <__main__.Root object at 0x100e8c898>, '-', <__main__.NominalizerTerminal object at 0x100e8cd30>, '-', <__main__.SemanticTerminal object at 0x100e8ce80>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#FLOWER-e
full_pronunciation: uno#FLOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.999999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 11.699999999999998..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 11.799999999999994
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 13.199999999999994
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 10.6
line done
line done

---------------------

input line #31
input roots: [<__main__.Root object at 0x100e92080>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.899999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}

create_vi: made OFFSPRING: OFFSPRING_5, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made OFFSPRING: OFFSPRING_6, triggers = {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi OFFSPRING_6 	spelling out OFFSPRING: set() 		 triggering {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7bc50>, '-', <__main__.AgrTerminal object at 0x100e8c5f8>, '#', <__main__.Root object at 0x100e78f28>, '-', <__main__.NominalizerTerminal object at 0x100e78860>, '-', <__main__.SemanticTerminal object at 0x100e7a7f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: lo#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 19.400000000000006
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 13.699999999999994
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.500000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.099999999999998
line done
line done

---------------------

input line #32
input roots: [<__main__.Root object at 0x100e8c048>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 19.400000000000006..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 11.499999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 19.500000000000007..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 13.699999999999994..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 11.599999999999998..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84828>, '-', <__main__.AgrTerminal object at 0x100e92240>, '#', <__main__.Root object at 0x100e75fd0>, '-', <__main__.NominalizerTerminal object at 0x100e754e0>, '-', <__main__.SemanticTerminal object at 0x100e84cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING'}
    selection_strength: True
    weight: 11.899999999999993
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 12.0..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 19.500000000000007
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 11.599999999999998
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 11.1
line done
line done

---------------------

input line #33
input roots: [<__main__.Root object at 0x100e846d8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 13.799999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 20.10000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.799999999999997..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 10.999999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e838d0>, '-', <__main__.AgrTerminal object at 0x100e7e1d0>, '#', <__main__.Root object at 0x100e835c0>, '-', <__main__.NominalizerTerminal object at 0x100e834a8>, '-', <__main__.SemanticTerminal object at 0x100e83160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: uno#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 11.099999999999996
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 13.799999999999994
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 11.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 11.999999999999998
line done
line done

---------------------

input line #34
input roots: [<__main__.Root object at 0x100e75c50>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 20.20000000000001..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.199999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 20.30000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 13.799999999999994..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.299999999999997..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.399999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e899e8>, '-', <__main__.AgrTerminal object at 0x100e75a90>, '#', <__main__.Root object at 0x100e89320>, '-', <__main__.NominalizerTerminal object at 0x100e89588>, '-', <__main__.SemanticTerminal object at 0x100e89748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING'}
    selection_strength: True
    weight: 12.199999999999992
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 20.30000000000001
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 12.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 11.7
line done
line done

---------------------

input line #35
input roots: [<__main__.Root object at 0x100e86a90>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 20.900000000000013..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.000000000000014..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 13.899999999999993..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.100000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.200000000000017..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.399999999999997..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.499999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}

create_vi: made nominalizer: null_14, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'FROG_1', 'null_1', 'e_3'}

create_vi: made FROG: FROG_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made FROG: FROG_4, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi FROG_4 	spelling out FROG: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_14', 'FROG_3', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bc88>, '-', <__main__.AgrTerminal object at 0x100e86cf8>, '#', <__main__.Root object at 0x100e9beb8>, '-', <__main__.NominalizerTerminal object at 0x100e9be48>, '-', <__main__.SemanticTerminal object at 0x100e9bd68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: la#FROGe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9be80>, '-', <__main__.AgrTerminal object at 0x100e9b9e8>, '#', <__main__.Root object at 0x100e9bb00>, '-', <__main__.NominalizerTerminal object at 0x100e9bbe0>, '-', <__main__.SemanticTerminal object at 0x100e9bcc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#FROG-e
full_pronunciation: li#FROGi
vis_used:
Failure
line done
line done

---------------------

input line #36
input roots: [<__main__.Root object at 0x100e9ba20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 13.999999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.30000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.099999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'o_1', 'null_1', 'null_3', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86b00>, '-', <__main__.AgrTerminal object at 0x100e9b978>, '#', <__main__.Root object at 0x100e83208>, '-', <__main__.NominalizerTerminal object at 0x100e86a20>, '-', <__main__.SemanticTerminal object at 0x100e860b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e830b8>, '-', <__main__.AgrTerminal object at 0x100e9be48>, '#', <__main__.Root object at 0x100e755f8>, '-', <__main__.NominalizerTerminal object at 0x100e75a90>, '-', <__main__.SemanticTerminal object at 0x100e83b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEa
vis_used:
Failure
line done
line done

---------------------

input line #37
input roots: [<__main__.Root object at 0x100e83a90>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 14.099999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.40000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.199999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'o_1', 'null_1', 'null_3', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84a20>, '-', <__main__.AgrTerminal object at 0x100e75550>, '#', <__main__.Root object at 0x100e84240>, '-', <__main__.NominalizerTerminal object at 0x100e84860>, '-', <__main__.SemanticTerminal object at 0x100e84c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: unoa#MOUSEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ee10>, '-', <__main__.AgrTerminal object at 0x100e83cf8>, '#', <__main__.Root object at 0x100e78860>, '-', <__main__.NominalizerTerminal object at 0x100e6aa20>, '-', <__main__.SemanticTerminal object at 0x100e7e4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: unaa#MOUSEe
vis_used:
Failure
line done
line done

---------------------

input line #38
input roots: [<__main__.Root object at 0x100e72358>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.50000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.599999999999993..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.699999999999992..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried definite: l_5, triggers = set(), weight = 10.1..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.799999999999992..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.2..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}

create_vi: made BALL: BALL_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'BALL_1'}

create_vi: made BALL: BALL_2, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'BALL_2', 'BALL_1', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cac8>, '-', <__main__.AgrTerminal object at 0x100e7e1d0>, '#', <__main__.Root object at 0x100e8cdd8>, '-', <__main__.NominalizerTerminal object at 0x100e8cef0>, '-', <__main__.SemanticTerminal object at 0x100e8c8d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92518>, '-', <__main__.AgrTerminal object at 0x100e8cd30>, '#', <__main__.Root object at 0x100e92d30>, '-', <__main__.NominalizerTerminal object at 0x100e92160>, '-', <__main__.SemanticTerminal object at 0x100e92978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: unao#BALLa
vis_used:
Failure
line done
line done

---------------------

input line #39
input roots: [<__main__.Root object at 0x100e8c4a8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 14.199999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 21.600000000000023..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92f98>, '-', <__main__.AgrTerminal object at 0x100e92be0>, '#', <__main__.Root object at 0x100ea02e8>, '-', <__main__.NominalizerTerminal object at 0x100ea0278>, '-', <__main__.SemanticTerminal object at 0x100ea00b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: uno#FLOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 12.899999999999991
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 14.199999999999992
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.3
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 13.599999999999998
line done
line done

---------------------

input line #40
input roots: [<__main__.Root object at 0x100e92cf8>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.899999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b70>, '-', <__main__.AgrTerminal object at 0x100ea0358>, '#', <__main__.Root object at 0x100e92dd8>, '-', <__main__.NominalizerTerminal object at 0x100e92748>, '-', <__main__.SemanticTerminal object at 0x100ea0c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_7: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CHILD-o
full_pronunciation: lo#CHILDo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 12.199999999999992
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.099999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 11.799999999999997..already existed

create_vi: made nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 21.600000000000023
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 12.099999999999996
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_7
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 11.099999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 13.599999999999998
line done
line done

---------------------

input line #41
input roots: [<__main__.Root object at 0x100e929b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 22.200000000000024..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.699999999999994..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.300000000000026..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 14.199999999999992..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.400000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.50000000000003..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.499999999999996..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.599999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'BALL_1', 'e_3'}

create_vi: made BALL: BALL_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made BALL: BALL_4, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi BALL_4 	spelling out BALL: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'BALL_3', 'null_14', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ce80>, '-', <__main__.AgrTerminal object at 0x100e92a90>, '#', <__main__.Root object at 0x100e8c8d0>, '-', <__main__.NominalizerTerminal object at 0x100e8cef0>, '-', <__main__.SemanticTerminal object at 0x100e8c198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: lee#BALLi
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cb00>, '-', <__main__.AgrTerminal object at 0x100e92978>, '#', <__main__.Root object at 0x100e8c550>, '-', <__main__.NominalizerTerminal object at 0x100e8cfd0>, '-', <__main__.SemanticTerminal object at 0x100e8c278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: li#BALLe
vis_used:
Failure
line done
line done

---------------------

input line #42
input roots: [<__main__.Root object at 0x100e8c0f0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 22.60000000000003..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.799999999999994..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.70000000000003..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 14.299999999999992..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.800000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 22.900000000000034..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.599999999999996..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.5..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 10.1..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 14.399999999999991..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 11.199999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.000000000000036..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}

create_vi: made CHILD: CHILD_4, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made CHILD: CHILD_5, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CHILD_5 	spelling out CHILD: set() 		 triggering {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made CHILD: CHILD_6, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CHILD_6 	spelling out CHILD: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84a20>, '-', <__main__.AgrTerminal object at 0x100e92b38>, '#', <__main__.Root object at 0x100e75860>, '-', <__main__.NominalizerTerminal object at 0x100e75fd0>, '-', <__main__.SemanticTerminal object at 0x100e842b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 12.499999999999991
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.699999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 11.899999999999997..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 12.199999999999996
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 11.999999999999998
line done
line done

---------------------

input line #43
input roots: [<__main__.Root object at 0x100e840f0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 11.899999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.100000000000037..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 12.699999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 11.999999999999993..already existed

create_vi: tried definite: l_5, triggers = set(), weight = 10.2..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 13.19999999999999..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'FROG_1', 'FROG_2', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e860b8>, '-', <__main__.AgrTerminal object at 0x100e754e0>, '#', <__main__.Root object at 0x100e86cf8>, '-', <__main__.NominalizerTerminal object at 0x100e86400>, '-', <__main__.SemanticTerminal object at 0x100e868d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: une#FROGa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89240>, '-', <__main__.AgrTerminal object at 0x100e86828>, '#', <__main__.Root object at 0x100e83128>, '-', <__main__.NominalizerTerminal object at 0x100e89470>, '-', <__main__.SemanticTerminal object at 0x100e89d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#FROG-a
full_pronunciation: una#FROGo
vis_used:
Failure
line done
line done

---------------------

input line #44
input roots: [<__main__.Root object at 0x100e794a8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 10.999999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b8d0>, '-', <__main__.AgrTerminal object at 0x100e833c8>, '#', <__main__.Root object at 0x100e9bac8>, '-', <__main__.NominalizerTerminal object at 0x100e9bba8>, '-', <__main__.SemanticTerminal object at 0x100e9ba58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 23.100000000000037
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 10.999999999999996
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 12.5
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 14.099999999999998
line done
line done

---------------------

input line #45
input roots: [<__main__.Root object at 0x100e929e8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 11.099999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0278>, '-', <__main__.AgrTerminal object at 0x100e834a8>, '#', <__main__.Root object at 0x100ea0dd8>, '-', <__main__.NominalizerTerminal object at 0x100ea0d68>, '-', <__main__.SemanticTerminal object at 0x100ea0c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 23.000000000000036
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 11.2
line done
line done

---------------------

input line #46
input roots: [<__main__.Root object at 0x100ea00b8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 14.499999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.000000000000036..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.299999999999995..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.399999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bc50>, '-', <__main__.AgrTerminal object at 0x100ea02e8>, '#', <__main__.Root object at 0x100e9ba58>, '-', <__main__.NominalizerTerminal object at 0x100e9bba8>, '-', <__main__.SemanticTerminal object at 0x100e9be10>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: uno#FLOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 11.9..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.799999999999997..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 11.999999999999996..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 13.19999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 14.499999999999991
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 11.900000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 11.2
line done
line done

---------------------

input line #47
input roots: [<__main__.Root object at 0x100ea0ef0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 23.100000000000037..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.099999999999993..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.399999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.20000000000004..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.09999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.499999999999996..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.699999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}

create_vi: made CHILD: CHILD_7, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made CHILD: CHILD_8, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CHILD_8 	spelling out CHILD: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made CHILD: CHILD_9, triggers = {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CHILD_9 	spelling out CHILD: set() 		 triggering {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89a20>, '-', <__main__.AgrTerminal object at 0x100e9bcf8>, '#', <__main__.Root object at 0x100e89908>, '-', <__main__.NominalizerTerminal object at 0x100e89710>, '-', <__main__.SemanticTerminal object at 0x100e89320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#CHILD-e
full_pronunciation: la#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 23.20000000000004
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 10.799999999999997
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.799999999999997
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 12.499999999999998
line done
line done

---------------------

input line #48
input roots: [<__main__.Root object at 0x100e89240>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 12.799999999999995..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 10.999999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e756d8>, '-', <__main__.AgrTerminal object at 0x100e86c18>, '#', <__main__.Root object at 0x100e75278>, '-', <__main__.NominalizerTerminal object at 0x100e75940>, '-', <__main__.SemanticTerminal object at 0x100e75d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_6: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: lo#GRANDPARENTo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 12.99999999999999
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 23.100000000000037
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 12.799999999999995
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_6
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 14.099999999999998
line done
line done

---------------------

input line #49
input roots: [<__main__.Root object at 0x100e755f8>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 23.70000000000004..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.199999999999992..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 12.799999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.80000000000004..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.19999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 12.899999999999995..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 23.90000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 24.000000000000043..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.699999999999996..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 12.999999999999995..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.6..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 10.799999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.29999999999999..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 11.299999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 24.100000000000044..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 10.899999999999999..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.399999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}

create_vi: made PIBLING: PIBLING_7, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made PIBLING: PIBLING_8, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi PIBLING_8 	spelling out PIBLING: set() 		 triggering {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made PIBLING: PIBLING_9, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi PIBLING_9 	spelling out PIBLING: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e4a8>, '-', <__main__.AgrTerminal object at 0x100e86c88>, '#', <__main__.Root object at 0x100e63ba8>, '-', <__main__.NominalizerTerminal object at 0x100e7a7f0>, '-', <__main__.SemanticTerminal object at 0x100e78f28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.299999999999997..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.899999999999997..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.199999999999996..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 24.100000000000044
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 11.299999999999997
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 11.9
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 12.499999999999998
line done
line done

---------------------

input line #50
input roots: [<__main__.Root object at 0x100e75be0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 15.39999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 24.700000000000045..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.399999999999995..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.499999999999995..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.499999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cf98>, '-', <__main__.AgrTerminal object at 0x100e7eda0>, '#', <__main__.Root object at 0x100e8ceb8>, '-', <__main__.NominalizerTerminal object at 0x100e8c400>, '-', <__main__.SemanticTerminal object at 0x100e8cba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: unaa#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 12.199999999999992
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 12.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 11.799999999999999
line done
line done

---------------------

input line #51
input roots: [<__main__.Root object at 0x100e8c898>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 24.800000000000047..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.199999999999992..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 24.90000000000005..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.49999999999999..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 25.00000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 25.10000000000005..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.799999999999995..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.799999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}

create_vi: made CAR: CAR_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3', 'CAR_1'}

create_vi: made CAR: CAR_2, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'e_3', 'null_14', 'null_1', 'CAR_2'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e929b0>, '-', <__main__.AgrTerminal object at 0x100e8ca20>, '#', <__main__.Root object at 0x100ea7198>, '-', <__main__.NominalizerTerminal object at 0x100ea70f0>, '-', <__main__.SemanticTerminal object at 0x100e92748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: le#CARe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING'}
    selection_strength: True
    weight: 12.69999999999999
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 25.10000000000005
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 10.6
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_2
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 12.4
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 12.599999999999998
line done
now adding Root: CAR with +feminine to gender_dict
line done

---------------------

input line #52
input roots: [<__main__.Root object at 0x100e92630>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 25.700000000000053..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.299999999999992..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.099999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 25.800000000000054..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.599999999999989..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.199999999999994..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 25.900000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.000000000000057..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.899999999999995..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.299999999999994..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.2..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 10.999999999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.699999999999989..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.10000000000006..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 11.099999999999998..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.499999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84c50>, '-', <__main__.AgrTerminal object at 0x100e45d30>, '#', <__main__.Root object at 0x100e842b0>, '-', <__main__.NominalizerTerminal object at 0x100e84860>, '-', <__main__.SemanticTerminal object at 0x100e847b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: le#CLOWNi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 26.10000000000006
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 12.300000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 13.099999999999998
line done
line done

---------------------

input line #53
input roots: [<__main__.Root object at 0x100e84cc0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 26.10000000000006..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.799999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.20000000000006..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.899999999999988..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.30000000000006..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 10.599999999999998..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 15.999999999999988..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 13.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.400000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.500000000000064..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.399999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.600000000000065..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.700000000000067..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.599999999999996..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.099999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'CASTLE_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_1', 'null_1', 'o_1', 'CASTLE_2', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83208>, '-', <__main__.AgrTerminal object at 0x100e849b0>, '#', <__main__.Root object at 0x100e83b70>, '-', <__main__.NominalizerTerminal object at 0x100e83b38>, '-', <__main__.SemanticTerminal object at 0x100e837f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: la#CASTLEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0860>, '-', <__main__.AgrTerminal object at 0x100e75550>, '#', <__main__.Root object at 0x100ea0080>, '-', <__main__.NominalizerTerminal object at 0x100ea0278>, '-', <__main__.SemanticTerminal object at 0x100ea07b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 13.599999999999987
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.399999999999997..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.999999999999996..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.299999999999995..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 11.099999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 13.299999999999995
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 12.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 14.699999999999998
line done
now adding Root: CASTLE with -feminine to gender_dict
line done

---------------------

input line #54
input roots: [<__main__.Root object at 0x100ea0ef0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 26.800000000000068..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.399999999999991..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 26.90000000000007..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.00000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.100000000000072..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 11.999999999999995..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.599999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}

create_vi: made BOOK: BOOK_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'BOOK_1'}

create_vi: made BOOK: BOOK_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_4', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea09e8>, '-', <__main__.AgrTerminal object at 0x100ea0438>, '#', <__main__.Root object at 0x100e9b080>, '-', <__main__.NominalizerTerminal object at 0x100e9bcf8>, '-', <__main__.SemanticTerminal object at 0x100ea01d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 11.599999999999994
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 12.199999999999996
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 12.9
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 13.099999999999998
line done
line done

---------------------

input line #55
input roots: [<__main__.Root object at 0x100ea0908>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 12.499999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.200000000000074..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 13.899999999999995..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 13.89999999999999..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 12.099999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.300000000000075..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 13.99999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.099999999999989..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b390>, '-', <__main__.AgrTerminal object at 0x100ea06a0>, '#', <__main__.Root object at 0x100e9b4a8>, '-', <__main__.NominalizerTerminal object at 0x100e9b128>, '-', <__main__.SemanticTerminal object at 0x100e9b3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: una#GRANDPARENTa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR'}
    selection_strength: True
    weight: 12.99999999999999
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 13.5..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 14.099999999999989
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 12.099999999999994
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 12.200000000000003
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.399999999999997
line done
line done

---------------------

input line #56
input roots: [<__main__.Root object at 0x100e9b358>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 27.400000000000077..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.59999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.699999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.500000000000078..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.799999999999995..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.899999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92d30>, '-', <__main__.AgrTerminal object at 0x100e9bcc0>, '#', <__main__.Root object at 0x100e927f0>, '-', <__main__.NominalizerTerminal object at 0x100e92860>, '-', <__main__.SemanticTerminal object at 0x100e92908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 27.500000000000078
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.2
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 13.5
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 13.599999999999998
line done
line done

---------------------

input line #57
input roots: [<__main__.Root object at 0x100e925f8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.500000000000078..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.699999999999994..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.799999999999994..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.599999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86390>, '-', <__main__.AgrTerminal object at 0x100e929b0>, '#', <__main__.Root object at 0x100e8cd68>, '-', <__main__.NominalizerTerminal object at 0x100e8c9b0>, '-', <__main__.SemanticTerminal object at 0x100e8c8d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: unao#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 13.899999999999995
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 12.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.899999999999997
line done
line done

---------------------

input line #58
input roots: [<__main__.Root object at 0x100e86240>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 12.69999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.60000000000008..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 13.899999999999995..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.699999999999989..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 12.699999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.70000000000008..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.799999999999988..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.699999999999994..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.899999999999988..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.799999999999994..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cd30>, '-', <__main__.AgrTerminal object at 0x100e86400>, '#', <__main__.Root object at 0x100e869b0>, '-', <__main__.NominalizerTerminal object at 0x100e89470>, '-', <__main__.SemanticTerminal object at 0x100e8c0b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: une#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 14.899999999999988
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.1
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 13.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.899999999999997
line done
line done

---------------------

input line #59
input roots: [<__main__.Root object at 0x100e86550>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 27.800000000000082..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 10.999999999999996..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 27.900000000000084..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 11.199999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_1', 'null_12'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_5', 'KEY_1', 'null_1', 'KEY_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92940>, '-', <__main__.AgrTerminal object at 0x100e860b8>, '#', <__main__.Root object at 0x100e92668>, '-', <__main__.NominalizerTerminal object at 0x100e92dd8>, '-', <__main__.SemanticTerminal object at 0x100e92b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#KEY-e
full_pronunciation: la#KEYa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b438>, '-', <__main__.AgrTerminal object at 0x100e92080>, '#', <__main__.Root object at 0x100e9b4a8>, '-', <__main__.NominalizerTerminal object at 0x100e9b358>, '-', <__main__.SemanticTerminal object at 0x100e9b518>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: lo#KEYe
vis_used:
Failure
line done
line done

---------------------

input line #60
input roots: [<__main__.Root object at 0x100e9b898>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 28.000000000000085..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.89999999999999..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.100000000000087..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.200000000000088..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.30000000000009..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 12.799999999999994..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.199999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.099999999999996..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 10.999999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'KEY_1', 'i_1', 'null_1'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_2', 'i_1', 'null_4', 'KEY_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bcf8>, '-', <__main__.AgrTerminal object at 0x100e9b550>, '#', <__main__.Root object at 0x100ea0048>, '-', <__main__.NominalizerTerminal object at 0x100ea0f28>, '-', <__main__.SemanticTerminal object at 0x100ea09b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: li#KEYe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0eb8>, '-', <__main__.AgrTerminal object at 0x100e9be10>, '#', <__main__.Root object at 0x100ea0208>, '-', <__main__.NominalizerTerminal object at 0x100ea0e48>, '-', <__main__.SemanticTerminal object at 0x100ea0a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: lo#KEYe
vis_used:
Failure
line done
line done

---------------------

input line #61
input roots: [<__main__.Root object at 0x100ea0748>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 28.40000000000009..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 12.99999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.500000000000092..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.599999999999993..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.199999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.600000000000094..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.700000000000095..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 12.899999999999993..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.699999999999992..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.1..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 11.699999999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 12.799999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 28.800000000000097..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 11.799999999999997..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.699999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}

create_vi: made FOOT: FOOT_3, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made FOOT: FOOT_4, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi FOOT_4 	spelling out FOOT: set() 		 triggering {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83eb8>, '-', <__main__.AgrTerminal object at 0x100ea0240>, '#', <__main__.Root object at 0x100e5db70>, '-', <__main__.NominalizerTerminal object at 0x100e794a8>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.499999999999996..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.099999999999996..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.399999999999995..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 28.800000000000097
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 12.799999999999995
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_2
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 12.8
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 13.699999999999998
line done
line done

---------------------

input line #62
input roots: [<__main__.Root object at 0x100e83b38>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 29.400000000000098..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.099999999999989..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.799999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 29.5000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 16.9..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.899999999999991..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.599999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 29.6000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 29.700000000000102..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 12.999999999999993..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.699999999999992..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.799999999999992..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.2..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.0..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 13.399999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 29.800000000000104..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.799999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c048>, '-', <__main__.AgrTerminal object at 0x100e757f0>, '#', <__main__.Root object at 0x100e8cac8>, '-', <__main__.NominalizerTerminal object at 0x100e8c550>, '-', <__main__.SemanticTerminal object at 0x100e8c7f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 14.099999999999985
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 13.4..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.599999999999996..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.199999999999996..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.499999999999995..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 29.800000000000104
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 13.999999999999991
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_8
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 12.700000000000003
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 14.299999999999997
line done
line done

---------------------

input line #63
input roots: [<__main__.Root object at 0x100e75eb8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 30.400000000000105..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.199999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 30.500000000000107..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 11.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_1', 'null_12'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_5', 'KEY_1', 'null_1', 'KEY_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89588>, '-', <__main__.AgrTerminal object at 0x100ea0f98>, '#', <__main__.Root object at 0x100e89d30>, '-', <__main__.NominalizerTerminal object at 0x100e891d0>, '-', <__main__.SemanticTerminal object at 0x100e899e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR'}
    selection_strength: True
    weight: 13.399999999999988
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 13.4..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 30.500000000000107
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 11.199999999999996
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 13.200000000000003
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 11.899999999999999
line done
now adding Root: KEY with +feminine to gender_dict
line done

---------------------

input line #64
input roots: [<__main__.Root object at 0x100e8c438>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 17.1..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 31.100000000000108..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.899999999999993..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 12.999999999999993..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.699999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}

create_vi: made CLOWN: CLOWN_3, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made CLOWN: CLOWN_4, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CLOWN_4 	spelling out CLOWN: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84a90>, '-', <__main__.AgrTerminal object at 0x100e89240>, '#', <__main__.Root object at 0x100e84160>, '-', <__main__.NominalizerTerminal object at 0x100e840f0>, '-', <__main__.SemanticTerminal object at 0x100e841d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CLOWN-o
full_pronunciation: uni#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 14.799999999999988
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 11.499999999999995
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.799999999999997
line done
line done

---------------------

input line #65
input roots: [<__main__.Root object at 0x100e89160>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 11.399999999999997..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}

create_vi: made CAR: CAR_3, triggers = {('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made CAR: CAR_4, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CAR_4 	spelling out CAR: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75208>, '-', <__main__.AgrTerminal object at 0x100e8cef0>, '#', <__main__.Root object at 0x100e75550>, '-', <__main__.NominalizerTerminal object at 0x100e75518>, '-', <__main__.SemanticTerminal object at 0x100e75588>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: la#CARa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'KEY'}
    selection_strength: True
    weight: 13.599999999999987
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 13.5..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 31.100000000000108
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 11.699999999999996
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 13.700000000000003
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 12.799999999999997
line done
line done

---------------------

input line #66
input roots: [<__main__.Root object at 0x100e75a20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 31.70000000000011..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.099999999999993..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.199999999999992..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.799999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea02b0>, '-', <__main__.AgrTerminal object at 0x100e833c8>, '#', <__main__.Root object at 0x100ea0da0>, '-', <__main__.NominalizerTerminal object at 0x100ea0be0>, '-', <__main__.SemanticTerminal object at 0x100ea0080>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: unao#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 17.200000000000003
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 14.200000000000003
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 12.499999999999998
line done
line done

---------------------

input line #67
input roots: [<__main__.Root object at 0x100ea0898>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 31.80000000000011..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.799999999999988..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.899999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'o_1', 'null_1', 'null_3', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0978>, '-', <__main__.AgrTerminal object at 0x100ea0320>, '#', <__main__.Root object at 0x100e9ba58>, '-', <__main__.NominalizerTerminal object at 0x100e9b240>, '-', <__main__.SemanticTerminal object at 0x100e9b2b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: unoe#MOUSEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bba8>, '-', <__main__.AgrTerminal object at 0x100ea0780>, '#', <__main__.Root object at 0x100e9b7b8>, '-', <__main__.NominalizerTerminal object at 0x100e9bb38>, '-', <__main__.SemanticTerminal object at 0x100e9b9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: uni#MOUSEo
vis_used:
Failure
line done
line done

---------------------

input line #68
input roots: [<__main__.Root object at 0x100e9b128>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 31.900000000000112..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.000000000000114..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.299999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.100000000000115..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 10.699999999999998..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 12.299999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.899999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.20000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.30000000000012..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 14.59999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.40000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.50000000000012..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.899999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.199999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}

create_vi: made BOOK: BOOK_3, triggers = {('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made BOOK: BOOK_4, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi BOOK_4 	spelling out BOOK: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92160>, '-', <__main__.AgrTerminal object at 0x100e9b208>, '#', <__main__.Root object at 0x100e92128>, '-', <__main__.NominalizerTerminal object at 0x100e92e80>, '-', <__main__.SemanticTerminal object at 0x100e92748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92898>, '-', <__main__.AgrTerminal object at 0x100e92ac8>, '#', <__main__.Root object at 0x100e860b8>, '-', <__main__.NominalizerTerminal object at 0x100e86cf8>, '-', <__main__.SemanticTerminal object at 0x100e864e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKa
vis_used:
Failure
line done
line done

---------------------

input line #69
input roots: [<__main__.Root object at 0x100e92eb8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.60000000000012..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 14.999999999999988..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 11.999999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7f128>, '-', <__main__.AgrTerminal object at 0x100e927f0>, '#', <__main__.Root object at 0x100e65c88>, '-', <__main__.NominalizerTerminal object at 0x100e7fb00>, '-', <__main__.SemanticTerminal object at 0x100e7fdd8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#BOOK-o
full_pronunciation: unaa#BOOKo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e940>, '-', <__main__.AgrTerminal object at 0x100e7ba90>, '#', <__main__.Root object at 0x100e7ea90>, '-', <__main__.NominalizerTerminal object at 0x100e7ec88>, '-', <__main__.SemanticTerminal object at 0x100e7e7b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: unoo#BOOKo
vis_used:
Failure
line done
line done

---------------------

input line #70
input roots: [<__main__.Root object at 0x100e7bc50>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 10.799999999999997..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 13.999999999999995..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92ef0>, '-', <__main__.AgrTerminal object at 0x100e7b630>, '#', <__main__.Root object at 0x100e92be0>, '-', <__main__.NominalizerTerminal object at 0x100e920b8>, '-', <__main__.SemanticTerminal object at 0x100e92940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: lo#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 32.60000000000012
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 17.80000000000001
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 13.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 13.299999999999997
line done
line done

---------------------

input line #71
input roots: [<__main__.Root object at 0x100e92dd8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 13.299999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.60000000000012..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 11.299999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.899999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 14.099999999999994..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 12.399999999999995..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.099999999999987..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.099999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.700000000000124..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.199999999999987..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 11.999999999999993..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 12.499999999999995..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.299999999999986..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 11.399999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.099999999999993..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.299999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}

create_vi: made nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b7b8>, '-', <__main__.AgrTerminal object at 0x100e860b8>, '#', <__main__.Root object at 0x100e9bfd0>, '-', <__main__.NominalizerTerminal object at 0x100e9bef0>, '-', <__main__.SemanticTerminal object at 0x100e9b9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#KEY-e
full_pronunciation: una#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 15.299999999999986
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 13.099999999999993
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 14.100000000000003
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 15.799999999999995
line done
line done

---------------------

input line #72
input roots: [<__main__.Root object at 0x100e9bb38>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 32.800000000000125..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 32.90000000000013..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 17.900000000000013..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.399999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.00000000000013..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 10.899999999999997..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 12.599999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 18.000000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.299999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.10000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.20000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 14.69999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 18.100000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.30000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.400000000000134..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 12.999999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 18.200000000000017..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.399999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'o_1', 'null_1', 'null_3', 'MOUSE_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b70>, '-', <__main__.AgrTerminal object at 0x100e9b400>, '#', <__main__.Root object at 0x100ea0e48>, '-', <__main__.NominalizerTerminal object at 0x100ea0eb8>, '-', <__main__.SemanticTerminal object at 0x100ea07b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: laa#MOUSEo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0be0>, '-', <__main__.AgrTerminal object at 0x100ea0a20>, '#', <__main__.Root object at 0x100ea0ef0>, '-', <__main__.NominalizerTerminal object at 0x100ea0cc0>, '-', <__main__.SemanticTerminal object at 0x100ea02b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER'}
    selection_strength: True
    weight: 14.599999999999984
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 13.4..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.699999999999996..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.299999999999995..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.599999999999994..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 14.099999999999994
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 14.000000000000004
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 15.799999999999995
line done
now adding Root: MOUSE with -feminine to gender_dict
line done

---------------------

input line #73
input roots: [<__main__.Root object at 0x100ea06a0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 13.399999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 33.500000000000135..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.399999999999986..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.199999999999992..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 14.699999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.499999999999986..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.499999999999988..already existed

create_vi: tried definite: l_5, triggers = set(), weight = 10.299999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.599999999999985..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.699999999999985..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.399999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'FROG_1', 'FROG_2', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75518>, '-', <__main__.AgrTerminal object at 0x100ea05f8>, '#', <__main__.Root object at 0x100e75be0>, '-', <__main__.NominalizerTerminal object at 0x100e75b00>, '-', <__main__.SemanticTerminal object at 0x100e75208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'KEY'}
    selection_strength: True
    weight: 13.899999999999986
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 12.599999999999994
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 13.5
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 13.299999999999997
line done
now adding Root: FROG with +feminine to gender_dict
line done

---------------------

input line #74
input roots: [<__main__.Root object at 0x100e75588>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 11.499999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 14.799999999999994..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.499999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e840f0>, '-', <__main__.AgrTerminal object at 0x100e753c8>, '#', <__main__.Root object at 0x100e89eb8>, '-', <__main__.NominalizerTerminal object at 0x100e89748>, '-', <__main__.SemanticTerminal object at 0x100e84a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.799999999999995..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.399999999999995..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.699999999999994..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 33.500000000000135
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 18.200000000000017
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 13.4
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 12.599999999999998
line done
line done

---------------------

input line #75
input roots: [<__main__.Root object at 0x100e841d0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 11.599999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 14.899999999999993..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.599999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bda0>, '-', <__main__.AgrTerminal object at 0x100e73780>, '#', <__main__.Root object at 0x100e6ef28>, '-', <__main__.NominalizerTerminal object at 0x100e723c8>, '-', <__main__.SemanticTerminal object at 0x100e72160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: lo#OFFSPRINGo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 14.999999999999982
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.899999999999995..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.499999999999995..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.799999999999994..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.000000000000135
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 14.899999999999993
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 13.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.4
line done
line done

---------------------

input line #76
input roots: [<__main__.Root object at 0x100e78f28>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 13.599999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 34.600000000000136..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 11.999999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.299999999999992..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.499999999999993..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 13.199999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.799999999999985..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.099999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 34.70000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.899999999999984..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.399999999999991..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 13.299999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 15.999999999999984..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.099999999999994..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.499999999999991..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.499999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ccc0>, '-', <__main__.AgrTerminal object at 0x100e84160>, '#', <__main__.Root object at 0x100e8c4e0>, '-', <__main__.NominalizerTerminal object at 0x100e8cef0>, '-', <__main__.SemanticTerminal object at 0x100e8ceb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 14.099999999999985
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.399999999999995..already existed

create_vi: made nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 15.999999999999984
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 13.099999999999993
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 13.899999999999997
line done
line done

---------------------

input line #77
input roots: [<__main__.Root object at 0x100e8c978>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 18.80000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 34.80000000000014..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.499999999999991..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.59999999999999..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83278>, '-', <__main__.AgrTerminal object at 0x100e75748>, '#', <__main__.Root object at 0x100ea0390>, '-', <__main__.NominalizerTerminal object at 0x100e79be0>, '-', <__main__.SemanticTerminal object at 0x100e83b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uno#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 13.59999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 18.80000000000002
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 13.099999999999998
line done
line done

---------------------

input line #78
input roots: [<__main__.Root object at 0x100e833c8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 18.80000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 34.90000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 16.599999999999987..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.199999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0ac8>, '-', <__main__.AgrTerminal object at 0x100e835f8>, '#', <__main__.Root object at 0x100ea0710>, '-', <__main__.NominalizerTerminal object at 0x100ea0048>, '-', <__main__.SemanticTerminal object at 0x100ea0940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: unoa#BOOKo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bba8>, '-', <__main__.AgrTerminal object at 0x100ea0128>, '#', <__main__.Root object at 0x100e9b240>, '-', <__main__.NominalizerTerminal object at 0x100e9b6d8>, '-', <__main__.SemanticTerminal object at 0x100e9bac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: uno#BOOKo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 14.5..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.999999999999995..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.599999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.899999999999993..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 16.599999999999987
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 18.80000000000002
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 14.500000000000004
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.1
line done
line done

---------------------

input line #79
input roots: [<__main__.Root object at 0x100ea0dd8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 11.699999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.599999999999993..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.699999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b518>, '-', <__main__.AgrTerminal object at 0x100e9b9b0>, '#', <__main__.Root object at 0x100e86a90>, '-', <__main__.NominalizerTerminal object at 0x100e86048>, '-', <__main__.SemanticTerminal object at 0x100e86f98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_6: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: lo#FOOTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.90000000000014
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 15.599999999999993
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_6
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 11.999999999999995
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #80
input roots: [<__main__.Root object at 0x100e9b940>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 34.90000000000014..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.699999999999987..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.099999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 35.00000000000014..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.40000000000002..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.199999999999994..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.099999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92358>, '-', <__main__.AgrTerminal object at 0x100e9b358>, '#', <__main__.Root object at 0x100e92898>, '-', <__main__.NominalizerTerminal object at 0x100e92cc0>, '-', <__main__.SemanticTerminal object at 0x100e92c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: le#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 35.00000000000014
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 11.599999999999994
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_6
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 14.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 14.799999999999997
line done
line done

---------------------

input line #81
input roots: [<__main__.Root object at 0x100e92d30>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 11.499999999999996..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e66c88>, '-', <__main__.AgrTerminal object at 0x100e927b8>, '#', <__main__.Root object at 0x100e662b0>, '-', <__main__.NominalizerTerminal object at 0x100e666d8>, '-', <__main__.SemanticTerminal object at 0x100e66978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 14.499999999999984
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 14.0..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.999999999999995..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.90000000000014
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 13.299999999999994
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.000000000000004
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 14.499999999999996
line done
line done

---------------------

input line #82
input roots: [<__main__.Root object at 0x100e4ada0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 35.50000000000014..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.799999999999986..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 35.60000000000014..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.50000000000002..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.699999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 35.700000000000145..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 35.800000000000146..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.699999999999992..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.799999999999994..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.499999999999995..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}

create_vi: made TOWER: TOWER_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'TOWER_1'}

create_vi: made TOWER: TOWER_2, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'i_1', 'TOWER_1', 'null_4', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92cc0>, '-', <__main__.AgrTerminal object at 0x100e66128>, '#', <__main__.Root object at 0x100e92550>, '-', <__main__.NominalizerTerminal object at 0x100e92e80>, '-', <__main__.SemanticTerminal object at 0x100e92358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: la#TOWERi
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e864e0>, '-', <__main__.AgrTerminal object at 0x100e92940>, '#', <__main__.Root object at 0x100e86048>, '-', <__main__.NominalizerTerminal object at 0x100e86a90>, '-', <__main__.SemanticTerminal object at 0x100e86a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: le#TOWERe
vis_used:
Failure
line done
line done

---------------------

input line #83
input roots: [<__main__.Root object at 0x100e92198>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 35.90000000000015..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.899999999999986..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 14.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 36.00000000000015..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.600000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 36.10000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 36.20000000000015..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.799999999999992..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 14.99999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.19999999999999..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.299999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 11.699999999999994..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.700000000000024..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 13.499999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 36.30000000000015..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.899999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b470>, '-', <__main__.AgrTerminal object at 0x100e7a4a8>, '#', <__main__.Root object at 0x100e9beb8>, '-', <__main__.NominalizerTerminal object at 0x100e9b5f8>, '-', <__main__.SemanticTerminal object at 0x100e9bef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 15.59999999999998
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 14.6..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 11.999999999999995..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.699999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 12.999999999999993..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 36.30000000000015
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 11.699999999999994
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.500000000000004
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 14.899999999999997
line done
line done

---------------------

input line #84
input roots: [<__main__.Root object at 0x100e9bbe0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 36.900000000000155..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.899999999999993..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 13.999999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 37.000000000000156..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 11.599999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_1', 'null_12'}

create_vi: made TOWER: TOWER_3, triggers = {('e', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?

create_vi: made TOWER: TOWER_4, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi TOWER_4 	spelling out TOWER: set() 		 triggering {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'TOWER_3', 'TOWER_1', 'e_5', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea09b0>, '-', <__main__.AgrTerminal object at 0x100e9bb00>, '#', <__main__.Root object at 0x100ea0c88>, '-', <__main__.NominalizerTerminal object at 0x100ea03c8>, '-', <__main__.SemanticTerminal object at 0x100ea0780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.2..already existed

create_vi: made nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_18
    triggers: {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 37.000000000000156
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 13.999999999999986
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 13.199999999999998
line done
line done

---------------------

input line #85
input roots: [<__main__.Root object at 0x100ea0630>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 37.60000000000016..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 14.599999999999985..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.099999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 37.70000000000016..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.800000000000026..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.199999999999989..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.29999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 37.80000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 37.90000000000016..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.899999999999991..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.299999999999988..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.39999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.49999999999999..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.399999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.299999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 19.900000000000027..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 13.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.00000000000016..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.399999999999995..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.999999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e837f0>, '-', <__main__.AgrTerminal object at 0x100ea0438>, '#', <__main__.Root object at 0x100e8c4e0>, '-', <__main__.NominalizerTerminal object at 0x100e8c9b0>, '-', <__main__.SemanticTerminal object at 0x100e8cb38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lii#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 10.999999999999996
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 13.599999999999994
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.6
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.499999999999996
line done
line done

---------------------

input line #86
input roots: [<__main__.Root object at 0x100e833c8>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 11.799999999999995..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.599999999999993..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.799999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89b00>, '-', <__main__.AgrTerminal object at 0x100e84240>, '#', <__main__.Root object at 0x100e75048>, '-', <__main__.NominalizerTerminal object at 0x100e72048>, '-', <__main__.SemanticTerminal object at 0x100e89240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: la#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 12.399999999999995
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 14.599999999999985
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.000000000000004
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 14.999999999999996
line done
line done

---------------------

input line #87
input roots: [<__main__.Root object at 0x100e86f98>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 14.599999999999985..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.100000000000165..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.199999999999994..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.59999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.699999999999992..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 13.899999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.19999999999999..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.200000000000166..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.29999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.69999999999999..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 13.999999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.39999999999999..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.79999999999999..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.599999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56860>, '-', <__main__.AgrTerminal object at 0x100e8ca58>, '#', <__main__.Root object at 0x100e5a1d0>, '-', <__main__.NominalizerTerminal object at 0x100e5a780>, '-', <__main__.SemanticTerminal object at 0x100e5a6a0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: unoa#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 12.199999999999994
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 13.999999999999991
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.900000000000004
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 14.999999999999996
line done
line done

---------------------

input line #88
input roots: [<__main__.Root object at 0x100e56710>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 20.00000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.30000000000017..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.59999999999999..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.69999999999999..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.199999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75be0>, '-', <__main__.AgrTerminal object at 0x100e78320>, '#', <__main__.Root object at 0x100e72048>, '-', <__main__.NominalizerTerminal object at 0x100e75048>, '-', <__main__.SemanticTerminal object at 0x100e75748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: unoo#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 12.199999999999994
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 20.00000000000003
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.5
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.700000000000003
line done
line done

---------------------

input line #89
input roots: [<__main__.Root object at 0x100e75cf8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 38.40000000000017..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 11.999999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.00000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.50000000000017..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.10000000000003..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.60000000000017..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 11.899999999999995..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 14.099999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.20000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.70000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.800000000000175..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.399999999999988..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.300000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 38.900000000000176..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 39.00000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.299999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.400000000000034..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.899999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c4a8>, '-', <__main__.AgrTerminal object at 0x100e84f28>, '#', <__main__.Root object at 0x100e8c978>, '-', <__main__.NominalizerTerminal object at 0x100e8cac8>, '-', <__main__.SemanticTerminal object at 0x100e8cef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e835f8>, '-', <__main__.AgrTerminal object at 0x100e8cb38>, '#', <__main__.Root object at 0x100ea04e0>, '-', <__main__.NominalizerTerminal object at 0x100ea05f8>, '-', <__main__.SemanticTerminal object at 0x100e79668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: li#BOOKo
vis_used:
Failure
line done
line done

---------------------

input line #90
input roots: [<__main__.Root object at 0x100e83b38>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 39.10000000000018..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 14.699999999999985..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.399999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 39.20000000000018..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.500000000000036..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.299999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0c18>, '-', <__main__.AgrTerminal object at 0x100ea0358>, '#', <__main__.Root object at 0x100ea09e8>, '-', <__main__.NominalizerTerminal object at 0x100ea0d30>, '-', <__main__.SemanticTerminal object at 0x100ea0908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: lee#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 11.299999999999995
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 13.499999999999993
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.800000000000004
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 13.399999999999997
line done
line done

---------------------

input line #91
input roots: [<__main__.Root object at 0x100ea0550>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 11.999999999999995..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.799999999999992..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 11.999999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b208>, '-', <__main__.AgrTerminal object at 0x100ea0160>, '#', <__main__.Root object at 0x100e9b940>, '-', <__main__.NominalizerTerminal object at 0x100e9b9b0>, '-', <__main__.SemanticTerminal object at 0x100e9b828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#PIBLING-o
full_pronunciation: la#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 39.20000000000018
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 14.699999999999985
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.700000000000005
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.800000000000004
line done
line done

---------------------

input line #92
input roots: [<__main__.Root object at 0x100e9bcc0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 20.600000000000037..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 39.20000000000018..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.89999999999999..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.99999999999999..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.199999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e929b0>, '-', <__main__.AgrTerminal object at 0x100e9b898>, '#', <__main__.Root object at 0x100e92668>, '-', <__main__.NominalizerTerminal object at 0x100e92ef0>, '-', <__main__.SemanticTerminal object at 0x100e927b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: uni#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 13.99999999999999
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 12.399999999999993
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.800000000000004
line done
line done

---------------------

input line #93
input roots: [<__main__.Root object at 0x100e9bef0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 14.699999999999985..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 39.30000000000018..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.89999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 15.899999999999991..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 14.199999999999992..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.599999999999994..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 39.40000000000018..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.699999999999996..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 12.99999999999999..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 14.299999999999992..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 17.799999999999997..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 13.099999999999989..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.699999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e667b8>, '-', <__main__.AgrTerminal object at 0x100e92358>, '#', <__main__.Root object at 0x100ea7828>, '-', <__main__.NominalizerTerminal object at 0x100ea72b0>, '-', <__main__.SemanticTerminal object at 0x100ea7518>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#PIBLING-a
full_pronunciation: une#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 17.799999999999997
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.399999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 14.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 14.999999999999996
line done
line done

---------------------

input line #94
input roots: [<__main__.Root object at 0x100e612e8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 11.699999999999996..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ec88>, '-', <__main__.AgrTerminal object at 0x100e66828>, '#', <__main__.Root object at 0x100e929e8>, '-', <__main__.NominalizerTerminal object at 0x100e7e9b0>, '-', <__main__.SemanticTerminal object at 0x100e7eb00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: la#CARa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 15.199999999999982
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.099999999999994..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 39.40000000000018
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 13.999999999999991
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 13.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 14.999999999999996
line done
line done

---------------------

input line #95
input roots: [<__main__.Root object at 0x100e7e438>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 20.70000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 40.000000000000185..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 13.99999999999999..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.099999999999989..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.299999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86470>, '-', <__main__.AgrTerminal object at 0x100e92ac8>, '#', <__main__.Root object at 0x100e7a7f0>, '-', <__main__.NominalizerTerminal object at 0x100e86f28>, '-', <__main__.SemanticTerminal object at 0x100e86748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 16.399999999999984
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 14.5..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.099999999999994..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.799999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.099999999999993..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 17.699999999999996
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 15.899999999999991
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 15.600000000000005
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 17.800000000000004
line done
line done

---------------------

input line #96
input roots: [<__main__.Root object at 0x100e86a90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 12.099999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b908>, '-', <__main__.AgrTerminal object at 0x100e9bef0>, '#', <__main__.Root object at 0x100e9ba58>, '-', <__main__.NominalizerTerminal object at 0x100e9b6d8>, '-', <__main__.SemanticTerminal object at 0x100e9bac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_7: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CASTLE-o
full_pronunciation: li#CASTLEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.000000000000185
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 12.299999999999994
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_7
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 12.799999999999994
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 15.499999999999996
line done
line done

---------------------

input line #97
input roots: [<__main__.Root object at 0x100e9b2e8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 14.799999999999985..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 40.000000000000185..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.299999999999997..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 13.199999999999989..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.4..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 14.899999999999984..already existed

create_vi: tried definite: l_5, triggers = set(), weight = 10.399999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.5..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.6..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.799999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'BALL_2', 'BALL_1', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0320>, '-', <__main__.AgrTerminal object at 0x100e9b3c8>, '#', <__main__.Root object at 0x100ea0f28>, '-', <__main__.NominalizerTerminal object at 0x100ea07b8>, '-', <__main__.SemanticTerminal object at 0x100ea0be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#BALL-a
full_pronunciation: uno#BALLo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83128>, '-', <__main__.AgrTerminal object at 0x100ea0588>, '#', <__main__.Root object at 0x100e838d0>, '-', <__main__.NominalizerTerminal object at 0x100e83278>, '-', <__main__.SemanticTerminal object at 0x100e83b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 14.6..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.199999999999994..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.799999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.199999999999992..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 13.199999999999989
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 14.899999999999984
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.100000000000005
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 15.499999999999996
line done
line done

---------------------

input line #98
input roots: [<__main__.Root object at 0x100ea0ef0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 40.100000000000186..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.099999999999993..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 15.499999999999984..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 40.20000000000019..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 11.799999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'BALL_2', 'BALL_1', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84b00>, '-', <__main__.AgrTerminal object at 0x100ea0ac8>, '#', <__main__.Root object at 0x100e89240>, '-', <__main__.NominalizerTerminal object at 0x100e894e0>, '-', <__main__.SemanticTerminal object at 0x100e849b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.199999999999994..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 12.099999999999994
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 15.499999999999984
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 14.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 16.099999999999998
line done
line done

---------------------

input line #99
input roots: [<__main__.Root object at 0x100e847b8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 40.30000000000019..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.099999999999984..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 40.40000000000019..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.80000000000004..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.599999999999993..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.299999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78630>, '-', <__main__.AgrTerminal object at 0x100e89828>, '#', <__main__.Root object at 0x100e6bb00>, '-', <__main__.NominalizerTerminal object at 0x100e56860>, '-', <__main__.SemanticTerminal object at 0x100e442b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: le#FROGe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.299999999999994..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.40000000000019
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.099999999999993
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 14.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 13.399999999999997
line done
line done

---------------------

input line #100
input roots: [<__main__.Root object at 0x100e449b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 41.00000000000019..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.199999999999985..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.499999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 41.10000000000019..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 20.90000000000004..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.599999999999987..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.599999999999989..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 41.200000000000195..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 41.300000000000196..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 14.59999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.699999999999987..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.699999999999989..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.799999999999988..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.399999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.399999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.000000000000043..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 13.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.499999999999995..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 10.999999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7ef0>, '-', <__main__.AgrTerminal object at 0x100e784e0>, '#', <__main__.Root object at 0x100eb1160>, '-', <__main__.NominalizerTerminal object at 0x100eb10f0>, '-', <__main__.SemanticTerminal object at 0x100ea7fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.299999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.299999999999992..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 41.4000000000002
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 13.599999999999994
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.499999999999996
line done
line done

---------------------

input line #101
input roots: [<__main__.Root object at 0x100ea7da0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 42.0000000000002..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.299999999999986..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.799999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.1000000000002..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.100000000000044..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.899999999999986..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.899999999999988..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.2000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.3000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 14.69999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 15.999999999999986..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 13.999999999999988..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.099999999999987..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.499999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.599999999999993..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.599999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.200000000000045..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.199999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.400000000000205..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.699999999999994..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.099999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75a20>, '-', <__main__.AgrTerminal object at 0x100ea7dd8>, '#', <__main__.Root object at 0x100e75748>, '-', <__main__.NominalizerTerminal object at 0x100e754e0>, '-', <__main__.SemanticTerminal object at 0x100e756d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: le#CLOWNi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.400000000000205
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.599999999999993
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.600000000000005
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.099999999999998
line done
line done

---------------------

input line #102
input roots: [<__main__.Root object at 0x100ea7080>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 42.400000000000205..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.699999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.500000000000206..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.300000000000047..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.799999999999992..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.399999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84828>, '-', <__main__.AgrTerminal object at 0x100e75048>, '#', <__main__.Root object at 0x100e8cf60>, '-', <__main__.NominalizerTerminal object at 0x100e8c048>, '-', <__main__.SemanticTerminal object at 0x100e8cac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.500000000000206
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.499999999999993
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.4
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #103
input roots: [<__main__.Root object at 0x100e78390>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 42.500000000000206..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.60000000000021..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.40000000000005..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.199999999999987..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.699999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.70000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.80000000000021..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 14.79999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.299999999999986..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.399999999999986..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.599999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.799999999999992..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.799999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.50000000000005..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.90000000000021..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.899999999999993..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0550>, '-', <__main__.AgrTerminal object at 0x100e840f0>, '#', <__main__.Root object at 0x100ea0438>, '-', <__main__.NominalizerTerminal object at 0x100ea0860>, '-', <__main__.SemanticTerminal object at 0x100ea0278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: le#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.90000000000021
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.399999999999993
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.6
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #104
input roots: [<__main__.Root object at 0x100e83b38>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 21.60000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 42.90000000000021..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.199999999999989..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.299999999999988..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.399999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea04a8>, '-', <__main__.AgrTerminal object at 0x100ea0fd0>, '#', <__main__.Root object at 0x100e9b5c0>, '-', <__main__.NominalizerTerminal object at 0x100e9b6a0>, '-', <__main__.SemanticTerminal object at 0x100e9b7b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#FOOT-e
full_pronunciation: una#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 18.6
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 16.49999999999999
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.500000000000004
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 13.799999999999997
line done
line done

---------------------

input line #105
input roots: [<__main__.Root object at 0x100ea09e8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 43.00000000000021..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.100000000000215..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.700000000000053..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.499999999999986..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.200000000000216..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.30000000000022..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.599999999999985..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.699999999999985..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.699999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 12.999999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.800000000000054..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.399999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.40000000000022..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.099999999999993..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.299999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b9e8>, '-', <__main__.AgrTerminal object at 0x100ea0908>, '#', <__main__.Root object at 0x100e86cf8>, '-', <__main__.NominalizerTerminal object at 0x100e7a7f0>, '-', <__main__.SemanticTerminal object at 0x100e9bc88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: lo#FLOWERi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 43.40000000000022
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 16.599999999999994
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.5
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #106
input roots: [<__main__.Root object at 0x100e9b518>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 43.40000000000022..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.59999999999999..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.899999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.50000000000022..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 21.900000000000055..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.499999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92e80>, '-', <__main__.AgrTerminal object at 0x100e5e978>, '#', <__main__.Root object at 0x100e92dd8>, '-', <__main__.NominalizerTerminal object at 0x100e92898>, '-', <__main__.SemanticTerminal object at 0x100e92550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#FROG-e
full_pronunciation: li#FROGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 43.50000000000022
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 14.399999999999993
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 14.099999999999996
line done
line done

---------------------

input line #107
input roots: [<__main__.Root object at 0x100e929b0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 22.000000000000057..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.50000000000022..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.399999999999988..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.499999999999988..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.499999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1390>, '-', <__main__.AgrTerminal object at 0x100e66c88>, '#', <__main__.Root object at 0x100eb15c0>, '-', <__main__.NominalizerTerminal object at 0x100eb1550>, '-', <__main__.SemanticTerminal object at 0x100eb1470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: uni#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 14.499999999999988
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 12.999999999999991
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.4
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 18.500000000000007
line done
line done

---------------------

input line #108
input roots: [<__main__.Root object at 0x100ea07f0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 43.60000000000022..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.70000000000022..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 22.10000000000006..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.799999999999985..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.800000000000225..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 43.900000000000226..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 14.99999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 16.9..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.899999999999984..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 14.999999999999984..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.799999999999997..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.199999999999992..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 22.20000000000006..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.399999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.00000000000023..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.299999999999992..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.399999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7fe80>, '-', <__main__.AgrTerminal object at 0x100e66828>, '#', <__main__.Root object at 0x100e86a20>, '-', <__main__.NominalizerTerminal object at 0x100e86828>, '-', <__main__.SemanticTerminal object at 0x100e86a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: lie#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.299999999999994
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #109
input roots: [<__main__.Root object at 0x100e92160>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 16.799999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.10000000000023..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.599999999999993..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 13.799999999999988..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 14.399999999999991..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.6..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.099999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.20000000000023..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.700000000000003..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 13.899999999999988..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 14.499999999999991..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 18.800000000000004..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.699999999999992..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 13.999999999999988..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.899999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bdd8>, '-', <__main__.AgrTerminal object at 0x100e927b8>, '#', <__main__.Root object at 0x100e9b128>, '-', <__main__.NominalizerTerminal object at 0x100e9be10>, '-', <__main__.SemanticTerminal object at 0x100e9b978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 15.999999999999979
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.399999999999993..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 18.800000000000004
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 14.499999999999991
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 12.399999999999993
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 16.7
line done
line done

---------------------

input line #110
input roots: [<__main__.Root object at 0x100e9bfd0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 12.699999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.199999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0978>, '-', <__main__.AgrTerminal object at 0x100e9b9e8>, '#', <__main__.Root object at 0x100ea0b38>, '-', <__main__.NominalizerTerminal object at 0x100ea0780>, '-', <__main__.SemanticTerminal object at 0x100ea0da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: li#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 44.20000000000023
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 13.09999999999999
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 17.2
line done
line done

---------------------

input line #111
input roots: [<__main__.Root object at 0x100ea0eb8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 16.899999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.20000000000023..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.799999999999992..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.099999999999987..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.09999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.400000000000006..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.199999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.30000000000023..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.500000000000007..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.199999999999987..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.19999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.60000000000001..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.299999999999986..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 10.999999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e833c8>, '-', <__main__.AgrTerminal object at 0x100ea0ef0>, '#', <__main__.Root object at 0x100e8c9b0>, '-', <__main__.NominalizerTerminal object at 0x100e8ccc0>, '-', <__main__.SemanticTerminal object at 0x100e5db70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 19.60000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 15.19999999999999
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 13.699999999999998
line done
line done

---------------------

input line #112
input roots: [<__main__.Root object at 0x100e83e48>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 44.40000000000023..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 16.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.500000000000234..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 11.899999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'BALL_2', 'BALL_1', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89b00>, '-', <__main__.AgrTerminal object at 0x100e83940>, '#', <__main__.Root object at 0x100e75898>, '-', <__main__.NominalizerTerminal object at 0x100e72358>, '-', <__main__.SemanticTerminal object at 0x100e89710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#BALL-a
full_pronunciation: lo#BALLa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75438>, '-', <__main__.AgrTerminal object at 0x100e84940>, '#', <__main__.Root object at 0x100e78320>, '-', <__main__.NominalizerTerminal object at 0x100e78630>, '-', <__main__.SemanticTerminal object at 0x100e444e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: lo#BALLa
vis_used:
Failure
line done
line done

---------------------

input line #113
input roots: [<__main__.Root object at 0x100e75518>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 44.600000000000236..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 17.099999999999998..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.0..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.70000000000024..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 22.30000000000006..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.1..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.099999999999984..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.80000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 44.90000000000024..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.299999999999988..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.199999999999983..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.299999999999983..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.19999999999999..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.399999999999991..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 22.400000000000063..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 45.00000000000024..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.499999999999991..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.399999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1710>, '-', <__main__.AgrTerminal object at 0x100e75be0>, '#', <__main__.Root object at 0x100eb1128>, '-', <__main__.NominalizerTerminal object at 0x100eb1390>, '-', <__main__.SemanticTerminal object at 0x100eb1550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 17.800000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.399999999999993..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.899999999999993..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.399999999999991..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 45.00000000000024
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 13.19999999999999
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.200000000000001
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #114
input roots: [<__main__.Root object at 0x100ea7f28>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 11.999999999999995..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7198>, '-', <__main__.AgrTerminal object at 0x100ea72e8>, '#', <__main__.Root object at 0x100e56e10>, '-', <__main__.NominalizerTerminal object at 0x100e5a710>, '-', <__main__.SemanticTerminal object at 0x100ea7d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.999999999999993..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 45.50000000000024
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 17.099999999999998
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 17.400000000000002
line done
line done

---------------------

input line #115
input roots: [<__main__.Root object at 0x100ea7ef0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 12.799999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 16.9..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.299999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89588>, '-', <__main__.AgrTerminal object at 0x100ea7c18>, '#', <__main__.Root object at 0x100e84748>, '-', <__main__.NominalizerTerminal object at 0x100e84be0>, '-', <__main__.SemanticTerminal object at 0x100e89400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: lo#CLOWNo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.499999999999993..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.999999999999993..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.499999999999991..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 46.00000000000024
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 22.400000000000063
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 14.700000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 18.60000000000001
line done
line done

---------------------

input line #116
input roots: [<__main__.Root object at 0x100e89828>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 46.60000000000024..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 17.7..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 46.700000000000244..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 23.000000000000064..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.399999999999983..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 46.800000000000246..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 46.90000000000025..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.399999999999988..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.499999999999982..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.599999999999982..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.89999999999999..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.59999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 23.100000000000065..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.599999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 47.00000000000025..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.69999999999999..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.499999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83e48>, '-', <__main__.AgrTerminal object at 0x100e84828>, '#', <__main__.Root object at 0x100e83a90>, '-', <__main__.NominalizerTerminal object at 0x100e83b70>, '-', <__main__.SemanticTerminal object at 0x100e83358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_13: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#GRANDPARENT-i
full_pronunciation: le#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 47.00000000000025
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.299999999999994
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_13
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 11.599999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 13.999999999999996
line done
line done

---------------------

input line #117
input roots: [<__main__.Root object at 0x100e83128>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.099999999999994..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea03c8>, '-', <__main__.AgrTerminal object at 0x100e83eb8>, '#', <__main__.Root object at 0x100ea0940>, '-', <__main__.NominalizerTerminal object at 0x100ea0ba8>, '-', <__main__.SemanticTerminal object at 0x100ea0b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.099999999999993..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 12.799999999999994
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 17.7
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 13.699999999999998
line done
line done

---------------------

input line #118
input roots: [<__main__.Root object at 0x100ea0208>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 18.3..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 47.00000000000025..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.60000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.399999999999986..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.70000000000001..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 18.400000000000002..already existed

create_vi: tried definite: l_5, triggers = set(), weight = 10.499999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.80000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 19.900000000000013..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.099999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_1', 'null_2', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_2', 'BALL_2', 'BALL_1', 'a_1', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9be10>, '-', <__main__.AgrTerminal object at 0x100ea0e48>, '#', <__main__.Root object at 0x100e9b9b0>, '-', <__main__.NominalizerTerminal object at 0x100e9b908>, '-', <__main__.SemanticTerminal object at 0x100e9bdd8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: unoa#BALLa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7a7f0>, '-', <__main__.AgrTerminal object at 0x100e9b470>, '#', <__main__.Root object at 0x100e860b8>, '-', <__main__.NominalizerTerminal object at 0x100e86fd0>, '-', <__main__.SemanticTerminal object at 0x100e86320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: uno#BALLa
vis_used:
Failure
line done
line done

---------------------

input line #119
input roots: [<__main__.Root object at 0x100e9b898>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 18.500000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 47.10000000000025..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.499999999999986..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.1..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.19999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.000000000000014..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.499999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 47.20000000000025..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.100000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.599999999999985..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.29999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.200000000000017..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.699999999999985..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92a20>, '-', <__main__.AgrTerminal object at 0x100e7a4a8>, '#', <__main__.Root object at 0x100e66c18>, '-', <__main__.NominalizerTerminal object at 0x100e7e668>, '-', <__main__.SemanticTerminal object at 0x100e7e9b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: unoa#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 12.499999999999993
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 18.500000000000004
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.100000000000005
line done
line done

---------------------

input line #120
input roots: [<__main__.Root object at 0x100e8c9b0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 47.30000000000025..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 18.500000000000004..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 14.09999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 47.400000000000254..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 23.200000000000067..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 14.19999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.599999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}

create_vi: made OFFSPRING: OFFSPRING_7, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made OFFSPRING: OFFSPRING_8, triggers = {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi OFFSPRING_8 	spelling out OFFSPRING: set() 		 triggering {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made OFFSPRING: OFFSPRING_9, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi OFFSPRING_9 	spelling out OFFSPRING: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1d68>, '-', <__main__.AgrTerminal object at 0x100e92e48>, '#', <__main__.Root object at 0x100e66c88>, '-', <__main__.NominalizerTerminal object at 0x100eb1f28>, '-', <__main__.SemanticTerminal object at 0x100eb1e48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: le#OFFSPRINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 16.89999999999999
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 16.400000000000002..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.199999999999992..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 47.400000000000254
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 14.19999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.099999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 13.999999999999996
line done
line done

---------------------

input line #121
input roots: [<__main__.Root object at 0x100e66978>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.199999999999994..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86320>, '-', <__main__.AgrTerminal object at 0x100e92cc0>, '#', <__main__.Root object at 0x100e9b208>, '-', <__main__.NominalizerTerminal object at 0x100e9b7f0>, '-', <__main__.SemanticTerminal object at 0x100e9b240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 47.900000000000254
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 15.29999999999999
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.599999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.10000000000001
line done
line done

---------------------

input line #122
input roots: [<__main__.Root object at 0x100e7fb00>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 47.900000000000254..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 18.600000000000005..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 14.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 48.000000000000256..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 23.300000000000068..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.699999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}

create_vi: made nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b8d0>, '-', <__main__.AgrTerminal object at 0x100e9b898>, '#', <__main__.Root object at 0x100ea0780>, '-', <__main__.NominalizerTerminal object at 0x100ea0978>, '-', <__main__.SemanticTerminal object at 0x100e9bc88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: li#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 48.000000000000256
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 14.599999999999993
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.400000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.700000000000003
line done
line done

---------------------

input line #123
input roots: [<__main__.Root object at 0x100e9b4e0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.399999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.399999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea05c0>, '-', <__main__.AgrTerminal object at 0x100ea0e48>, '#', <__main__.Root object at 0x100ea00f0>, '-', <__main__.NominalizerTerminal object at 0x100ea0c18>, '-', <__main__.SemanticTerminal object at 0x100ea0ac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: lo#FOOTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 15.3..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.599999999999993..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.099999999999993..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.59999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 47.900000000000254
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 23.300000000000068
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.499999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.299999999999997
line done
line done

---------------------

input line #124
input roots: [<__main__.Root object at 0x100ea09b0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 18.700000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 48.500000000000256..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.19999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.799999999999985..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.29999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.30000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.599999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 48.60000000000026..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.40000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.899999999999984..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.39999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.50000000000002..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.29999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 14.999999999999984..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.299999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84c50>, '-', <__main__.AgrTerminal object at 0x100e73710>, '#', <__main__.Root object at 0x100e89e10>, '-', <__main__.NominalizerTerminal object at 0x100e89da0>, '-', <__main__.SemanticTerminal object at 0x100e849b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: une#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 20.50000000000002
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.999999999999996
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 13.199999999999992
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.200000000000006
line done
line done

---------------------

input line #125
input roots: [<__main__.Root object at 0x100e84940>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 48.70000000000026..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 18.800000000000008..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 14.99999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 48.80000000000026..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 23.90000000000007..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.099999999999989..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.799999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}

create_vi: made GRANDPARENT: GRANDPARENT_7, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made GRANDPARENT: GRANDPARENT_8, triggers = {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi GRANDPARENT_8 	spelling out GRANDPARENT: set() 		 triggering {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made GRANDPARENT: GRANDPARENT_9, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi GRANDPARENT_9 	spelling out GRANDPARENT: set() 		 triggering {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e784e0>, '-', <__main__.AgrTerminal object at 0x100e842b0>, '#', <__main__.Root object at 0x100e83208>, '-', <__main__.NominalizerTerminal object at 0x100e83550>, '-', <__main__.SemanticTerminal object at 0x100e83128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: li#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 48.80000000000026
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 14.499999999999993
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.6
line done
line done

---------------------

input line #126
input roots: [<__main__.Root object at 0x100e75748>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 48.80000000000026..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 18.90000000000001..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 48.90000000000026..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 24.00000000000007..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.399999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.00000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.100000000000264..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.699999999999987..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.699999999999982..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 13.99999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.899999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'TOWER_1'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'i_1', 'TOWER_1', 'null_4', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1d30>, '-', <__main__.AgrTerminal object at 0x100e78860>, '#', <__main__.Root object at 0x100eb13c8>, '-', <__main__.NominalizerTerminal object at 0x100eb1128>, '-', <__main__.SemanticTerminal object at 0x100eb14e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: lie#TOWERi
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd198>, '-', <__main__.AgrTerminal object at 0x100ea7828>, '#', <__main__.Root object at 0x100e45d30>, '-', <__main__.NominalizerTerminal object at 0x100ebd358>, '-', <__main__.SemanticTerminal object at 0x100ebd278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: li#TOWERi
vis_used:
Failure
line done
line done

---------------------

input line #127
input roots: [<__main__.Root object at 0x100e9bdd8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.299999999999994..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1860>, '-', <__main__.AgrTerminal object at 0x100e9bb00>, '#', <__main__.Root object at 0x100eb1ef0>, '-', <__main__.NominalizerTerminal object at 0x100eb1eb8>, '-', <__main__.SemanticTerminal object at 0x100eb12e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#MILKCOW-a
full_pronunciation: lo#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 13.399999999999993
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 24.00000000000007
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.200000000000006
line done
line done

---------------------

input line #128
input roots: [<__main__.Root object at 0x100e9b9e8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 19.00000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.200000000000266..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.39999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 15.099999999999984..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.49999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.50000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.799999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.30000000000027..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.600000000000023..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 15.199999999999983..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.599999999999989..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.700000000000024..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.49999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 15.299999999999983..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.399999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1a20>, '-', <__main__.AgrTerminal object at 0x100eb1390>, '#', <__main__.Root object at 0x100eb1438>, '-', <__main__.NominalizerTerminal object at 0x100eb17f0>, '-', <__main__.SemanticTerminal object at 0x100eb18d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: une#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 13.49999999999999
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.899999999999997
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.200000000000006
line done
line done

---------------------

input line #129
input roots: [<__main__.Root object at 0x100eb19b0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.399999999999993..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7240>, '-', <__main__.AgrTerminal object at 0x100eb1d68>, '#', <__main__.Root object at 0x100ea7ac8>, '-', <__main__.NominalizerTerminal object at 0x100ea7b70>, '-', <__main__.SemanticTerminal object at 0x100ea7da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: le#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 49.30000000000027
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 11.799999999999997
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.899999999999995
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.000000000000007
line done
line done

---------------------

input line #130
input roots: [<__main__.Root object at 0x100e9beb8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 49.30000000000027..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.100000000000012..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.199999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.40000000000027..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 24.00000000000007..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.299999999999988..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 11.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '-', <__main__.AgrTerminal object at 0x100ea7eb8>, '#', <__main__.Root object at 0x100ea0470>, '-', <__main__.NominalizerTerminal object at 0x100ea04a8>, '-', <__main__.SemanticTerminal object at 0x100e44400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#GRANDPARENT-e
full_pronunciation: lia#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 11.499999999999995
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 15.599999999999989
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.2
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.6
line done
line done

---------------------

input line #131
input roots: [<__main__.Root object at 0x100e44550>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 49.50000000000027..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.200000000000014..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.399999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.60000000000027..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 24.100000000000072..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.499999999999988..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.099999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0cc0>, '-', <__main__.AgrTerminal object at 0x100ea7c88>, '#', <__main__.Root object at 0x100ea0748>, '-', <__main__.NominalizerTerminal object at 0x100ea0b00>, '-', <__main__.SemanticTerminal object at 0x100ea06d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: le#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 49.60000000000027
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.499999999999993
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.099999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.5
line done
line done

---------------------

input line #132
input roots: [<__main__.Root object at 0x100ea0f28>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e65208>]

create_vi: tried Agr: o_2, triggers = set(), weight = 24.200000000000074..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.60000000000027..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.800000000000026..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.499999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e72390>, '-', <__main__.AgrTerminal object at 0x100ea0630>, '#', <__main__.Root object at 0x100e6bda0>, '-', <__main__.NominalizerTerminal object at 0x100e6bb00>, '-', <__main__.SemanticTerminal object at 0x100e723c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKa
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ba90>, '-', <__main__.AgrTerminal object at 0x100e6bc50>, '#', <__main__.Root object at 0x100e735f8>, '-', <__main__.NominalizerTerminal object at 0x100e73ac8>, '-', <__main__.SemanticTerminal object at 0x100e739b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: uno#BOOKo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.699999999999992..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.199999999999992..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.69999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 15.299999999999983
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 24.200000000000074
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 15.3
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.000000000000007
line done
line done

---------------------

input line #133
input roots: [<__main__.Root object at 0x100e73a20>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 24.800000000000075..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.70000000000027..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.499999999999988..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.599999999999987..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.599999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6edd8>, '-', <__main__.AgrTerminal object at 0x100e78390>, '#', <__main__.Root object at 0x100e66c88>, '-', <__main__.NominalizerTerminal object at 0x100e662b0>, '-', <__main__.SemanticTerminal object at 0x100e66668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#OFFSPRING-o
full_pronunciation: una#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 20.800000000000026
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.200000000000014
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.799999999999994
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.60000000000001
line done
line done

---------------------

input line #134
input roots: [<__main__.Root object at 0x100e65940>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.399999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.499999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b38>, '-', <__main__.AgrTerminal object at 0x100e6ec88>, '#', <__main__.Root object at 0x100ea05c0>, '-', <__main__.NominalizerTerminal object at 0x100ea0ac8>, '-', <__main__.SemanticTerminal object at 0x100ea0a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: lo#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 49.70000000000027
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 17.500000000000007
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.699999999999992
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.200000000000006
line done
line done

---------------------

input line #135
input roots: [<__main__.Root object at 0x100ea0fd0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 19.200000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.70000000000027..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.49999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 15.899999999999983..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.599999999999989..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.800000000000026..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.899999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 49.800000000000274..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 20.900000000000027..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 15.999999999999982..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.699999999999989..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.00000000000003..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.599999999999989..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.099999999999984..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.499999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83b38>, '-', <__main__.AgrTerminal object at 0x100ea0e48>, '#', <__main__.Root object at 0x100ea7e48>, '-', <__main__.NominalizerTerminal object at 0x100ea7b38>, '-', <__main__.SemanticTerminal object at 0x100e612e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#KEY-e
full_pronunciation: una#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 21.00000000000003
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.200000000000014
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.3
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.60000000000001
line done
line done

---------------------

input line #136
input roots: [<__main__.Root object at 0x100e83a90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 49.900000000000276..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.499999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 24.900000000000077..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.00000000000028..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 25.000000000000078..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.699999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.10000000000028..already existed

create_vi: tried definite: l_3, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.799999999999988..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 25.10000000000008..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.00000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.20000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.30000000000028..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 25.20000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.40000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 50.500000000000284..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.599999999999987..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 25.300000000000082..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.599999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_1', 'null_3', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'o_1', 'null_1', 'null_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea72b0>, '-', <__main__.AgrTerminal object at 0x100e83128>, '#', <__main__.Root object at 0x100eb1b38>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e5a710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKo
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb19b0>, '-', <__main__.AgrTerminal object at 0x100ea7208>, '#', <__main__.Root object at 0x100eb1390>, '-', <__main__.NominalizerTerminal object at 0x100eb1a20>, '-', <__main__.SemanticTerminal object at 0x100eb17f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.799999999999992..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.299999999999992..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.79999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 50.500000000000284
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 25.300000000000082
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 15.8
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.60000000000001
line done
line done

---------------------

input line #137
input roots: [<__main__.Root object at 0x100eb1438>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 51.100000000000286..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.200000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 51.20000000000029..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 25.900000000000084..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.799999999999981..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 14.099999999999989..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 51.30000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 51.40000000000029..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 15.999999999999986..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 17.900000000000013..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.89999999999998..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 15.99999999999998..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.799999999999997..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 14.199999999999989..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.79999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 26.000000000000085..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 51.50000000000029..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.89999999999999..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.499999999999995..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7a7f0>, '-', <__main__.AgrTerminal object at 0x100eb1b70>, '#', <__main__.Root object at 0x100e9bd68>, '-', <__main__.NominalizerTerminal object at 0x100e9beb8>, '-', <__main__.SemanticTerminal object at 0x100e49278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: li#CLOWNi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 19.00000000000002
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 16.400000000000002..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.899999999999991..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.399999999999991..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.89999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 51.50000000000029
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 14.199999999999989
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.59999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 16.5
line done
line done

---------------------

input line #138
input roots: [<__main__.Root object at 0x100eb14e0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 52.10000000000029..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.300000000000015..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.599999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.200000000000294..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 26.100000000000087..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.699999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.300000000000296..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.4000000000003..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.799999999999992..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.09999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 14.799999999999988..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.199999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'BALL_1', 'e_3'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'BALL_3', 'null_14', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bbe0>, '-', <__main__.AgrTerminal object at 0x100eb1d30>, '#', <__main__.Root object at 0x100e92940>, '-', <__main__.NominalizerTerminal object at 0x100e45d30>, '-', <__main__.SemanticTerminal object at 0x100e9b908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#BALL-e
full_pronunciation: li#BALLe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92f98>, '-', <__main__.AgrTerminal object at 0x100e9bb70>, '#', <__main__.Root object at 0x100e9b4e0>, '-', <__main__.NominalizerTerminal object at 0x100e9be10>, '-', <__main__.SemanticTerminal object at 0x100e92a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_15: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: le#BALLi
vis_used:
Failure
line done
line done

---------------------

input line #139
input roots: [<__main__.Root object at 0x100e9ba58>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 19.400000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.5000000000003..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.699999999999989..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.199999999999985..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.899999999999988..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.10000000000003..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.6000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.20000000000003..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.299999999999986..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 15.999999999999988..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.300000000000033..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.799999999999988..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.599999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb13c8>, '-', <__main__.AgrTerminal object at 0x100e9bc88>, '#', <__main__.Root object at 0x100eb17b8>, '-', <__main__.NominalizerTerminal object at 0x100eb1dd8>, '-', <__main__.SemanticTerminal object at 0x100eb1550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: unaa#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 11.599999999999994
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 16.19999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.09999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.10000000000001
line done
line done

---------------------

input line #140
input roots: [<__main__.Root object at 0x100e49390>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 52.7000000000003..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.500000000000018..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.899999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.8000000000003..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 26.200000000000088..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 12.999999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 52.900000000000304..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 53.000000000000306..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 13.09999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.19999999999998..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 14.899999999999988..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.299999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'BALL_1', 'e_3'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'BALL_3', 'null_14', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1d68>, '-', <__main__.AgrTerminal object at 0x100eb1588>, '#', <__main__.Root object at 0x100e61eb8>, '-', <__main__.NominalizerTerminal object at 0x100e5a710>, '-', <__main__.SemanticTerminal object at 0x100eb1518>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#BALL-e
full_pronunciation: le#BALLe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed

create_vi: made nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_20
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 53.000000000000306
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 13.09999999999999
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 14.999999999999995
line done
line done

---------------------

input line #141
input roots: [<__main__.Root object at 0x100eb1b38>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 53.60000000000031..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.60000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 18.000000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 53.70000000000031..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 26.30000000000009..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 18.100000000000016..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.299999999999983..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 14.999999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 53.80000000000031..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 53.90000000000031..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 18.200000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.399999999999984..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.499999999999986..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.899999999999997..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 15.099999999999987..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 13.99999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 26.40000000000009..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.599999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 54.00000000000031..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.099999999999989..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.599999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7630>, '-', <__main__.AgrTerminal object at 0x100eb17f0>, '#', <__main__.Root object at 0x100e83128>, '-', <__main__.NominalizerTerminal object at 0x100e83b70>, '-', <__main__.SemanticTerminal object at 0x100ea7c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: li#CLOWNi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 19.300000000000026
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 16.500000000000004..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 12.999999999999991..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.499999999999991..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 13.99999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 54.00000000000031
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 18.200000000000017
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.99999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 17.1
line done
line done

---------------------

input line #142
input roots: [<__main__.Root object at 0x100ea7be0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 19.70000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 54.600000000000314..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.899999999999988..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.400000000000034..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 54.700000000000315..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.500000000000036..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.59999999999999..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.600000000000037..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 13.999999999999988..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.599999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea07b8>, '-', <__main__.AgrTerminal object at 0x100ea7278>, '#', <__main__.Root object at 0x100ea0cc0>, '-', <__main__.NominalizerTerminal object at 0x100ea0160>, '-', <__main__.SemanticTerminal object at 0x100ea09b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#PIBLING-a
full_pronunciation: una#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 21.600000000000037
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 16.39999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.49999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.899999999999997
line done
line done

---------------------

input line #143
input roots: [<__main__.Root object at 0x100ea0550>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.599999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.699999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e65940>, '-', <__main__.AgrTerminal object at 0x100ea0860>, '#', <__main__.Root object at 0x100e666d8>, '-', <__main__.NominalizerTerminal object at 0x100e66128>, '-', <__main__.SemanticTerminal object at 0x100e66d68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#PIBLING-o
full_pronunciation: lo#PIBLINGo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.09999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.59999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.099999999999989..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 54.700000000000315
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 26.40000000000009
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 16.500000000000004
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.10000000000001
line done
line done

---------------------

input line #144
input roots: [<__main__.Root object at 0x100e66908>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 27.000000000000092..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 55.30000000000032..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.799999999999986..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.899999999999986..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.699999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73ac8>, '-', <__main__.AgrTerminal object at 0x100e6ef28>, '#', <__main__.Root object at 0x100e920f0>, '-', <__main__.NominalizerTerminal object at 0x100e92dd8>, '-', <__main__.SemanticTerminal object at 0x100e92cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: unao#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 11.599999999999994
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 27.000000000000092
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_8
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 17.000000000000004
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.300000000000008
line done
line done

---------------------

input line #145
input roots: [<__main__.Root object at 0x100e7bc50>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.699999999999992..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 17.900000000000013..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.799999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92908>, '-', <__main__.AgrTerminal object at 0x100e92358>, '#', <__main__.Root object at 0x100e73198>, '-', <__main__.NominalizerTerminal object at 0x100e73860>, '-', <__main__.SemanticTerminal object at 0x100e92ac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: lo#GRANDPARENTo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.19999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.69999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.199999999999989..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 55.30000000000032
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 26.90000000000009
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 16.900000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.80000000000001
line done
line done

---------------------

input line #146
input roots: [<__main__.Root object at 0x100e92550>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 27.500000000000092..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 55.90000000000032..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 14.999999999999986..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.099999999999985..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.799999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e566a0>, '-', <__main__.AgrTerminal object at 0x100e6edd8>, '#', <__main__.Root object at 0x100ea06d8>, '-', <__main__.NominalizerTerminal object at 0x100ea0208>, '-', <__main__.SemanticTerminal object at 0x100e56ef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: una#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 15.099999999999985
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.70000000000002
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_8
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 17.400000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.200000000000006
line done
line done

---------------------

input line #147
input roots: [<__main__.Root object at 0x100e66668>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.499999999999993..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0fd0>, '-', <__main__.AgrTerminal object at 0x100e669e8>, '#', <__main__.Root object at 0x100ea0e48>, '-', <__main__.NominalizerTerminal object at 0x100ea0470>, '-', <__main__.SemanticTerminal object at 0x100ea0278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#KEY-e
full_pronunciation: loa#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 12.799999999999992
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 16.19999999999999
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.399999999999988
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.899999999999997
line done
line done

---------------------

input line #148
input roots: [<__main__.Root object at 0x100ea0eb8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.599999999999993..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7e48>, '-', <__main__.AgrTerminal object at 0x100ea0c50>, '#', <__main__.Root object at 0x100ea79e8>, '-', <__main__.NominalizerTerminal object at 0x100ea7160>, '-', <__main__.SemanticTerminal object at 0x100ea7c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#MILKCOW-a
full_pronunciation: lo#MILKCOWo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 55.90000000000032
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 27.500000000000092
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.999999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 21.400000000000013
line done
line done

---------------------

input line #149
input roots: [<__main__.Root object at 0x100e7bda0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.699999999999992..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e45d30>, '-', <__main__.AgrTerminal object at 0x100e7a4a8>, '#', <__main__.Root object at 0x100eb1b38>, '-', <__main__.NominalizerTerminal object at 0x100eb1cf8>, '-', <__main__.SemanticTerminal object at 0x100eb1da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: lao#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 12.699999999999992
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 27.40000000000009
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_6
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.899999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 21.30000000000001
line done
line done

---------------------

input line #150
input roots: [<__main__.Root object at 0x100ea77f0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 55.90000000000032..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.70000000000002..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.699999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 56.00000000000032..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 27.40000000000009..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.799999999999986..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.399999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb17b8>, '-', <__main__.AgrTerminal object at 0x100ea7208>, '#', <__main__.Root object at 0x100eb16a0>, '-', <__main__.NominalizerTerminal object at 0x100eb1b70>, '-', <__main__.SemanticTerminal object at 0x100eb1550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 56.00000000000032
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 13.59999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.799999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #151
input roots: [<__main__.Root object at 0x100eb13c8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 56.00000000000032..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.800000000000022..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 18.80000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 56.10000000000032..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 27.500000000000092..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 18.90000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.599999999999987..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 15.199999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 56.20000000000032..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 56.300000000000324..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.00000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.69999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.79999999999999..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 11.999999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 15.299999999999986..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.199999999999989..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 27.600000000000094..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.699999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 56.400000000000325..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.299999999999988..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.699999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}

create_vi: made CASTLE: CASTLE_3, triggers = {('i', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?

create_vi: made CASTLE: CASTLE_4, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}, weight = 10.0
     -> created a new vi CASTLE_4 	spelling out CASTLE: set() 		 triggering {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b908>, '-', <__main__.AgrTerminal object at 0x100eb1ac8>, '#', <__main__.Root object at 0x100e7e780>, '-', <__main__.NominalizerTerminal object at 0x100e7eb00>, '-', <__main__.SemanticTerminal object at 0x100e9b4e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 20.20000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.29999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.79999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.299999999999988..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 56.400000000000325
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 15.299999999999986
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 17.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #152
input roots: [<__main__.Root object at 0x100e9ba20>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 57.00000000000033..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 19.900000000000023..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.799999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 57.10000000000033..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 27.700000000000095..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.899999999999991..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 57.20000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 57.30000000000033..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 14.999999999999991..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.799999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'i_1', 'null_1', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_4', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e492e8>, '-', <__main__.AgrTerminal object at 0x100e7e1d0>, '#', <__main__.Root object at 0x100e9b908>, '-', <__main__.NominalizerTerminal object at 0x100e9b4e0>, '-', <__main__.SemanticTerminal object at 0x100e9b3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_18: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: lie#BOOKe
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b550>, '-', <__main__.AgrTerminal object at 0x100e7e940>, '#', <__main__.Root object at 0x100eb1668>, '-', <__main__.NominalizerTerminal object at 0x100e45d30>, '-', <__main__.SemanticTerminal object at 0x100e9b748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'MOUSE'}
    selection_strength: True
    weight: 20.40000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.39999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.89999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.399999999999988..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 57.30000000000033
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 15.799999999999986
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 17.8
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 18.200000000000003
line done
now adding Root: BOOK with -feminine to gender_dict
line done

---------------------

input line #153
input roots: [<__main__.Root object at 0x100e9b208>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 27.800000000000097..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 57.90000000000033..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.099999999999985..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.199999999999985..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.899999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb19b0>, '-', <__main__.AgrTerminal object at 0x100e9b518>, '#', <__main__.Root object at 0x100eb1b38>, '-', <__main__.NominalizerTerminal object at 0x100eb1518>, '-', <__main__.SemanticTerminal object at 0x100eb1048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: uni#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 21.500000000000036
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 16.299999999999986
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.4
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.799999999999997
line done
line done

---------------------

input line #154
input roots: [<__main__.Root object at 0x100eb1748>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 20.000000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.000000000000334..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.099999999999987..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.799999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.000000000000014..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.500000000000036..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.100000000000335..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.600000000000037..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.899999999999995..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.70000000000004..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.199999999999987..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 16.999999999999996..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.599999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea70f0>, '-', <__main__.AgrTerminal object at 0x100eb1a90>, '#', <__main__.Root object at 0x100ea7160>, '-', <__main__.NominalizerTerminal object at 0x100ea79e8>, '-', <__main__.SemanticTerminal object at 0x100ea7cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 14.199999999999987
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 16.599999999999994
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.799999999999997
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.699999999999998
line done
line done

---------------------

input line #155
input roots: [<__main__.Root object at 0x100ea7240>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 58.20000000000034..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 20.100000000000026..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.100000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.30000000000034..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 27.900000000000098..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.200000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.89999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.299999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.40000000000034..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.50000000000034..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.300000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 16.999999999999993..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.099999999999994..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.099999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.399999999999988..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.0000000000001..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.09999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 58.60000000000034..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.499999999999988..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.899999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e449b0>, '-', <__main__.AgrTerminal object at 0x100ea7358>, '#', <__main__.Root object at 0x100ea07b8>, '-', <__main__.NominalizerTerminal object at 0x100ea0c50>, '-', <__main__.SemanticTerminal object at 0x100ea0668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.49999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.99999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.499999999999988..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 58.60000000000034
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 15.09999999999999
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 18.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 18.800000000000004
line done
line done

---------------------

input line #156
input roots: [<__main__.Root object at 0x100e7bda0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.799999999999992..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.100000000000016..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.799999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0860>, '-', <__main__.AgrTerminal object at 0x100ea0b70>, '#', <__main__.Root object at 0x100e56860>, '-', <__main__.NominalizerTerminal object at 0x100e56e10>, '-', <__main__.SemanticTerminal object at 0x100ea06d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: loo#CLOWNo
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 12.799999999999992
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 28.0000000000001
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 18.8
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 21.400000000000013
line done
line done

---------------------

input line #157
input roots: [<__main__.Root object at 0x100ea0208>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 20.200000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 59.200000000000344..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.199999999999987..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.099999999999998..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.200000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.80000000000004..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 59.300000000000345..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 21.90000000000004..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.2..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.000000000000043..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.299999999999986..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.3..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.699999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78390>, '-', <__main__.AgrTerminal object at 0x100ea0358>, '#', <__main__.Root object at 0x100e73ac8>, '-', <__main__.NominalizerTerminal object at 0x100e723c8>, '-', <__main__.SemanticTerminal object at 0x100e72390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.199999999999992..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.1..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 22.000000000000043
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 20.200000000000028
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 15.7
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 18.50000000000001
line done
line done

---------------------

input line #158
input roots: [<__main__.Root object at 0x100e72160>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.899999999999991..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.30000000000002..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.799999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84940>, '-', <__main__.AgrTerminal object at 0x100e6bc50>, '#', <__main__.Root object at 0x100e84a90>, '-', <__main__.NominalizerTerminal object at 0x100e84160>, '-', <__main__.SemanticTerminal object at 0x100e84b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 21.00000000000005
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 18.8..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.599999999999989..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.099999999999989..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.599999999999987..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 59.300000000000345
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 18.30000000000002
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.299999999999986
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 21.400000000000013
line done
line done

---------------------

input line #159
input roots: [<__main__.Root object at 0x100e784e0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.90000000000002..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.899999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e72198>, '-', <__main__.AgrTerminal object at 0x100e84668>, '#', <__main__.Root object at 0x100e6bb00>, '-', <__main__.NominalizerTerminal object at 0x100e5e978>, '-', <__main__.SemanticTerminal object at 0x100e785c0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CHILD-o
full_pronunciation: li#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 59.800000000000345
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 16.399999999999988
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.799999999999986
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 19.00000000000001
line done
line done

---------------------

input line #160
input roots: [<__main__.Root object at 0x100e92668>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.699999999999992..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0320>, '-', <__main__.AgrTerminal object at 0x100e72390>, '#', <__main__.Root object at 0x100ea0518>, '-', <__main__.NominalizerTerminal object at 0x100ea09e8>, '-', <__main__.SemanticTerminal object at 0x100ea0780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 19.200000000000024
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 59.700000000000344
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 16.499999999999993
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 11.099999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 19.00000000000001
line done
line done

---------------------

input line #161
input roots: [<__main__.Root object at 0x100e5db70>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 28.0000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 60.300000000000345..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.299999999999985..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.399999999999984..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.999999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e445c0>, '-', <__main__.AgrTerminal object at 0x100ea0be0>, '#', <__main__.Root object at 0x100e83128>, '-', <__main__.NominalizerTerminal object at 0x100e44390>, '-', <__main__.SemanticTerminal object at 0x100e44400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: unoo#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 12.999999999999991
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 28.0000000000001
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 18.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.699999999999998
line done
line done

---------------------

input line #162
input roots: [<__main__.Root object at 0x100e92940>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 60.40000000000035..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 20.80000000000003..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.400000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 60.50000000000035..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.0000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.50000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.199999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 60.60000000000035..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 60.70000000000035..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.60000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.299999999999997..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.4..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.199999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.599999999999987..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.1000000000001..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.69999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 60.80000000000035..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.699999999999987..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7978>, '-', <__main__.AgrTerminal object at 0x100e73a90>, '#', <__main__.Root object at 0x100ea7e10>, '-', <__main__.NominalizerTerminal object at 0x100ea7a58>, '-', <__main__.SemanticTerminal object at 0x100ea7048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: lio#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 11.999999999999993
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 18.90000000000002
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.699999999999985
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 15.599999999999994
line done
line done

---------------------

input line #163
input roots: [<__main__.Root object at 0x100ea7160>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 60.900000000000354..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 20.90000000000003..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.70000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 61.000000000000355..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.200000000000102..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.800000000000033..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.5..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.59999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 61.10000000000036..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 61.20000000000036..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 16.9..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 19.900000000000034..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.6..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.700000000000003..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.299999999999995..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.799999999999986..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.300000000000104..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 61.30000000000036..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.899999999999986..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 11.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1da0>, '-', <__main__.AgrTerminal object at 0x100ea7d30>, '#', <__main__.Root object at 0x100eb1048>, '-', <__main__.NominalizerTerminal object at 0x100eb1518>, '-', <__main__.SemanticTerminal object at 0x100eb1748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#OFFSPRING-i
full_pronunciation: li#OFFSPRINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 21.60000000000006
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: made nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_21
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_22
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 61.30000000000036
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 16.699999999999992
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 19.500000000000007
line done
line done

---------------------

input line #164
input roots: [<__main__.Root object at 0x100eb19b0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 28.400000000000105..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 61.90000000000036..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.499999999999984..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.599999999999984..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 12.999999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bc88>, '-', <__main__.AgrTerminal object at 0x100eb1eb8>, '#', <__main__.Root object at 0x100e9b550>, '-', <__main__.NominalizerTerminal object at 0x100e9b748>, '-', <__main__.SemanticTerminal object at 0x100e9bda0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: una#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 15.599999999999984
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 20.90000000000003
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.599999999999984
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 19.50000000000001
line done
line done

---------------------

input line #165
input roots: [<__main__.Root object at 0x100eb1908>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 20.90000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.00000000000036..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.399999999999986..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.400000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 18.90000000000002..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.099999999999994..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.600000000000044..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.0..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.100000000000364..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.700000000000045..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.500000000000004..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.199999999999996..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.800000000000047..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.499999999999986..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.600000000000005..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.799999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89a20>, '-', <__main__.AgrTerminal object at 0x100e492e8>, '#', <__main__.Root object at 0x100e89cc0>, '-', <__main__.NominalizerTerminal object at 0x100e89b38>, '-', <__main__.SemanticTerminal object at 0x100e89240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: uno#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 22.800000000000047
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 28.400000000000105
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.499999999999982
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.100000000000016
line done
line done

---------------------

input line #166
input roots: [<__main__.Root object at 0x100e7e710>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 62.200000000000365..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.000000000000032..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.899999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.30000000000037..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.400000000000105..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 15.999999999999986..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.499999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1400>, '-', <__main__.AgrTerminal object at 0x100e794a8>, '#', <__main__.Root object at 0x100eb1e80>, '-', <__main__.NominalizerTerminal object at 0x100eb16a0>, '-', <__main__.SemanticTerminal object at 0x100eb11d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#OFFSPRING-e
full_pronunciation: li#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 62.30000000000037
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 15.79999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.799999999999997
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.000000000000007
line done
line done

---------------------

input line #167
input roots: [<__main__.Root object at 0x100eb1550>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 62.30000000000037..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.100000000000033..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.000000000000036..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.40000000000037..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.500000000000107..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.100000000000037..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.800000000000004..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 17.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.50000000000037..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.60000000000037..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.1..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.20000000000004..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 17.900000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.000000000000007..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.399999999999995..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 17.399999999999995..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 14.999999999999986..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.600000000000108..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.79999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 62.70000000000037..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.099999999999985..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.099999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7080>, '-', <__main__.AgrTerminal object at 0x100eb18d0>, '#', <__main__.Root object at 0x100ea7a20>, '-', <__main__.NominalizerTerminal object at 0x100ea72b0>, '-', <__main__.SemanticTerminal object at 0x100ea7b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 22.000000000000064
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.699999999999989..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.199999999999989..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.699999999999987..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.1..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 62.70000000000037
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 17.399999999999995
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 18.7
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.000000000000007
line done
line done

---------------------

input line #168
input roots: [<__main__.Root object at 0x100eb1cf8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 63.300000000000374..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.200000000000035..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.30000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 63.400000000000375..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.70000000000011..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.40000000000004..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.10000000000001..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 17.999999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 63.50000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 63.60000000000038..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.500000000000043..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.20000000000001..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.30000000000001..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.499999999999995..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.099999999999998..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.199999999999985..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.80000000000011..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.89999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 63.70000000000038..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.299999999999985..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.199999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e833c8>, '-', <__main__.AgrTerminal object at 0x100ea7ef0>, '#', <__main__.Root object at 0x100e449b0>, '-', <__main__.NominalizerTerminal object at 0x100e83128>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: lii#BOOKi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 12.199999999999992
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 20.500000000000043
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.39999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.60000000000001
line done
line done

---------------------

input line #169
input roots: [<__main__.Root object at 0x100e83e48>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 63.80000000000038..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.300000000000036..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 63.90000000000038..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 28.900000000000112..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.59999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0fd0>, '-', <__main__.AgrTerminal object at 0x100e83208>, '#', <__main__.Root object at 0x100ea0438>, '-', <__main__.NominalizerTerminal object at 0x100ea0978>, '-', <__main__.SemanticTerminal object at 0x100ea0c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#GRANDPARENT-e
full_pronunciation: le#GRANDPARENTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.299999999999992..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.699999999999996..already existed

create_vi: made nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_23
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 63.90000000000038
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 13.499999999999991
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 13.299999999999992
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 15.699999999999994
line done
line done

---------------------

input line #170
input roots: [<__main__.Root object at 0x100ea0ef0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 64.50000000000037..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.400000000000038..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.500000000000043..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 64.60000000000036..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 29.000000000000114..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.600000000000044..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.400000000000013..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.2..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 64.70000000000036..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 64.80000000000035..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.700000000000045..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.500000000000014..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.600000000000016..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.599999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.3..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.399999999999984..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 29.100000000000115..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.99999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 64.90000000000035..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.499999999999984..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.199999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6eeb8>, '-', <__main__.AgrTerminal object at 0x100ea0710>, '#', <__main__.Root object at 0x100e78390>, '-', <__main__.NominalizerTerminal object at 0x100e6bb00>, '-', <__main__.SemanticTerminal object at 0x100e65940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 64.90000000000035
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 15.99999999999999
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.29999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 16.199999999999996
line done
line done

---------------------

input line #171
input roots: [<__main__.Root object at 0x100e566a0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 29.200000000000117..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 64.90000000000035..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.599999999999984..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.699999999999983..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.09999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75f28>, '-', <__main__.AgrTerminal object at 0x100e92eb8>, '#', <__main__.Root object at 0x100e849b0>, '-', <__main__.NominalizerTerminal object at 0x100e84668>, '-', <__main__.SemanticTerminal object at 0x100e840f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: uno#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 22.700000000000045
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 29.200000000000117
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 19.50000000000001
line done
line done

---------------------

input line #172
input roots: [<__main__.Root object at 0x100e92860>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 65.00000000000034..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.50000000000004..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.10000000000034..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 29.200000000000117..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84940>, '-', <__main__.AgrTerminal object at 0x100e842b0>, '#', <__main__.Root object at 0x100e755f8>, '-', <__main__.NominalizerTerminal object at 0x100e75940>, '-', <__main__.SemanticTerminal object at 0x100e84cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: li#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 65.10000000000034
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 15.89999999999999
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.199999999999978
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.60000000000001
line done
line done

---------------------

input line #173
input roots: [<__main__.Root object at 0x100e84f28>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.799999999999992..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6eeb8>, '-', <__main__.AgrTerminal object at 0x100e72198>, '#', <__main__.Root object at 0x100e66d68>, '-', <__main__.NominalizerTerminal object at 0x100e66128>, '-', <__main__.SemanticTerminal object at 0x100e7fd30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 65.00000000000034
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 17.300000000000004
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.2
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.100000000000016
line done
line done

---------------------

input line #174
input roots: [<__main__.Root object at 0x100e785c0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 21.60000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.00000000000034..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.599999999999985..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.700000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.00000000000002..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.299999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.700000000000045..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.10000000000034..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.800000000000047..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.800000000000008..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.4..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.90000000000005..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.699999999999985..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 17.90000000000001..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.899999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0ef0>, '-', <__main__.AgrTerminal object at 0x100e6ed68>, '#', <__main__.Root object at 0x100ea0940>, '-', <__main__.NominalizerTerminal object at 0x100ea0fd0>, '-', <__main__.SemanticTerminal object at 0x100ea0978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#CHILD-a
full_pronunciation: une#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 22.90000000000005
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 12.599999999999994
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.099999999999977
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.599999999999998
line done
line done

---------------------

input line #175
input roots: [<__main__.Root object at 0x100ea0438>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 21.700000000000042..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.20000000000033..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.799999999999985..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.00000000000001..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.100000000000023..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.5..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 22.90000000000005..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.30000000000032..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.00000000000005..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.100000000000012..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 17.6..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.10000000000005..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.899999999999984..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.200000000000014..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 11.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e833c8>, '-', <__main__.AgrTerminal object at 0x100ea0588>, '#', <__main__.Root object at 0x100ea7e10>, '-', <__main__.NominalizerTerminal object at 0x100ea7a58>, '-', <__main__.SemanticTerminal object at 0x100e838d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 23.10000000000005
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 17.6
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.999999999999975
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.499999999999998
line done
line done

---------------------

input line #176
input roots: [<__main__.Root object at 0x100e83da0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 65.40000000000032..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.09999999999999..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 21.800000000000043..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 65.50000000000031..already existed

create_vi: tried definite: la_1, triggers = set(), weight = 12.899999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_1', 'null_12'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_1', 'null_12'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'TOWER_3', 'TOWER_1', 'e_5', 'null_1'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a7b8>, '-', <__main__.AgrTerminal object at 0x100ea7518>, '#', <__main__.Root object at 0x100e49390>, '-', <__main__.NominalizerTerminal object at 0x100e61eb8>, '-', <__main__.SemanticTerminal object at 0x100e5a6a0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'KEY'}
    selection_strength: True
    weight: 20.20000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 65.50000000000031
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 17.5
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.3
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 14.499999999999998
line done
now adding Root: TOWER with +feminine to gender_dict
line done

---------------------

input line #177
input roots: [<__main__.Root object at 0x100e837f0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 21.900000000000045..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 66.1000000000003..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 14.999999999999984..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.300000000000015..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.200000000000024..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 18.1..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.10000000000005..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 66.2000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.200000000000053..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.400000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 18.200000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.300000000000054..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 15.099999999999984..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.500000000000018..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.099999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1048>, '-', <__main__.AgrTerminal object at 0x100ea7cf8>, '#', <__main__.Root object at 0x100eb1748>, '-', <__main__.NominalizerTerminal object at 0x100eb1cc0>, '-', <__main__.SemanticTerminal object at 0x100eb16d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#PIBLING-a
full_pronunciation: unaa#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 12.099999999999993
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 18.200000000000003
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_9
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.899999999999974
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.000000000000014
line done
line done

---------------------

input line #178
input roots: [<__main__.Root object at 0x100e9b9b0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 14.09999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.300000000000026..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 12.999999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e4a8>, '-', <__main__.AgrTerminal object at 0x100eb1438>, '#', <__main__.Root object at 0x100e8c9b0>, '-', <__main__.NominalizerTerminal object at 0x100e8c9e8>, '-', <__main__.SemanticTerminal object at 0x100e8c470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#PIBLING-o
full_pronunciation: lo#PIBLINGo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.2..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.799999999999988..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.299999999999988..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.799999999999986..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 66.2000000000003
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 29.200000000000117
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 16.799999999999972
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.000000000000014
line done
line done

---------------------

input line #179
input roots: [<__main__.Root object at 0x100eb1ac8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 22.000000000000046..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 66.8000000000003..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 15.199999999999983..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.60000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.400000000000027..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 18.200000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.400000000000055..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 66.90000000000029..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.500000000000057..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.70000000000002..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 18.300000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 23.60000000000006..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 15.299999999999983..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.800000000000022..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.099999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c9b0>, '-', <__main__.AgrTerminal object at 0x100e8c828>, '#', <__main__.Root object at 0x100e7eb00>, '-', <__main__.NominalizerTerminal object at 0x100e7e4a8>, '-', <__main__.SemanticTerminal object at 0x100e8c470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'KEY'}
    selection_strength: True
    weight: 20.500000000000043
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.899999999999991..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.799999999999995..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.2..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.1..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 15.299999999999983
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 17.60000000000001
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.099999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 19.900000000000016
line done
line done

---------------------

input line #180
input roots: [<__main__.Root object at 0x100e8c668>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 12.999999999999991..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb16d8>, '-', <__main__.AgrTerminal object at 0x100eb1438>, '#', <__main__.Root object at 0x100e79748>, '-', <__main__.NominalizerTerminal object at 0x100eb1630>, '-', <__main__.SemanticTerminal object at 0x100eb18d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: la#GRANDPARENTa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'KEY'}
    selection_strength: True
    weight: 20.800000000000047
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 16.7..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.999999999999991..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.899999999999995..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 66.90000000000029
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 18.300000000000004
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.299999999999972
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 20.500000000000018
line done
line done

---------------------

input line #181
input roots: [<__main__.Root object at 0x100eb1390>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 67.50000000000028..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.100000000000048..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.19999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 67.60000000000028..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 29.800000000000118..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.29999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 67.70000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 67.80000000000027..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 18.20000000000001..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.39999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.700000000000017..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.400000000000002..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'BALL_1', 'e_3'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'BALL_3', 'null_14', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a7b8>, '-', <__main__.AgrTerminal object at 0x100eb1240>, '#', <__main__.Root object at 0x100ea7d30>, '-', <__main__.NominalizerTerminal object at 0x100ea7438>, '-', <__main__.SemanticTerminal object at 0x100ea7908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#BALL-e
full_pronunciation: le#BALLi
vis_used:
Failure
line done
we are now trying with gender_trial {'-feminine'}
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7d68>, '-', <__main__.AgrTerminal object at 0x100e5a6a0>, '#', <__main__.Root object at 0x100ea7ac8>, '-', <__main__.NominalizerTerminal object at 0x100ea7240>, '-', <__main__.SemanticTerminal object at 0x100ea7630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: li#BALLe
vis_used:
Failure
line done
line done

---------------------

input line #182
input roots: [<__main__.Root object at 0x100ea7048>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 29.90000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 67.90000000000026..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.799999999999983..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.899999999999983..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.19999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0c88>, '-', <__main__.AgrTerminal object at 0x100e7bda0>, '#', <__main__.Root object at 0x100ea0908>, '-', <__main__.NominalizerTerminal object at 0x100ea07b8>, '-', <__main__.SemanticTerminal object at 0x100ea0da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: uno#FOOTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 23.60000000000006
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 29.90000000000012
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 15.099999999999998
line done
line done

---------------------

input line #183
input roots: [<__main__.Root object at 0x100e44550>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 68.00000000000026..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.20000000000005..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.10000000000025..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.50000000000012..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56ef0>, '-', <__main__.AgrTerminal object at 0x100e44240>, '#', <__main__.Root object at 0x100e669e8>, '-', <__main__.NominalizerTerminal object at 0x100e66a20>, '-', <__main__.SemanticTerminal object at 0x100e45d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: le#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 68.10000000000025
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 16.599999999999994
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.7
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.500000000000007
line done
line done

---------------------

input line #184
input roots: [<__main__.Root object at 0x100e8c9e8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 22.30000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.10000000000025..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 15.899999999999983..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 18.900000000000023..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.50000000000003..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 18.900000000000006..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.20000000000006..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 18.30000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.20000000000024..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.30000000000006..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.000000000000025..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 19.000000000000007..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.400000000000063..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 15.999999999999982..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.100000000000026..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.199999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92e80>, '-', <__main__.AgrTerminal object at 0x100e78128>, '#', <__main__.Root object at 0x100e75c50>, '-', <__main__.NominalizerTerminal object at 0x100e73a90>, '-', <__main__.SemanticTerminal object at 0x100e735f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 24.400000000000063
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 18.30000000000001
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.999999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 15.599999999999998
line done
line done

---------------------

input line #185
input roots: [<__main__.Root object at 0x100e66d68>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 68.30000000000024..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.400000000000052..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.800000000000047..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.40000000000023..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.600000000000122..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 20.90000000000005..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.80000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.500000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.50000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.60000000000022..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 18.30000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.00000000000005..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 18.90000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.00000000000002..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.599999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.600000000000005..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.599999999999984..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.700000000000124..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.89999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.70000000000022..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.699999999999983..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.299999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86c18>, '-', <__main__.AgrTerminal object at 0x100e89908>, '#', <__main__.Root object at 0x100e86400>, '-', <__main__.NominalizerTerminal object at 0x100e86eb8>, '-', <__main__.SemanticTerminal object at 0x100e86390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: le#CLOWNi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 68.70000000000022
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.39999999999999
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.2
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.500000000000007
line done
line done

---------------------

input line #186
input roots: [<__main__.Root object at 0x100e86f98>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 22.500000000000053..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.70000000000022..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.099999999999984..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.200000000000028..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.60000000000003..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 19.10000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.400000000000063..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 18.400000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.80000000000021..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.500000000000064..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.30000000000003..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 19.20000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.600000000000065..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.199999999999985..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.40000000000003..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.299999999999992..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73860>, '-', <__main__.AgrTerminal object at 0x100e86390>, '#', <__main__.Root object at 0x100e72048>, '-', <__main__.NominalizerTerminal object at 0x100e92668>, '-', <__main__.SemanticTerminal object at 0x100e92e80>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: uno#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 16.199999999999985
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 30.700000000000124
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.799999999999972
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.20000000000002
line done
line done

---------------------

input line #187
input roots: [<__main__.Root object at 0x100e73710>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 22.600000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 68.9000000000002..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.199999999999985..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.500000000000032..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.70000000000003..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 19.30000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.700000000000067..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 18.500000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 69.0000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.800000000000068..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.600000000000033..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 19.400000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 24.90000000000007..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.299999999999986..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.700000000000035..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.399999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0978>, '-', <__main__.AgrTerminal object at 0x100e735f8>, '#', <__main__.Root object at 0x100ea02b0>, '-', <__main__.NominalizerTerminal object at 0x100ea0470>, '-', <__main__.SemanticTerminal object at 0x100ea0cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#PIBLING-a
full_pronunciation: una#PIBLINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'KEY'}
    selection_strength: True
    weight: 21.400000000000055
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.09999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.999999999999995..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 24.90000000000007
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.599999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.20000000000002
line done
line done

---------------------

input line #188
input roots: [<__main__.Root object at 0x100e56a20>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.09999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0ba8>, '-', <__main__.AgrTerminal object at 0x100ea0dd8>, '#', <__main__.Root object at 0x100e83128>, '-', <__main__.NominalizerTerminal object at 0x100e83940>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'KEY'}
    selection_strength: True
    weight: 21.70000000000006
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 69.0000000000002
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 19.400000000000013
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 11.3
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 15.599999999999998
line done
line done

---------------------

input line #189
input roots: [<__main__.Root object at 0x100e75198>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.19999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7c88>, '-', <__main__.AgrTerminal object at 0x100ea0908>, '#', <__main__.Root object at 0x100ea7d30>, '-', <__main__.NominalizerTerminal object at 0x100ea7e48>, '-', <__main__.SemanticTerminal object at 0x100ea7b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 69.5000000000002
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 19.000000000000014
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 17.099999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.500000000000014
line done
line done

---------------------

input line #190
input roots: [<__main__.Root object at 0x100ea7160>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 69.5000000000002..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.700000000000056..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 69.6000000000002..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.700000000000124..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 12.99999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b9b0>, '-', <__main__.AgrTerminal object at 0x100ea7438>, '#', <__main__.Root object at 0x100eb1da0>, '-', <__main__.NominalizerTerminal object at 0x100eb17b8>, '-', <__main__.SemanticTerminal object at 0x100e794a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 69.6000000000002
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.29999999999999
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.400000000000006
line done
line done

---------------------

input line #191
input roots: [<__main__.Root object at 0x100e9b470>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 69.6000000000002..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.800000000000058..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.10000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 69.70000000000019..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.800000000000125..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.200000000000053..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.100000000000023..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.700000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 69.80000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 69.90000000000018..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.000000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.300000000000054..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.200000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.300000000000026..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 12.699999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 18.800000000000008..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.799999999999983..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 30.900000000000126..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 15.99999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 70.00000000000017..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 15.899999999999983..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.399999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1978>, '-', <__main__.AgrTerminal object at 0x100e9b6a0>, '#', <__main__.Root object at 0x100e44d68>, '-', <__main__.NominalizerTerminal object at 0x100e44240>, '-', <__main__.SemanticTerminal object at 0x100eb1550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 23.10000000000008
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.2..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.899999999999988..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.399999999999988..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.899999999999986..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.299999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.299999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 70.00000000000017
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 18.800000000000008
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 17.69999999999997
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 20.400000000000006
line done
line done

---------------------

input line #192
input roots: [<__main__.Root object at 0x100eb16a0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 31.000000000000128..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 70.60000000000016..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 15.999999999999982..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.099999999999984..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.29999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd4e0>, '-', <__main__.AgrTerminal object at 0x100e8c668>, '#', <__main__.Root object at 0x100ebd710>, '-', <__main__.NominalizerTerminal object at 0x100ebd6a0>, '-', <__main__.SemanticTerminal object at 0x100ebd5c0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: una#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 25.40000000000007
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 22.800000000000058
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 18.19999999999997
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.800000000000022
line done
line done

---------------------

input line #193
input roots: [<__main__.Root object at 0x100e79748>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 70.70000000000016..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 22.800000000000058..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.29999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 70.80000000000015..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 31.10000000000013..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.39999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 70.90000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 71.00000000000014..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.100000000000016..already existed

create_vi: tried Agr: e_1, triggers = set(), weight = 14.49999999999999..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.400000000000027..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.40000000000001..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.099999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_14', 'null_1', 'BALL_1', 'e_3'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'BALL_3', 'null_14', 'null_1', 'e_3'}
done processing input, time to test
not in the semantic core?
we are now trying with gender_trial {'+feminine'}
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1160>, '-', <__main__.AgrTerminal object at 0x100e8c4e0>, '#', <__main__.Root object at 0x100eb1748>, '-', <__main__.NominalizerTerminal object at 0x100eb1cc0>, '-', <__main__.SemanticTerminal object at 0x100eb1278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: le#BALLe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'KEY'}
    selection_strength: True
    weight: 22.100000000000065
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 16.999999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.19999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.099999999999994..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 71.00000000000014
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 12.699999999999994
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 18.09999999999997
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 16.6
line done
now adding Root: BALL with +feminine to gender_dict
line done

---------------------

input line #194
input roots: [<__main__.Root object at 0x100eb1630>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 14.19999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.800000000000033..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.09999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b550>, '-', <__main__.AgrTerminal object at 0x100eb1668>, '#', <__main__.Root object at 0x100e5a7b8>, '-', <__main__.NominalizerTerminal object at 0x100e5a3c8>, '-', <__main__.SemanticTerminal object at 0x100e61eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 23.500000000000085
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.3..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 13.999999999999988..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.499999999999988..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 14.999999999999986..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.399999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.399999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 15.899999999999983
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 31.10000000000013
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 18.59999999999997
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 22.600000000000016
line done
line done

---------------------

input line #195
input roots: [<__main__.Root object at 0x100e9bba8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 22.90000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 71.60000000000014..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.800000000000036..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 19.900000000000034..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.000000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 25.40000000000007..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.200000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 71.70000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 25.50000000000007..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 19.900000000000038..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.100000000000016..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 25.600000000000072..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.00000000000004..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.499999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7b38>, '-', <__main__.AgrTerminal object at 0x100eb1da0>, '#', <__main__.Root object at 0x100e833c8>, '-', <__main__.NominalizerTerminal object at 0x100e49278>, '-', <__main__.SemanticTerminal object at 0x100ea7a58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_20: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: uno#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 20.00000000000004
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 31.60000000000013
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_20
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 16.099999999999998
line done
line done

---------------------

input line #196
input roots: [<__main__.Root object at 0x100ea7208>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 14.29999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.000000000000036..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.19999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea06d8>, '-', <__main__.AgrTerminal object at 0x100e9bcc0>, '#', <__main__.Root object at 0x100ea03c8>, '-', <__main__.NominalizerTerminal object at 0x100ea0ef0>, '-', <__main__.SemanticTerminal object at 0x100ea0320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.400000000000002..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.099999999999987..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.599999999999987..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.099999999999985..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.499999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 14.29999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 31.500000000000128
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 19.09999999999997
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 23.200000000000017
line done
line done

---------------------

input line #197
input roots: [<__main__.Root object at 0x100ea0e48>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 71.80000000000013..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 23.00000000000006..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.400000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 71.90000000000012..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.10000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.500000000000057..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.50000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.50000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.00000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.10000000000011..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.30000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.60000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.60000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.70000000000003..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.299999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.600000000000012..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.499999999999986..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.20000000000013..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 16.09999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.2000000000001..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.599999999999987..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.499999999999991..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6edd8>, '-', <__main__.AgrTerminal object at 0x100ea0630>, '#', <__main__.Root object at 0x100e781d0>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e6ed68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: li#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 72.2000000000001
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 21.60000000000006
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.1
line done
line done

---------------------

input line #198
input roots: [<__main__.Root object at 0x100e83b70>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 32.30000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.2000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.199999999999985..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.299999999999986..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.39999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89390>, '-', <__main__.AgrTerminal object at 0x100e738d0>, '#', <__main__.Root object at 0x100e86dd8>, '-', <__main__.NominalizerTerminal object at 0x100e86a20>, '-', <__main__.SemanticTerminal object at 0x100e89b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: uno#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 25.600000000000072
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 32.30000000000013
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_5
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.800000000000022
line done
line done

---------------------

input line #199
input roots: [<__main__.Root object at 0x100e757f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 72.3000000000001..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 23.100000000000062..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.60000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.40000000000009..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.30000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.70000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.800000000000033..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.700000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.50000000000009..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.60000000000008..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.40000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.80000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 19.900000000000034..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.000000000000036..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.399999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.800000000000015..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.69999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.400000000000134..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 16.199999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 72.70000000000007..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.79999999999999..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.59999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd978>, '-', <__main__.AgrTerminal object at 0x100e75940>, '#', <__main__.Root object at 0x100ebdba8>, '-', <__main__.NominalizerTerminal object at 0x100ebdb38>, '-', <__main__.SemanticTerminal object at 0x100ebda58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.3..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.199999999999987..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.699999999999987..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.199999999999985..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 72.70000000000007
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 16.199999999999992
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.8
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 19.59999999999997
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 21.10000000000001
line done
line done

---------------------

input line #200
input roots: [<__main__.Root object at 0x100ebd940>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.29999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e920f0>, '-', <__main__.AgrTerminal object at 0x100e86b38>, '#', <__main__.Root object at 0x100e785c0>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e72390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: lo#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 73.20000000000007
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 32.400000000000134
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.09999999999997
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.800000000000022
line done
line done

---------------------

input line #201
input roots: [<__main__.Root object at 0x100e5e978>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 73.20000000000007..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 23.200000000000063..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 73.30000000000007..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.400000000000134..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 16.9..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.199999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0ba8>, '-', <__main__.AgrTerminal object at 0x100e63ba8>, '#', <__main__.Root object at 0x100ea09e8>, '-', <__main__.NominalizerTerminal object at 0x100ea0ac8>, '-', <__main__.SemanticTerminal object at 0x100ea0fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#GRANDPARENT-e
full_pronunciation: li#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 73.30000000000007
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 16.699999999999992
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 21.60000000000001
line done
line done

---------------------

input line #202
input roots: [<__main__.Root object at 0x100e56860>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.39999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e49390>, '-', <__main__.AgrTerminal object at 0x100e45d30>, '#', <__main__.Root object at 0x100e83128>, '-', <__main__.NominalizerTerminal object at 0x100e83940>, '-', <__main__.SemanticTerminal object at 0x100e83358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_5: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: lo#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+feminine', '+definite'}
    diacritic: l_5
    triggers: set()
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 32.400000000000134
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.899999999999995
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.800000000000022
line done
line done

---------------------

input line #203
input roots: [<__main__.Root object at 0x100ea04a8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.49999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7160>, '-', <__main__.AgrTerminal object at 0x100ea0dd8>, '#', <__main__.Root object at 0x100e5a6a0>, '-', <__main__.NominalizerTerminal object at 0x100ea7438>, '-', <__main__.SemanticTerminal object at 0x100ea72b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_9: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.29999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.199999999999994..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.499999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 73.20000000000007
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 23.200000000000063
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 16.799999999999994
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 21.800000000000022
line done
line done

---------------------

input line #204
input roots: [<__main__.Root object at 0x100ea72e8>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 73.80000000000007..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 23.800000000000065..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 21.900000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 73.90000000000006..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.400000000000134..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.000000000000064..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.100000000000037..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 19.900000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.00000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.10000000000005..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.50000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.100000000000065..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.20000000000004..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.30000000000004..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 20.000000000000018..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.89999999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 32.500000000000135..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.20000000000005..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.999999999999993..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1ef0>, '-', <__main__.AgrTerminal object at 0x100ea7630>, '#', <__main__.Root object at 0x100eb16d8>, '-', <__main__.NominalizerTerminal object at 0x100eb17b8>, '-', <__main__.SemanticTerminal object at 0x100eb1668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 19.400000000000002..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.299999999999986..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.799999999999986..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.299999999999985..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 74.20000000000005
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 16.699999999999992
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_5
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 19.999999999999968
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 21.60000000000001
line done
line done

---------------------

input line #205
input roots: [<__main__.Root object at 0x100e9beb8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.599999999999989..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e449b0>, '-', <__main__.AgrTerminal object at 0x100eb1588>, '#', <__main__.Root object at 0x100e8c668>, '-', <__main__.NominalizerTerminal object at 0x100e8cb00>, '-', <__main__.SemanticTerminal object at 0x100e7e710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#MILKCOW-a
full_pronunciation: le#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 74.70000000000005
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 13.499999999999993
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.499999999999968
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 22.400000000000023
line done
line done

---------------------

input line #206
input roots: [<__main__.Root object at 0x100e9b470>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.100000000000037..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.29999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebddd8>, '-', <__main__.AgrTerminal object at 0x100e442b0>, '#', <__main__.Root object at 0x100ecc048>, '-', <__main__.NominalizerTerminal object at 0x100ebdf98>, '-', <__main__.SemanticTerminal object at 0x100ebdeb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 74.60000000000005
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 23.800000000000065
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.399999999999967
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 23.90000000000002
line done
line done

---------------------

input line #207
input roots: [<__main__.Root object at 0x100e9b780>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 32.600000000000136..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.60000000000005..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.399999999999988..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.49999999999999..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.49999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7438>, '-', <__main__.AgrTerminal object at 0x100e61eb8>, '#', <__main__.Root object at 0x100ea7cf8>, '-', <__main__.NominalizerTerminal object at 0x100ea7b00>, '-', <__main__.SemanticTerminal object at 0x100ea7160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: uno#BOOKo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.399999999999986..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.899999999999986..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.399999999999984..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 25.50000000000007
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 32.600000000000136
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.400000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 23.90000000000002
line done
line done

---------------------

input line #208
input roots: [<__main__.Root object at 0x100ea7e10>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 14.99999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.20000000000004..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.39999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd5c0>, '-', <__main__.AgrTerminal object at 0x100ea7208>, '#', <__main__.Root object at 0x100ebda58>, '-', <__main__.NominalizerTerminal object at 0x100ebd9b0>, '-', <__main__.SemanticTerminal object at 0x100ebd898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: li#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 16.999999999999993
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 20.000000000000018
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.3
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #209
input roots: [<__main__.Root object at 0x100ebd518>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.699999999999989..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86588>, '-', <__main__.AgrTerminal object at 0x100ebd6d8>, '#', <__main__.Root object at 0x100e869b0>, '-', <__main__.NominalizerTerminal object at 0x100e86c18>, '-', <__main__.SemanticTerminal object at 0x100e86fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#BALL-a
full_pronunciation: la#BALLo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 74.60000000000005
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 20.100000000000016
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.299999999999965
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.50000000000002
line done
line done

---------------------

input line #210
input roots: [<__main__.Root object at 0x100ebdc88>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 74.60000000000005..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 23.800000000000065..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.0..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.70000000000005..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 33.20000000000014..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.1..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.299999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c710>, '-', <__main__.AgrTerminal object at 0x100ebd208>, '#', <__main__.Root object at 0x100e8c588>, '-', <__main__.NominalizerTerminal object at 0x100e8ccc0>, '-', <__main__.SemanticTerminal object at 0x100e8c550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: la#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 74.70000000000005
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 20.000000000000014
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.199999999999964
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 22.20000000000001
line done
line done

---------------------

input line #211
input roots: [<__main__.Root object at 0x100e8cef0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 23.900000000000066..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.70000000000005..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.59999999999999..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.00000000000004..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.30000000000004..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.000000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.100000000000072..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.600000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.80000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.200000000000074..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.10000000000004..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.100000000000016..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.300000000000075..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.200000000000042..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.59999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89828>, '-', <__main__.AgrTerminal object at 0x100e8ce10>, '#', <__main__.Root object at 0x100e842b0>, '-', <__main__.NominalizerTerminal object at 0x100e84160>, '-', <__main__.SemanticTerminal object at 0x100e894e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#KEY-e
full_pronunciation: una#KEYe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.39999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.299999999999994..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.599999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 20.200000000000042
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 23.900000000000066
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 17.299999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 15.999999999999998
line done
line done

---------------------

input line #212
input roots: [<__main__.Root object at 0x100e89400>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 24.500000000000068..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 74.90000000000003..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.799999999999994..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.800000000000043..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.40000000000004..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.200000000000017..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.400000000000077..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.700000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 75.00000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.500000000000078..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 20.900000000000045..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.30000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.60000000000008..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.899999999999995..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.000000000000046..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75438>, '-', <__main__.AgrTerminal object at 0x100e84668>, '#', <__main__.Root object at 0x100e7ee10>, '-', <__main__.NominalizerTerminal object at 0x100e7e1d0>, '-', <__main__.SemanticTerminal object at 0x100e7e940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: uno#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 26.60000000000008
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 33.20000000000014
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_6
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.099999999999962
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.40000000000002
line done
line done

---------------------

input line #213
input roots: [<__main__.Root object at 0x100e849b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 75.10000000000002..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 24.60000000000007..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.200000000000067..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 75.20000000000002..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 33.20000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.300000000000068..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.40000000000004..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 20.000000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 75.30000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 75.4..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.800000000000026..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.40000000000007..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.500000000000043..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.600000000000044..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.499999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 20.10000000000002..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 16.999999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 33.30000000000014..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.299999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 75.5..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.099999999999994..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bcc0>, '-', <__main__.AgrTerminal object at 0x100e75588>, '#', <__main__.Root object at 0x100e9b390>, '-', <__main__.NominalizerTerminal object at 0x100e9b978>, '-', <__main__.SemanticTerminal object at 0x100e9b3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 25.000000000000107
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 20.000000000000004..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.499999999999986..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.999999999999986..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.499999999999984..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 75.5
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 20.10000000000002
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.3
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 19.99999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 22.20000000000001
line done
line done

---------------------

input line #214
input roots: [<__main__.Root object at 0x100e9b908>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 24.70000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.1..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 16.999999999999996..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.100000000000048..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.500000000000043..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.40000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.60000000000008..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 19.900000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.19999999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.70000000000008..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.20000000000005..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.50000000000002..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.800000000000082..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 17.099999999999998..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.30000000000005..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ea20>, '-', <__main__.AgrTerminal object at 0x100e9bc88>, '#', <__main__.Root object at 0x100e75588>, '-', <__main__.NominalizerTerminal object at 0x100e79668>, '-', <__main__.SemanticTerminal object at 0x100e7ecf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 23.500000000000085
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 17.899999999999995..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.49999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.399999999999993..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.699999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 17.099999999999998
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 19.900000000000027
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.49999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 22.600000000000026
line done
line done

---------------------

input line #215
input roots: [<__main__.Root object at 0x100e7e9b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.099999999999989..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.600000000000044..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.49999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89e10>, '-', <__main__.AgrTerminal object at 0x100e7e588>, '#', <__main__.Root object at 0x100e89da0>, '-', <__main__.NominalizerTerminal object at 0x100e89828>, '-', <__main__.SemanticTerminal object at 0x100e89588>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#FOOT-e
full_pronunciation: la#FOOTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 76.19999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 24.70000000000007
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.000000000000004
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.30000000000002
line done
line done

---------------------

input line #216
input roots: [<__main__.Root object at 0x100e6c278>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 24.70000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.19999999999999..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 17.7..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.400000000000052..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.700000000000045..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.600000000000023..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 26.900000000000084..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 20.50000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.29999999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 27.000000000000085..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.500000000000053..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 20.700000000000024..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 27.100000000000087..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 17.8..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.600000000000055..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cbe0>, '-', <__main__.AgrTerminal object at 0x100e72048>, '#', <__main__.Root object at 0x100e8c978>, '-', <__main__.NominalizerTerminal object at 0x100e8cac8>, '-', <__main__.SemanticTerminal object at 0x100e8cb38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: una#CHILDa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 23.80000000000009
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 17.999999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.599999999999989..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.499999999999993..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.799999999999997..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 17.8
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 20.700000000000024
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 20.99999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.200000000000028
line done
line done

---------------------

input line #217
input roots: [<__main__.Root object at 0x100e8c278>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.199999999999989..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.800000000000047..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.599999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86cf8>, '-', <__main__.AgrTerminal object at 0x100e63ba8>, '#', <__main__.Root object at 0x100e868d0>, '-', <__main__.NominalizerTerminal object at 0x100e86eb8>, '-', <__main__.SemanticTerminal object at 0x100e86780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 76.29999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 33.30000000000014
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.900000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.200000000000017
line done
line done

---------------------

input line #218
input roots: [<__main__.Root object at 0x100e8c668>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 76.29999999999998..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 24.80000000000007..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.39999999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 33.30000000000014..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.399999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebdef0>, '-', <__main__.AgrTerminal object at 0x100e86240>, '#', <__main__.Root object at 0x100ebd5c0>, '-', <__main__.NominalizerTerminal object at 0x100ebd898>, '-', <__main__.SemanticTerminal object at 0x100ebda58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: la#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 76.39999999999998
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 21.200000000000024
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 17.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 22.70000000000001
line done
line done

---------------------

input line #219
input roots: [<__main__.Root object at 0x100ebd518>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.299999999999988..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 20.90000000000005..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.699999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea79b0>, '-', <__main__.AgrTerminal object at 0x100ebdf98>, '#', <__main__.Root object at 0x100ea77f0>, '-', <__main__.NominalizerTerminal object at 0x100ea7cc0>, '-', <__main__.SemanticTerminal object at 0x100ea7e48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: lao#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 13.699999999999989
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 33.30000000000014
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.700000000000028
line done
line done

---------------------

input line #220
input roots: [<__main__.Root object at 0x100ea7c50>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.399999999999988..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.00000000000005..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.799999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92e80>, '-', <__main__.AgrTerminal object at 0x100ea7198>, '#', <__main__.Root object at 0x100e92dd8>, '-', <__main__.NominalizerTerminal object at 0x100e92ac8>, '-', <__main__.SemanticTerminal object at 0x100e92940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_13: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#MOUSE-o
full_pronunciation: lai#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 13.599999999999989
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 20.60000000000002
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_13
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 13.599999999999987
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 16.700000000000003
line done
line done

---------------------

input line #221
input roots: [<__main__.Root object at 0x100e833c8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 33.30000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.39999999999998..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.59999999999999..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.699999999999992..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.599999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7ac8>, '-', <__main__.AgrTerminal object at 0x100e837f0>, '#', <__main__.Root object at 0x100ea7a58>, '-', <__main__.NominalizerTerminal object at 0x100ea7080>, '-', <__main__.SemanticTerminal object at 0x100ea7208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: una#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 27.100000000000087
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 24.80000000000007
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_5
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.49999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.600000000000026
line done
line done

---------------------

input line #222
input roots: [<__main__.Root object at 0x100ea7ef0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 33.40000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.49999999999997..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.799999999999994..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.899999999999995..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.699999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebda20>, '-', <__main__.AgrTerminal object at 0x100ea77f0>, '#', <__main__.Root object at 0x100ebd550>, '-', <__main__.NominalizerTerminal object at 0x100ebd2e8>, '-', <__main__.SemanticTerminal object at 0x100ebd048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: uno#CASTLEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.599999999999985..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.099999999999985..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.599999999999984..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 27.000000000000085
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 33.40000000000014
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.8
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 19.7
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.50000000000002
line done
line done

---------------------

input line #223
input roots: [<__main__.Root object at 0x100ebda90>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 76.59999999999997..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 24.80000000000007..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.50000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.69999999999996..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.00000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.600000000000072..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.700000000000045..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 20.60000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.79999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.89999999999995..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 20.60000000000003..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.700000000000074..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.800000000000047..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.90000000000005..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.599999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 20.70000000000002..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.199999999999996..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.10000000000014..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.399999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 76.99999999999994..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.299999999999997..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86470>, '-', <__main__.AgrTerminal object at 0x100ebd898>, '#', <__main__.Root object at 0x100e8c470>, '-', <__main__.NominalizerTerminal object at 0x100e8c2e8>, '-', <__main__.SemanticTerminal object at 0x100e8c9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 26.00000000000012
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.699999999999985..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.199999999999985..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.699999999999983..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 76.99999999999994
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 20.70000000000002
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_5
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.2
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 22.70000000000001
line done
line done

---------------------

input line #224
input roots: [<__main__.Root object at 0x100ebd7f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 77.59999999999994..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 24.900000000000073..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.69999999999993..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.200000000000145..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.499999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e720f0>, '-', <__main__.AgrTerminal object at 0x100e8cf98>, '#', <__main__.Root object at 0x100e89390>, '-', <__main__.NominalizerTerminal object at 0x100e6c278>, '-', <__main__.SemanticTerminal object at 0x100e6bb00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: li#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 20.90000000000005
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 17.399999999999995
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_2
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.39999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.300000000000004
line done
line done

---------------------

input line #225
input roots: [<__main__.Root object at 0x100e49390>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 25.000000000000075..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.79999999999993..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.400000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.700000000000056..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.10000000000005..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 21.200000000000024..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 27.600000000000087..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 20.70000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.89999999999992..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 27.700000000000088..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.800000000000058..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 21.300000000000026..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 27.80000000000009..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.500000000000004..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 21.90000000000006..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 12.99999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e847b8>, '-', <__main__.AgrTerminal object at 0x100e89470>, '#', <__main__.Root object at 0x100e755f8>, '-', <__main__.NominalizerTerminal object at 0x100e75208>, '-', <__main__.SemanticTerminal object at 0x100e7b630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: una#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 24.300000000000097
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 17.999999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.699999999999989..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.599999999999993..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.899999999999997..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 27.80000000000009
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 21.300000000000026
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.299999999999958
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 16.700000000000003
line done
line done

---------------------

input line #226
input roots: [<__main__.Root object at 0x100e7bda0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.499999999999988..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.200000000000053..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.899999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b390>, '-', <__main__.AgrTerminal object at 0x100e841d0>, '#', <__main__.Root object at 0x100e9b2e8>, '-', <__main__.NominalizerTerminal object at 0x100e9bcf8>, '-', <__main__.SemanticTerminal object at 0x100e9bc50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: la#CLOWNo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 77.89999999999992
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 25.000000000000075
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.7
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.100000000000023
line done
line done

---------------------

input line #227
input roots: [<__main__.Root object at 0x100e7e940>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 34.300000000000146..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.89999999999992..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 16.999999999999996..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.099999999999998..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.799999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92b70>, '-', <__main__.AgrTerminal object at 0x100e9bc88>, '#', <__main__.Root object at 0x100e92160>, '-', <__main__.NominalizerTerminal object at 0x100e92f98>, '-', <__main__.SemanticTerminal object at 0x100e926a0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CLOWN-o
full_pronunciation: una#CLOWNo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 28.30000000000009
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 24.900000000000073
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.599999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.100000000000023
line done
line done

---------------------

input line #228
input roots: [<__main__.Root object at 0x100e92128>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.599999999999989..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b518>, '-', <__main__.AgrTerminal object at 0x100e92898>, '#', <__main__.Root object at 0x100e7ec50>, '-', <__main__.NominalizerTerminal object at 0x100e7e668>, '-', <__main__.SemanticTerminal object at 0x100e7e710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: lo#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 77.89999999999992
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 34.300000000000146
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.4
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.600000000000026
line done
line done

---------------------

input line #229
input roots: [<__main__.Root object at 0x100e9bc88>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.699999999999989..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84b00>, '-', <__main__.AgrTerminal object at 0x100e9be48>, '#', <__main__.Root object at 0x100e84be0>, '-', <__main__.NominalizerTerminal object at 0x100e84cf8>, '-', <__main__.SemanticTerminal object at 0x100e84f28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#CAR-a
full_pronunciation: la#CARo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 77.79999999999993
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 21.800000000000026
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_2
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 17.999999999999996
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.00000000000002
line done
line done

---------------------

input line #230
input roots: [<__main__.Root object at 0x100e84240>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 24.900000000000073..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.79999999999993..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.600000000000005..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.00000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.300000000000054..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 21.800000000000026..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.30000000000009..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 20.800000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 77.89999999999992..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.40000000000009..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.100000000000062..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 21.900000000000027..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.500000000000092..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.700000000000006..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.200000000000063..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.099999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e72160>, '-', <__main__.AgrTerminal object at 0x100e84668>, '#', <__main__.Root object at 0x100e8cfd0>, '-', <__main__.NominalizerTerminal object at 0x100e8cc50>, '-', <__main__.SemanticTerminal object at 0x100e72048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: uno#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 28.500000000000092
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 34.200000000000145
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.799999999999958
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.700000000000028
line done
line done

---------------------

input line #231
input roots: [<__main__.Root object at 0x100e75198>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.799999999999988..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86940>, '-', <__main__.AgrTerminal object at 0x100e7a7f0>, '#', <__main__.Root object at 0x100e86400>, '-', <__main__.NominalizerTerminal object at 0x100e86470>, '-', <__main__.SemanticTerminal object at 0x100e869b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 17.999999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.799999999999988..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.699999999999992..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 10.999999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 77.89999999999992
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 24.900000000000073
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.699999999999957
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 17.300000000000004
line done
line done

---------------------

input line #232
input roots: [<__main__.Root object at 0x100e8c668>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 78.49999999999991..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 25.500000000000075..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.800000000000075..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 78.59999999999991..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.200000000000145..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 22.900000000000077..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 20.90000000000005..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.300000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 78.6999999999999..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 78.7999999999999..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 20.900000000000034..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 23.000000000000078..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.00000000000005..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.10000000000005..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.699999999999992..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.400000000000023..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.4..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.300000000000146..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.399999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 78.89999999999989..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.5..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 12.99999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd320>, '-', <__main__.AgrTerminal object at 0x100e86c88>, '#', <__main__.Root object at 0x100ebd588>, '-', <__main__.NominalizerTerminal object at 0x100ebd6d8>, '-', <__main__.SemanticTerminal object at 0x100ebd978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lo#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 78.89999999999989
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 21.300000000000054
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.499999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 23.30000000000001
line done
line done

---------------------

input line #233
input roots: [<__main__.Root object at 0x100ebd470>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 78.89999999999989..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 25.600000000000076..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 23.10000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 78.99999999999989..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.40000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 23.20000000000008..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.200000000000053..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.500000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 79.09999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 79.19999999999987..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.000000000000036..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 23.300000000000082..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.300000000000054..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.400000000000055..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.799999999999992..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.600000000000026..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.6..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.50000000000015..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.499999999999996..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 79.29999999999987..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.700000000000003..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.099999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea78d0>, '-', <__main__.AgrTerminal object at 0x100ebdac8>, '#', <__main__.Root object at 0x100ea72b0>, '-', <__main__.NominalizerTerminal object at 0x100ea70f0>, '-', <__main__.SemanticTerminal object at 0x100ea7b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 26.60000000000013
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.799999999999985..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.299999999999985..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.799999999999983..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 79.29999999999987
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 23.300000000000082
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.399999999999995
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 23.30000000000001
line done
line done

---------------------

input line #234
input roots: [<__main__.Root object at 0x100ebdd30>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 79.89999999999986..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 25.700000000000077..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 23.900000000000084..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 79.99999999999986..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.60000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.000000000000085..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.500000000000057..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.700000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.09999999999985..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.19999999999985..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.100000000000037..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.100000000000087..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.60000000000006..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.70000000000006..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.899999999999991..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.80000000000003..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.800000000000004..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.70000000000015..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.599999999999998..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.29999999999984..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 17.900000000000006..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.199999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb17f0>, '-', <__main__.AgrTerminal object at 0x100ea7eb8>, '#', <__main__.Root object at 0x100eb1198>, '-', <__main__.NominalizerTerminal object at 0x100eb1390>, '-', <__main__.SemanticTerminal object at 0x100eb11d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lo#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 80.29999999999984
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 21.200000000000053
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.899999999999995
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.200000000000003
line done
line done

---------------------

input line #235
input roots: [<__main__.Root object at 0x100ea7ef0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 25.80000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.29999999999984..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.800000000000008..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.300000000000065..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.200000000000053..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 22.00000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.500000000000092..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.20000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.39999999999984..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.600000000000094..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.400000000000066..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 22.10000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.700000000000095..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 18.90000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.500000000000068..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.199999999999989..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd4e0>, '-', <__main__.AgrTerminal object at 0x100e83358>, '#', <__main__.Root object at 0x100ebd7f0>, '-', <__main__.NominalizerTerminal object at 0x100ebda58>, '-', <__main__.SemanticTerminal object at 0x100ebd9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#GRANDPARENT-a
full_pronunciation: uno#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 28.700000000000095
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 34.70000000000015
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.199999999999957
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.90000000000002
line done
line done

---------------------

input line #236
input roots: [<__main__.Root object at 0x100ea7e48>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 80.49999999999983..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 25.90000000000008..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.200000000000088..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.59999999999982..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.70000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.30000000000009..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.80000000000006..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 21.90000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.69999999999982..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.79999999999981..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.30000000000004..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.40000000000009..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 21.900000000000063..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.000000000000064..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 13.999999999999991..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.000000000000032..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.000000000000007..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.80000000000015..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.7..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 80.8999999999998..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.10000000000001..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.299999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ed68>, '-', <__main__.AgrTerminal object at 0x100ebde10>, '#', <__main__.Root object at 0x100e86240>, '-', <__main__.NominalizerTerminal object at 0x100e86c88>, '-', <__main__.SemanticTerminal object at 0x100e86320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 27.000000000000135
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.899999999999984..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.399999999999984..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.899999999999983..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 80.8999999999998
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 22.000000000000032
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_6
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 20.799999999999994
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 24.000000000000014
line done
line done

---------------------

input line #237
input roots: [<__main__.Root object at 0x100ebd320>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 81.4999999999998..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 26.00000000000008..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 81.5999999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 34.900000000000155..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cd68>, '-', <__main__.AgrTerminal object at 0x100e86a90>, '#', <__main__.Root object at 0x100e8cac8>, '-', <__main__.NominalizerTerminal object at 0x100e8cdd8>, '-', <__main__.SemanticTerminal object at 0x100e8cbe0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 25.20000000000011
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.899999999999988..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.799999999999992..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.099999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 81.5999999999998
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 13.999999999999991
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 17.999999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.200000000000003
line done
line done

---------------------

input line #238
input roots: [<__main__.Root object at 0x100ebd3c8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 35.000000000000156..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 82.19999999999979..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.2..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.3..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.899999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89710>, '-', <__main__.AgrTerminal object at 0x100e8c0b8>, '#', <__main__.Root object at 0x100e89da0>, '-', <__main__.NominalizerTerminal object at 0x100e89b38>, '-', <__main__.SemanticTerminal object at 0x100e89d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: una#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 17.3
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 26.00000000000008
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.299999999999994
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 24.90000000000002
line done
line done

---------------------

input line #239
input roots: [<__main__.Root object at 0x100e8c9b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.599999999999987..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.300000000000054..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 13.999999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e757f0>, '-', <__main__.AgrTerminal object at 0x100e89470>, '#', <__main__.Root object at 0x100e752b0>, '-', <__main__.NominalizerTerminal object at 0x100e754e0>, '-', <__main__.SemanticTerminal object at 0x100e75a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 82.19999999999979
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 35.000000000000156
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.099999999999955
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.700000000000028
line done
line done

---------------------

input line #240
input roots: [<__main__.Root object at 0x100ebde80>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.699999999999987..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.400000000000055..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.099999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9ba58>, '-', <__main__.AgrTerminal object at 0x100e755f8>, '#', <__main__.Root object at 0x100e92f98>, '-', <__main__.NominalizerTerminal object at 0x100e92898>, '-', <__main__.SemanticTerminal object at 0x100e925f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: lo#FOOTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 14.999999999999984..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.499999999999984..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 15.999999999999982..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 82.0999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 34.900000000000155
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.199999999999992
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 17.900000000000006
line done
line done

---------------------

input line #241
input roots: [<__main__.Root object at 0x100e9b4e0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 26.00000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 82.69999999999979..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 19.00000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.60000000000007..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.500000000000057..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 22.20000000000003..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.700000000000095..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.40000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 82.79999999999978..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.800000000000097..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.70000000000007..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 22.300000000000033..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.900000000000098..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 19.100000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.80000000000007..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.299999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1048>, '-', <__main__.AgrTerminal object at 0x100e9b518>, '#', <__main__.Root object at 0x100eb1668>, '-', <__main__.NominalizerTerminal object at 0x100eb17b8>, '-', <__main__.SemanticTerminal object at 0x100eb1ba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: unoa#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 13.899999999999988
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 26.00000000000008
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 18.499999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.700000000000028
line done
line done

---------------------

input line #242
input roots: [<__main__.Root object at 0x100eb1cf8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 82.89999999999978..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 26.00000000000008..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 82.99999999999977..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 35.500000000000156..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 17.900000000000013..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.699999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ecf8>, '-', <__main__.AgrTerminal object at 0x100e92550>, '#', <__main__.Root object at 0x100e7e4a8>, '-', <__main__.NominalizerTerminal object at 0x100e7e438>, '-', <__main__.SemanticTerminal object at 0x100e7e710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#TOWER-i
full_pronunciation: le#TOWERi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 18.499999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.999999999999988..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.899999999999991..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.199999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 82.99999999999977
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.49999999999999
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 21.999999999999954
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 24.600000000000016
line done
line done

---------------------

input line #243
input roots: [<__main__.Root object at 0x100e92588>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.899999999999988..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84f28>, '-', <__main__.AgrTerminal object at 0x100e75588>, '#', <__main__.Root object at 0x100e89a20>, '-', <__main__.NominalizerTerminal object at 0x100e89e10>, '-', <__main__.SemanticTerminal object at 0x100e84cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 83.49999999999977
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 21.40000000000004
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.499999999999954
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 18.400000000000006
line done
line done

---------------------

input line #244
input roots: [<__main__.Root object at 0x100e847b8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 83.49999999999977..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 26.100000000000083..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.000000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 83.59999999999977..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 35.60000000000016..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.100000000000016..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.799999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cfd0>, '-', <__main__.AgrTerminal object at 0x100e89748>, '#', <__main__.Root object at 0x100e8c780>, '-', <__main__.NominalizerTerminal object at 0x100e8c400>, '-', <__main__.SemanticTerminal object at 0x100e8cba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_20: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: le#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 83.59999999999977
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.99999999999999
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_20
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 25.100000000000016
line done
line done

---------------------

input line #245
input roots: [<__main__.Root object at 0x100e89c50>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 35.70000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 83.59999999999977..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.3..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.400000000000002..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.899999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e868d0>, '-', <__main__.AgrTerminal object at 0x100e8c710>, '#', <__main__.Root object at 0x100e86780>, '-', <__main__.NominalizerTerminal object at 0x100e86550>, '-', <__main__.SemanticTerminal object at 0x100e860b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: unoi#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 13.899999999999988
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 22.500000000000032
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.699999999999992
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.00000000000002
line done
line done

---------------------

input line #246
input roots: [<__main__.Root object at 0x100e8ccf8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 35.80000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 83.69999999999976..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.500000000000004..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.600000000000005..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.899999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd550>, '-', <__main__.AgrTerminal object at 0x100e864e0>, '#', <__main__.Root object at 0x100ebdf60>, '-', <__main__.NominalizerTerminal object at 0x100ebd780>, '-', <__main__.SemanticTerminal object at 0x100ebdb70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: uni#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 28.900000000000098
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 22.40000000000003
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.399999999999952
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.00000000000002
line done
line done

---------------------

input line #247
input roots: [<__main__.Root object at 0x100e72048>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 83.79999999999976..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 26.200000000000085..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.500000000000092..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 83.89999999999975..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 35.90000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.600000000000094..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.100000000000065..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.40000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 83.99999999999974..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 84.09999999999974..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.40000000000004..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.700000000000095..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.200000000000067..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.300000000000068..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 14.59999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.500000000000032..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.20000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.00000000000016..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.8..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 84.19999999999973..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.30000000000001..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.399999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea70f0>, '-', <__main__.AgrTerminal object at 0x100ebdc18>, '#', <__main__.Root object at 0x100ea7f28>, '-', <__main__.NominalizerTerminal object at 0x100ea7c88>, '-', <__main__.SemanticTerminal object at 0x100ea7eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 18.30000000000001
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 24.700000000000095
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.59999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.800000000000004
line done
line done

---------------------

input line #248
input roots: [<__main__.Root object at 0x100ea7780>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.999999999999988..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1e10>, '-', <__main__.AgrTerminal object at 0x100e83a90>, '#', <__main__.Root object at 0x100e78630>, '-', <__main__.NominalizerTerminal object at 0x100e65940>, '-', <__main__.SemanticTerminal object at 0x100eb1940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 26.00000000000012
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.099999999999987..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.999999999999991..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.299999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 84.19999999999973
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 22.300000000000033
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 15.099999999999987
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 23.80000000000003
line done
line done

---------------------

input line #249
input roots: [<__main__.Root object at 0x100eb12e8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 84.79999999999973..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 26.300000000000086..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.700000000000095..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 84.89999999999972..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.100000000000165..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.800000000000097..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.40000000000007..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.600000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 84.99999999999972..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.09999999999971..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.500000000000043..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 24.900000000000098..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.50000000000007..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 22.600000000000072..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 14.69999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.700000000000035..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.30000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.200000000000166..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.900000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.1999999999997..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.400000000000013..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.499999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7e10>, '-', <__main__.AgrTerminal object at 0x100eb1a90>, '#', <__main__.Root object at 0x100ea7908>, '-', <__main__.NominalizerTerminal object at 0x100ea7208>, '-', <__main__.SemanticTerminal object at 0x100ea72b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 28.00000000000015
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.099999999999984..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.599999999999984..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.099999999999984..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 22.600000000000072
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 24.900000000000098
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_2
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.49999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 25.200000000000017
line done
line done

---------------------

input line #250
input roots: [<__main__.Root object at 0x100eb14e0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.799999999999986..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.60000000000006..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.199999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd048>, '-', <__main__.AgrTerminal object at 0x100ea7048>, '#', <__main__.Root object at 0x100ebd390>, '-', <__main__.NominalizerTerminal object at 0x100ebde10>, '-', <__main__.SemanticTerminal object at 0x100ebd668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: lao#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 13.999999999999988
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 36.200000000000166
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.99999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 18.300000000000004
line done
line done

---------------------

input line #251
input roots: [<__main__.Root object at 0x100ebd2e8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 26.400000000000087..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.2999999999997..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 19.200000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 22.900000000000073..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.70000000000006..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 22.900000000000034..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 28.900000000000098..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.600000000000044..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.3999999999997..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 29.0000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.000000000000075..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.000000000000036..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 29.1000000000001..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 19.300000000000015..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.100000000000076..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.399999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e868d0>, '-', <__main__.AgrTerminal object at 0x100ea70f0>, '#', <__main__.Root object at 0x100e8cef0>, '-', <__main__.NominalizerTerminal object at 0x100e6c278>, '-', <__main__.SemanticTerminal object at 0x100e86470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 26.300000000000125
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 18.599999999999998..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.699999999999987..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.09999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.399999999999995..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 19.300000000000015
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 26.400000000000087
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.29999999999995
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 24.40000000000003
line done
line done

---------------------

input line #252
input roots: [<__main__.Root object at 0x100e86780>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 85.49999999999969..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.00000000000009..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.200000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.59999999999968..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.200000000000166..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.30000000000002..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.899999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c8d0>, '-', <__main__.AgrTerminal object at 0x100e86c18>, '#', <__main__.Root object at 0x100e49278>, '-', <__main__.NominalizerTerminal object at 0x100e723c8>, '-', <__main__.SemanticTerminal object at 0x100e72198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#TOWER-i
full_pronunciation: la#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 85.59999999999968
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 23.000000000000036
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.79999999999995
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.700000000000003
line done
line done

---------------------

input line #253
input roots: [<__main__.Root object at 0x100e72160>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 85.59999999999968..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.10000000000009..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.40000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.69999999999968..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.30000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.50000000000002..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 13.999999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84f28>, '-', <__main__.AgrTerminal object at 0x100e8c588>, '#', <__main__.Root object at 0x100e79be0>, '-', <__main__.NominalizerTerminal object at 0x100e63ba8>, '-', <__main__.SemanticTerminal object at 0x100e841d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: li#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 85.69999999999968
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 17.900000000000002
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 18.599999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.700000000000003
line done
line done

---------------------

input line #254
input roots: [<__main__.Root object at 0x100e84160>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 36.40000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.69999999999968..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.700000000000006..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.800000000000008..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.999999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b550>, '-', <__main__.AgrTerminal object at 0x100e75b00>, '#', <__main__.Root object at 0x100e9bdd8>, '-', <__main__.NominalizerTerminal object at 0x100e9b748>, '-', <__main__.SemanticTerminal object at 0x100e9bbe0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: unoo#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 13.999999999999988
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 36.40000000000017
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.899999999999988
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.100000000000023
line done
line done

---------------------

input line #255
input roots: [<__main__.Root object at 0x100e89978>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 13.999999999999988..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44550>, '-', <__main__.AgrTerminal object at 0x100e925f8>, '#', <__main__.Root object at 0x100ea0390>, '-', <__main__.NominalizerTerminal object at 0x100ea0eb8>, '-', <__main__.SemanticTerminal object at 0x100ea0b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#FROG-a
full_pronunciation: la#FROGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 85.69999999999968
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 22.900000000000034
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 18.499999999999996
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.00000000000002
line done
line done

---------------------

input line #256
input roots: [<__main__.Root object at 0x100e78390>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 85.69999999999968..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.20000000000009..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 25.5000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.79999999999967..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.40000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 25.6000000000001..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.200000000000074..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.800000000000036..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.89999999999966..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 85.99999999999966..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.700000000000045..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 25.700000000000102..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.300000000000075..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.400000000000077..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 14.79999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.900000000000038..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.500000000000014..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.50000000000017..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.900000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.09999999999965..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 18.600000000000016..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e160>, '-', <__main__.AgrTerminal object at 0x100e44d68>, '#', <__main__.Root object at 0x100e7eda0>, '-', <__main__.NominalizerTerminal object at 0x100e7ee10>, '-', <__main__.SemanticTerminal object at 0x100e7e438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.09999999999965
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 22.900000000000038
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #257
input roots: [<__main__.Root object at 0x100e7e710>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 86.09999999999965..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.300000000000093..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.600000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.19999999999965..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.60000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.700000000000024..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.099999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84b00>, '-', <__main__.AgrTerminal object at 0x100e79be0>, '#', <__main__.Root object at 0x100e89400>, '-', <__main__.NominalizerTerminal object at 0x100e89a20>, '-', <__main__.SemanticTerminal object at 0x100e89748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: li#TOWERi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.19999999999965
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 17.900000000000002
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 26.00000000000002
line done
line done

---------------------

input line #258
input roots: [<__main__.Root object at 0x100e9be48>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.899999999999986..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 21.80000000000006..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.299999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c4a8>, '-', <__main__.AgrTerminal object at 0x100e7e3c8>, '#', <__main__.Root object at 0x100e8cba8>, '-', <__main__.NominalizerTerminal object at 0x100e8c400>, '-', <__main__.SemanticTerminal object at 0x100e8cfd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 28.600000000000158
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.199999999999983..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.699999999999983..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.199999999999985..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 18.600000000000016
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 21.80000000000006
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 21.799999999999986
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 18.300000000000004
line done
line done

---------------------

input line #259
input roots: [<__main__.Root object at 0x100e720f0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 86.19999999999965..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.400000000000095..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.800000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.29999999999964..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.70000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 18.900000000000027..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.199999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e868d0>, '-', <__main__.AgrTerminal object at 0x100e8cef0>, '#', <__main__.Root object at 0x100e86390>, '-', <__main__.NominalizerTerminal object at 0x100e86f28>, '-', <__main__.SemanticTerminal object at 0x100e86550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CHILD-e
full_pronunciation: li#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.29999999999964
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 17.8
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.69999999999995
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #260
input roots: [<__main__.Root object at 0x100e757f0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 15.999999999999986..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 22.400000000000063..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.399999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd4a8>, '-', <__main__.AgrTerminal object at 0x100e8cc18>, '#', <__main__.Root object at 0x100ebd908>, '-', <__main__.NominalizerTerminal object at 0x100ebd978>, '-', <__main__.SemanticTerminal object at 0x100ebdf60>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: la#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.19999999999965
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 27.400000000000095
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.599999999999948
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.000000000000032
line done
line done

---------------------

input line #261
input roots: [<__main__.Root object at 0x100ebd550>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 86.19999999999965..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.400000000000095..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 19.00000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.29999999999964..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.800000000000175..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 19.10000000000003..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.299999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7128>, '-', <__main__.AgrTerminal object at 0x100ebd630>, '#', <__main__.Root object at 0x100e837f0>, '-', <__main__.NominalizerTerminal object at 0x100e83e48>, '-', <__main__.SemanticTerminal object at 0x100ea7438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: li#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.29999999999964
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 17.7
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.499999999999947
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 26.00000000000002
line done
line done

---------------------

input line #262
input roots: [<__main__.Root object at 0x100ea7208>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 86.29999999999964..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.500000000000096..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 19.20000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.39999999999964..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 36.900000000000176..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 19.300000000000033..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0a20>, '-', <__main__.AgrTerminal object at 0x100eb1400>, '#', <__main__.Root object at 0x100ea06d8>, '-', <__main__.NominalizerTerminal object at 0x100ea0320>, '-', <__main__.SemanticTerminal object at 0x100ea0710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CAR-e
full_pronunciation: le#CARe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 27.200000000000138
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 18.499999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.799999999999986..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.19999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.499999999999995..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 86.39999999999964
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 19.300000000000033
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.399999999999945
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 17.6
line done
line done

---------------------

input line #263
input roots: [<__main__.Root object at 0x100ea0c50>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 37.00000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 86.99999999999963..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 17.90000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.00000000000001..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 13.999999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7c88>, '-', <__main__.AgrTerminal object at 0x100eb1d68>, '#', <__main__.Root object at 0x100ebd7f0>, '-', <__main__.NominalizerTerminal object at 0x100ebd780>, '-', <__main__.SemanticTerminal object at 0x100ebdfd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CLOWN-o
full_pronunciation: una#CLOWNo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 29.1000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 27.500000000000096
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 22.299999999999986
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.100000000000023
line done
line done

---------------------

input line #264
input roots: [<__main__.Root object at 0x100ea7438>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 87.09999999999962..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.500000000000096..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 25.800000000000104..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 87.19999999999962..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.10000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 25.900000000000105..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.500000000000078..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 22.900000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 87.29999999999961..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 87.39999999999961..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.800000000000047..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.000000000000107..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.60000000000008..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.70000000000008..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 14.89999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.00000000000004..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.200000000000017..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.20000000000018..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.7..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 87.4999999999996..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.30000000000002..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.699999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5db70>, '-', <__main__.AgrTerminal object at 0x100e5a710>, '#', <__main__.Root object at 0x100e86048>, '-', <__main__.NominalizerTerminal object at 0x100e86a90>, '-', <__main__.SemanticTerminal object at 0x100e6ed68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 87.4999999999996
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 26.000000000000107
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.899999999999945
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.1
line done
line done

---------------------

input line #265
input roots: [<__main__.Root object at 0x100e6ec88>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 87.4999999999996..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.600000000000097..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 19.900000000000034..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 87.5999999999996..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.30000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.000000000000036..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.499999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c828>, '-', <__main__.AgrTerminal object at 0x100e86320>, '#', <__main__.Root object at 0x100e8cd68>, '-', <__main__.NominalizerTerminal object at 0x100e8cdd8>, '-', <__main__.SemanticTerminal object at 0x100e8c0b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: le#FROGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 27.500000000000142
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 18.599999999999998..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.899999999999986..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.29999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.599999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 87.5999999999996
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 14.89999999999999
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 22.799999999999944
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.1
line done
line done

---------------------

input line #266
input roots: [<__main__.Root object at 0x100e86470>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 88.19999999999959..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.7000000000001..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.100000000000037..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.29999999999959..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.40000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.20000000000004..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.599999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7b630>, '-', <__main__.AgrTerminal object at 0x100e8c470>, '#', <__main__.Root object at 0x100e894e0>, '-', <__main__.NominalizerTerminal object at 0x100e89390>, '-', <__main__.SemanticTerminal object at 0x100e89710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#TOWER-i
full_pronunciation: le#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 88.29999999999959
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.89999999999999
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 12.299999999999992
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.6
line done
line done

---------------------

input line #267
input roots: [<__main__.Root object at 0x100e8c358>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 88.29999999999959..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.8000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.000000000000107..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.39999999999958..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.500000000000185..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.100000000000108..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.800000000000082..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.10000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.49999999999957..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.59999999999957..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 21.90000000000005..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.20000000000011..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 23.900000000000084..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.000000000000085..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.49999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.200000000000042..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.40000000000002..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.600000000000186..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.8..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.69999999999956..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.50000000000002..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.799999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75588>, '-', <__main__.AgrTerminal object at 0x100e89eb8>, '#', <__main__.Root object at 0x100e75048>, '-', <__main__.NominalizerTerminal object at 0x100e75198>, '-', <__main__.SemanticTerminal object at 0x100e752b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: lo#CLOWNi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 88.69999999999956
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 22.400000000000063
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.299999999999944
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 26.200000000000024
line done
line done

---------------------

input line #268
input roots: [<__main__.Root object at 0x100e860b8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 37.70000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.69999999999956..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.100000000000012..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.200000000000014..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.099999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92588>, '-', <__main__.AgrTerminal object at 0x100e79668>, '#', <__main__.Root object at 0x100e78048>, '-', <__main__.NominalizerTerminal object at 0x100e92ac8>, '-', <__main__.SemanticTerminal object at 0x100e92c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#PIBLING-o
full_pronunciation: uni#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 29.0000000000001
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 23.200000000000042
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.199999999999942
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 24.90000000000003
line done
line done

---------------------

input line #269
input roots: [<__main__.Root object at 0x100e92e80>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 88.79999999999956..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 27.9000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.30000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.89999999999955..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.80000000000019..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.400000000000112..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.100000000000087..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.200000000000042..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 88.99999999999955..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 89.09999999999954..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.00000000000005..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 26.500000000000114..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.200000000000088..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.30000000000009..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.599999999999989..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.300000000000043..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.600000000000023..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 37.90000000000019..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 17.900000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 89.19999999999953..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.700000000000024..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.899999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0c88>, '-', <__main__.AgrTerminal object at 0x100e920f0>, '#', <__main__.Root object at 0x100ea0278>, '-', <__main__.NominalizerTerminal object at 0x100ea0470>, '-', <__main__.SemanticTerminal object at 0x100ea0630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 29.40000000000017
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 22.299999999999986..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.299999999999983..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.799999999999983..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.299999999999986..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 89.19999999999953
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 26.500000000000114
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.9
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.09999999999994
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 26.200000000000024
line done
line done

---------------------

input line #270
input roots: [<__main__.Root object at 0x100ea02b0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 38.00000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 89.79999999999953..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.300000000000015..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.400000000000016..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.199999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92fd0>, '-', <__main__.AgrTerminal object at 0x100ea09b0>, '#', <__main__.Root object at 0x100e9bfd0>, '-', <__main__.NominalizerTerminal object at 0x100e9ba58>, '-', <__main__.SemanticTerminal object at 0x100e9b240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uno#OFFSPRINGo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 29.700000000000173
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.399999999999983..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.899999999999983..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.399999999999988..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 28.900000000000098
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 22.30000000000006
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 22.299999999999986
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.200000000000024
line done
line done

---------------------

input line #271
input roots: [<__main__.Root object at 0x100e78f28>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 38.10000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 89.89999999999952..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.500000000000018..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.60000000000002..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.299999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e757f0>, '-', <__main__.AgrTerminal object at 0x100e92c88>, '#', <__main__.Root object at 0x100e84b00>, '-', <__main__.NominalizerTerminal object at 0x100e84940>, '-', <__main__.SemanticTerminal object at 0x100e84748>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#FOOT-e
full_pronunciation: uno#FOOTa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 29.400000000000098
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 22.80000000000006
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 22.799999999999986
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 24.80000000000003
line done
line done

---------------------

input line #272
input roots: [<__main__.Root object at 0x100e75be0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.099999999999987..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bc50>, '-', <__main__.AgrTerminal object at 0x100e84828>, '#', <__main__.Root object at 0x100e72390>, '-', <__main__.NominalizerTerminal object at 0x100e72358>, '-', <__main__.SemanticTerminal object at 0x100e49278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 27.900000000000148
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.999999999999986..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.39999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.699999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 89.89999999999952
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 22.800000000000033
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 18.599999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 24.80000000000003
line done
line done

---------------------

input line #273
input roots: [<__main__.Root object at 0x100e6bf98>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 22.80000000000006..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c0b8>, '-', <__main__.AgrTerminal object at 0x100e7a4a8>, '#', <__main__.Root object at 0x100e65c88>, '-', <__main__.NominalizerTerminal object at 0x100e8c978>, '-', <__main__.SemanticTerminal object at 0x100e8c550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: li#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 90.39999999999952
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 23.300000000000043
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 22.699999999999985
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.30000000000003
line done
line done

---------------------

input line #274
input roots: [<__main__.Root object at 0x100e8c828>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 90.39999999999952..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 28.000000000000103..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.30000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 90.49999999999952..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.200000000000195..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.40000000000004..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.699999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a7b8>, '-', <__main__.AgrTerminal object at 0x100e860b8>, '#', <__main__.Root object at 0x100ebd5c0>, '-', <__main__.NominalizerTerminal object at 0x100ebd4a8>, '-', <__main__.SemanticTerminal object at 0x100ebd940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: le#KEYi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.099999999999987..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.49999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.799999999999994..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 90.49999999999952
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.79999999999999
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 19.099999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 26.800000000000026
line done
line done

---------------------

input line #275
input roots: [<__main__.Root object at 0x100e86048>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.199999999999987..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7a20>, '-', <__main__.AgrTerminal object at 0x100ebd748>, '#', <__main__.Root object at 0x100ea7048>, '-', <__main__.NominalizerTerminal object at 0x100ea7c88>, '-', <__main__.SemanticTerminal object at 0x100ea7cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_5: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#OFFSPRING-a
full_pronunciation: lo#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+feminine', '+definite'}
    diacritic: l_5
    triggers: set()
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 38.200000000000195
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.59999999999994
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.800000000000026
line done
line done

---------------------

input line #276
input roots: [<__main__.Root object at 0x100ebd7f0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 91.09999999999951..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 28.100000000000104..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.100000000000115..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.1999999999995..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.200000000000195..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.200000000000117..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.40000000000009..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.300000000000043..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.2999999999995..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.3999999999995..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.10000000000005..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.300000000000118..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.500000000000092..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.600000000000094..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.699999999999989..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.400000000000045..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.800000000000026..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.300000000000196..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.000000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.49999999999949..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 19.900000000000027..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.999999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56e10>, '-', <__main__.AgrTerminal object at 0x100ea77f0>, '#', <__main__.Root object at 0x100e7fc50>, '-', <__main__.NominalizerTerminal object at 0x100e7fe48>, '-', <__main__.SemanticTerminal object at 0x100e567f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked li_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#OFFSPRING-i
full_pronunciation: lii#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: li_2
    triggers: set()
    weight: 13.999999999999986
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 27.300000000000118
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.49999999999994
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 27.400000000000027
line done
line done

---------------------

input line #277
input roots: [<__main__.Root object at 0x100ebd048>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 91.59999999999948..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 28.200000000000106..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.300000000000118..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.69999999999948..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.4000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.40000000000012..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.700000000000095..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.500000000000046..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.79999999999947..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.89999999999947..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.200000000000053..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 27.50000000000012..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.800000000000097..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 24.900000000000098..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.799999999999988..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.600000000000048..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.00000000000003..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.5000000000002..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.100000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 91.99999999999946..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.10000000000003..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 13.999999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7a20>, '-', <__main__.AgrTerminal object at 0x100e7fb00>, '#', <__main__.Root object at 0x100ebd9e8>, '-', <__main__.NominalizerTerminal object at 0x100ebd748>, '-', <__main__.SemanticTerminal object at 0x100ebd240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 30.300000000000182
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 91.99999999999946
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 27.50000000000012
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.3
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 27.400000000000027
line done
line done

---------------------

input line #278
input roots: [<__main__.Root object at 0x100ea7048>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 92.59999999999945..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 28.300000000000107..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.100000000000122..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 92.69999999999945..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.6000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.200000000000124..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.0000000000001..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.70000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 92.79999999999944..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 92.89999999999944..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.300000000000054..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.300000000000125..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.1000000000001..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.200000000000102..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.899999999999988..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 23.80000000000005..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.20000000000003..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.7000000000002..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.200000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 92.99999999999943..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.300000000000033..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.099999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5db70>, '-', <__main__.AgrTerminal object at 0x100eb1b00>, '#', <__main__.Root object at 0x100e86240>, '-', <__main__.NominalizerTerminal object at 0x100e86b38>, '-', <__main__.SemanticTerminal object at 0x100e6eeb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: li#OFFSPRINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 30.600000000000186
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 22.699999999999985..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.499999999999982..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.999999999999982..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.49999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 92.99999999999943
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 23.80000000000005
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.399999999999938
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 28.00000000000003
line done
line done

---------------------

input line #279
input roots: [<__main__.Root object at 0x100ebdda0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 22.900000000000063..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.599999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c828>, '-', <__main__.AgrTerminal object at 0x100e86a20>, '#', <__main__.Root object at 0x100e8cd68>, '-', <__main__.NominalizerTerminal object at 0x100e8cdd8>, '-', <__main__.SemanticTerminal object at 0x100e8c550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: lo#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 93.49999999999943
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 22.900000000000063
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.899999999999938
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.30000000000003
line done
line done

---------------------

input line #280
input roots: [<__main__.Root object at 0x100e8ca58>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 22.900000000000063..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.699999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bda0>, '-', <__main__.AgrTerminal object at 0x100e8cac8>, '#', <__main__.Root object at 0x100e89710>, '-', <__main__.NominalizerTerminal object at 0x100e89390>, '-', <__main__.SemanticTerminal object at 0x100e89d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: li#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 93.39999999999944
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 24.30000000000005
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.799999999999937
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 19.000000000000007
line done
line done

---------------------

input line #281
input roots: [<__main__.Root object at 0x100e8cd30>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 28.40000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.39999999999944..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 19.900000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.200000000000077..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.000000000000064..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.400000000000034..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 29.400000000000098..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.400000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.49999999999943..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 29.5000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.30000000000008..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.500000000000036..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 29.6000000000001..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.000000000000018..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.40000000000008..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.499999999999988..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e757f0>, '-', <__main__.AgrTerminal object at 0x100e6bc50>, '#', <__main__.Root object at 0x100e75a20>, '-', <__main__.NominalizerTerminal object at 0x100e75278>, '-', <__main__.SemanticTerminal object at 0x100e752b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 19.7..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.19999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.599999999999989..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.899999999999993..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 29.6000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 28.40000000000011
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.699999999999935
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.30000000000003
line done
line done

---------------------

input line #282
input roots: [<__main__.Root object at 0x100e84668>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 38.8000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.59999999999943..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.70000000000002..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.800000000000022..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.399999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e925f8>, '-', <__main__.AgrTerminal object at 0x100e89470>, '#', <__main__.Root object at 0x100e44550>, '-', <__main__.NominalizerTerminal object at 0x100e445f8>, '-', <__main__.SemanticTerminal object at 0x100e78f28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: una#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 30.1000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 28.90000000000011
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.199999999999935
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 25.900000000000027
line done
line done

---------------------

input line #283
input roots: [<__main__.Root object at 0x100e78630>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.100000000000065..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.799999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e662b0>, '-', <__main__.AgrTerminal object at 0x100e92ac8>, '#', <__main__.Root object at 0x100e735f8>, '-', <__main__.NominalizerTerminal object at 0x100e738d0>, '-', <__main__.SemanticTerminal object at 0x100e667b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_21: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 20.300000000000033
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 38.8000000000002
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_21
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 11.999999999999993
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.80000000000003
line done
line done

---------------------

input line #284
input roots: [<__main__.Root object at 0x100e442b0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 28.90000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.69999999999942..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.10000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.50000000000008..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.200000000000067..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.600000000000037..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.1000000000001..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.500000000000057..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.79999999999941..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.200000000000102..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.600000000000083..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.70000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.300000000000104..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.20000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.700000000000085..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78f28>, '-', <__main__.AgrTerminal object at 0x100e73a90>, '#', <__main__.Root object at 0x100e5e978>, '-', <__main__.NominalizerTerminal object at 0x100e92c88>, '-', <__main__.SemanticTerminal object at 0x100e925f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: une#BALLa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 30.300000000000104
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 15.899999999999988
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 19.7
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.80000000000003
line done
line done

---------------------

input line #285
input roots: [<__main__.Root object at 0x100e92d30>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.300000000000068..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.899999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75d30>, '-', <__main__.AgrTerminal object at 0x100e7e588>, '#', <__main__.Root object at 0x100e847b8>, '-', <__main__.NominalizerTerminal object at 0x100e84940>, '-', <__main__.SemanticTerminal object at 0x100e75c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CLOWN-o
full_pronunciation: li#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 16.499999999999993
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 24.20000000000005
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.099999999999934
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.700000000000028
line done
line done

---------------------

input line #286
input roots: [<__main__.Root object at 0x100e75940>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 93.89999999999941..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 29.00000000000011..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.400000000000126..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 93.9999999999994..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.8000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.500000000000128..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.300000000000104..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 24.20000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 94.0999999999994..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 94.19999999999939..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.60000000000006..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.60000000000013..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.400000000000105..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.500000000000107..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.899999999999988..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 24.30000000000005..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.300000000000033..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 38.900000000000205..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.300000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 94.29999999999939..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.400000000000034..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.199999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89eb8>, '-', <__main__.AgrTerminal object at 0x100e840f0>, '#', <__main__.Root object at 0x100e72390>, '-', <__main__.NominalizerTerminal object at 0x100e72048>, '-', <__main__.SemanticTerminal object at 0x100e6bc50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 31.400000000000198
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.599999999999982..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.099999999999984..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.59999999999999..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 94.29999999999939
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 24.30000000000005
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 22.699999999999985
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 28.60000000000003
line done
line done

---------------------

input line #287
input roots: [<__main__.Root object at 0x100e89b70>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 94.89999999999938..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 29.10000000000011..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.500000000000043..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 94.99999999999937..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 39.000000000000206..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.600000000000044..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.799999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cdd8>, '-', <__main__.AgrTerminal object at 0x100e89828>, '#', <__main__.Root object at 0x100e8c860>, '-', <__main__.NominalizerTerminal object at 0x100e8c400>, '-', <__main__.SemanticTerminal object at 0x100e8c828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: li#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 25.500000000000107
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 18.300000000000008
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.999999999999932
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 29.10000000000003
line done
line done

---------------------

input line #288
input roots: [<__main__.Root object at 0x100e8c2e8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 39.10000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 95.09999999999937..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 18.900000000000023..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 19.000000000000025..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e61eb8>, '-', <__main__.AgrTerminal object at 0x100e8c780>, '#', <__main__.Root object at 0x100ebd860>, '-', <__main__.NominalizerTerminal object at 0x100ebde10>, '-', <__main__.SemanticTerminal object at 0x100e5a710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#FOOT-e
full_pronunciation: unoo#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 14.499999999999986
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 39.10000000000021
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 19.000000000000007
line done
line done

---------------------

input line #289
input roots: [<__main__.Root object at 0x100e860b8>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 95.19999999999936..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 29.200000000000113..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.70000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 95.29999999999936..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 39.10000000000021..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.800000000000132..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.500000000000107..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 24.900000000000052..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 95.39999999999935..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 95.49999999999935..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.70000000000006..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 28.900000000000134..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.600000000000108..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.70000000000011..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 15.999999999999988..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.000000000000053..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.500000000000036..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 39.20000000000021..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.300000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 95.59999999999934..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.600000000000037..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.299999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7278>, '-', <__main__.AgrTerminal object at 0x100e86eb8>, '#', <__main__.Root object at 0x100ea7908>, '-', <__main__.NominalizerTerminal object at 0x100ea7a90>, '-', <__main__.SemanticTerminal object at 0x100ea7128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#OFFSPRING-i
full_pronunciation: li#OFFSPRINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 31.800000000000203
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.699999999999982..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.199999999999985..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.699999999999992..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 95.59999999999934
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 28.900000000000134
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.199999999999985
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 29.10000000000003
line done
line done

---------------------

input line #290
input roots: [<__main__.Root object at 0x100ebd320>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 39.30000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.19999999999933..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 19.100000000000026..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 19.200000000000028..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc2b0>, '-', <__main__.AgrTerminal object at 0x100ebda58>, '#', <__main__.Root object at 0x100ecc4e0>, '-', <__main__.NominalizerTerminal object at 0x100ecc470>, '-', <__main__.SemanticTerminal object at 0x100ecc390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: uno#MOUSEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 32.10000000000021
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 23.799999999999986..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.799999999999981..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.299999999999986..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.799999999999994..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 19.200000000000028
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 39.30000000000021
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.4
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 23.89999999999993
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.10000000000003
line done
line done

---------------------

input line #291
input roots: [<__main__.Root object at 0x100ea7198>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 29.300000000000114..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.29999999999933..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.300000000000022..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.800000000000086..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.40000000000007..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.80000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.300000000000104..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.80000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.39999999999932..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.400000000000105..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 23.900000000000087..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 23.90000000000004..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.500000000000107..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.400000000000023..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.00000000000009..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.699999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e868d0>, '-', <__main__.AgrTerminal object at 0x100e7a4a8>, '#', <__main__.Root object at 0x100e73780>, '-', <__main__.NominalizerTerminal object at 0x100e86588>, '-', <__main__.SemanticTerminal object at 0x100e86a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 24.00000000000009
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 29.300000000000114
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 19.599999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.60000000000003
line done
line done

---------------------

input line #292
input roots: [<__main__.Root object at 0x100e86780>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 29.300000000000114..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.49999999999932..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.500000000000025..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.00000000000009..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.50000000000007..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.000000000000043..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.600000000000108..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.900000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.59999999999931..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.70000000000011..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.10000000000009..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.100000000000044..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.80000000000011..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.600000000000026..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.20000000000009..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.799999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89320>, '-', <__main__.AgrTerminal object at 0x100e72048>, '#', <__main__.Root object at 0x100e89c50>, '-', <__main__.NominalizerTerminal object at 0x100e89e10>, '-', <__main__.SemanticTerminal object at 0x100e89b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: unaa#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 13.799999999999986
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 22.900000000000063
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.50000000000003
line done
line done

---------------------

input line #293
input roots: [<__main__.Root object at 0x100e7fe80>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.299999999999986..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea05f8>, '-', <__main__.AgrTerminal object at 0x100e66908>, '#', <__main__.Root object at 0x100ea0dd8>, '-', <__main__.NominalizerTerminal object at 0x100ea0898>, '-', <__main__.SemanticTerminal object at 0x100ea0550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#TOWER-e
full_pronunciation: lo#TOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 96.59999999999931
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 39.80000000000021
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.39999999999993
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.400000000000027
line done
line done

---------------------

input line #294
input roots: [<__main__.Root object at 0x100ea09e8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 29.400000000000116..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.59999999999931..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.700000000000028..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.300000000000093..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.600000000000072..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.200000000000045..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 30.900000000000112..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 22.900000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.6999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 31.000000000000114..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.400000000000095..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.300000000000047..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 31.100000000000115..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.80000000000003..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.500000000000096..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.799999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e781d0>, '-', <__main__.AgrTerminal object at 0x100ea0c88>, '#', <__main__.Root object at 0x100e8ccf8>, '-', <__main__.NominalizerTerminal object at 0x100e8c978>, '-', <__main__.SemanticTerminal object at 0x100e8c128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#KEY-e
full_pronunciation: una#KEYe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 19.599999999999998..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.29999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.699999999999989..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 11.999999999999993..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 31.100000000000115
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 29.400000000000116
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.29999999999993
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 19.20000000000001
line done
line done

---------------------

input line #295
input roots: [<__main__.Root object at 0x100e78860>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 30.000000000000117..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.7999999999993..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 20.90000000000003..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.600000000000097..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.700000000000074..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.40000000000005..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 31.700000000000117..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.000000000000064..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.8999999999993..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 31.800000000000118..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.7000000000001..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.50000000000005..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 31.90000000000012..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.000000000000032..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 24.8000000000001..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.899999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1630>, '-', <__main__.AgrTerminal object at 0x100e78240>, '#', <__main__.Root object at 0x100eb1940>, '-', <__main__.NominalizerTerminal object at 0x100eb1198>, '-', <__main__.SemanticTerminal object at 0x100eb14e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: una#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 29.40000000000017
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 19.7..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.39999999999999..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.799999999999988..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.099999999999993..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 24.8000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 23.000000000000064
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.79999999999993
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 19.80000000000001
line done
line done

---------------------

input line #296
input roots: [<__main__.Root object at 0x100e8c550>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 39.80000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 96.99999999999929..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 19.80000000000003..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 19.90000000000003..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.599999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebda58>, '-', <__main__.AgrTerminal object at 0x100eb1e10>, '#', <__main__.Root object at 0x100ebd8d0>, '-', <__main__.NominalizerTerminal object at 0x100ebd7b8>, '-', <__main__.SemanticTerminal object at 0x100ebd908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: unao#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 13.899999999999986
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 39.80000000000021
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.799999999999986
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.700000000000028
line done
line done

---------------------

input line #297
input roots: [<__main__.Root object at 0x100eb1b00>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 30.10000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.09999999999928..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.100000000000033..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.4000000000001..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.800000000000075..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.60000000000005..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.00000000000012..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.600000000000065..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.19999999999928..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.10000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.500000000000103..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.700000000000053..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.200000000000124..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.200000000000035..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.600000000000104..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.899999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7c88>, '-', <__main__.AgrTerminal object at 0x100ebd630>, '#', <__main__.Root object at 0x100ea7a20>, '-', <__main__.NominalizerTerminal object at 0x100ea7f28>, '-', <__main__.SemanticTerminal object at 0x100ea7438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: una#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 25.600000000000104
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 23.600000000000065
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.29999999999993
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.400000000000027
line done
line done

---------------------

input line #298
input roots: [<__main__.Root object at 0x100ebdc18>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 97.29999999999927..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 30.20000000000012..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 29.500000000000135..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.39999999999927..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 39.80000000000021..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 29.600000000000136..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.80000000000011..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.100000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.49999999999926..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.59999999999926..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.600000000000065..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 29.700000000000138..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 25.900000000000112..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.000000000000114..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.200000000000056..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.70000000000004..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 39.90000000000021..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.40000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.69999999999925..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.80000000000004..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ccc0>, '-', <__main__.AgrTerminal object at 0x100ebddd8>, '#', <__main__.Root object at 0x100e8c278>, '-', <__main__.NominalizerTerminal object at 0x100e8c668>, '-', <__main__.SemanticTerminal object at 0x100e8cd30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: le#FOOTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 97.69999999999925
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.29999999999999
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.699999999999985
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 29.70000000000003
line done
line done

---------------------

input line #299
input roots: [<__main__.Root object at 0x100ebd710>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.399999999999986..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44240>, '-', <__main__.AgrTerminal object at 0x100e8c780>, '#', <__main__.Root object at 0x100ea0c88>, '-', <__main__.NominalizerTerminal object at 0x100ea0470>, '-', <__main__.SemanticTerminal object at 0x100ea0780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: le#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 97.59999999999926
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 16.099999999999987
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.19999999999993
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.80000000000003
line done
line done

---------------------

input line #300
input roots: [<__main__.Root object at 0x100e781d0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.900000000000077..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 14.999999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0fd0>, '-', <__main__.AgrTerminal object at 0x100e445f8>, '#', <__main__.Root object at 0x100ea0c18>, '-', <__main__.NominalizerTerminal object at 0x100ea0a20>, '-', <__main__.SemanticTerminal object at 0x100ea0630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: li#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 20.80000000000004
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 25.200000000000056
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.599999999999984
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.700000000000028
line done
line done

---------------------

input line #301
input roots: [<__main__.Root object at 0x100ea05c0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 97.59999999999926..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 30.30000000000012..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 29.80000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.69999999999925..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.00000000000021..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 29.90000000000014..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.100000000000115..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.200000000000056..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.79999999999924..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.89999999999924..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.700000000000067..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.000000000000142..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.200000000000117..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.300000000000118..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.099999999999987..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.300000000000058..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.80000000000004..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.100000000000215..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.50000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 97.99999999999923..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 20.90000000000004..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.499999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5db70>, '-', <__main__.AgrTerminal object at 0x100ea0dd8>, '#', <__main__.Root object at 0x100e66828>, '-', <__main__.NominalizerTerminal object at 0x100e66668>, '-', <__main__.SemanticTerminal object at 0x100e66a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 97.99999999999923
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 25.300000000000058
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.6
line done
line done

---------------------

input line #302
input roots: [<__main__.Root object at 0x100e566a0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 97.99999999999923..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 30.400000000000123..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.100000000000144..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 98.09999999999923..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.200000000000216..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.200000000000145..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.40000000000012..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.300000000000058..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 98.19999999999922..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 98.29999999999922..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.800000000000068..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.300000000000146..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.50000000000012..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.600000000000122..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.19999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.40000000000006..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.000000000000043..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.30000000000022..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.600000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 98.39999999999921..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.100000000000044..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.599999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1ba8>, '-', <__main__.AgrTerminal object at 0x100e89320>, '#', <__main__.Root object at 0x100eb1940>, '-', <__main__.NominalizerTerminal object at 0x100eb1d30>, '-', <__main__.SemanticTerminal object at 0x100eb1390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lei#GRANDPARENTe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 14.799999999999983
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 30.300000000000146
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.099999999999927
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.5
line done
line done

---------------------

input line #303
input roots: [<__main__.Root object at 0x100eb1668>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 98.4999999999992..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 30.500000000000124..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.700000000000045..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 98.5999999999992..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.40000000000022..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 20.800000000000047..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.799999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86cf8>, '-', <__main__.AgrTerminal object at 0x100eb1ac8>, '#', <__main__.Root object at 0x100e86390>, '-', <__main__.NominalizerTerminal object at 0x100e860b8>, '-', <__main__.SemanticTerminal object at 0x100e86b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: le#TOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 29.900000000000176
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.499999999999993..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.899999999999988..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.199999999999992..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 98.5999999999992
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 20.800000000000047
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 19.7
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 29.900000000000034
line done
line done

---------------------

input line #304
input roots: [<__main__.Root object at 0x100e86c88>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 40.50000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.19999999999919..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.000000000000032..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.100000000000033..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.699999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7208>, '-', <__main__.AgrTerminal object at 0x100e738d0>, '#', <__main__.Root object at 0x100ea79e8>, '-', <__main__.NominalizerTerminal object at 0x100ea7ba8>, '-', <__main__.SemanticTerminal object at 0x100ea79b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 20.100000000000033
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 30.500000000000124
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.999999999999925
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.30000000000001
line done
line done

---------------------

input line #305
input roots: [<__main__.Root object at 0x100ea7eb8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 40.60000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.29999999999919..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.100000000000033..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.200000000000035..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.799999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73a90>, '-', <__main__.AgrTerminal object at 0x100e6bf98>, '#', <__main__.Root object at 0x100eb1ef0>, '-', <__main__.NominalizerTerminal object at 0x100eb1ac8>, '-', <__main__.SemanticTerminal object at 0x100e73ac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: uno#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 32.200000000000124
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 23.900000000000077
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.499999999999982
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.600000000000026
line done
line done

---------------------

input line #306
input roots: [<__main__.Root object at 0x100e72198>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.900000000000077..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.099999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1978>, '-', <__main__.AgrTerminal object at 0x100eb18d0>, '#', <__main__.Root object at 0x100e5db70>, '-', <__main__.NominalizerTerminal object at 0x100e7fe48>, '-', <__main__.SemanticTerminal object at 0x100e7fbe0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_15: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: lo#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 99.29999999999919
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 23.900000000000077
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_1
    triggers: set()
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 14.899999999999983
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.20000000000001
line done
line done

---------------------

input line #307
input roots: [<__main__.Root object at 0x100eb1e10>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 30.500000000000124..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.29999999999919..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.300000000000036..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.600000000000104..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 23.900000000000077..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.800000000000054..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.200000000000124..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.90000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.39999999999918..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.300000000000125..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.700000000000106..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 24.900000000000055..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.40000000000013..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.400000000000038..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.800000000000107..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 13.999999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89588>, '-', <__main__.AgrTerminal object at 0x100eb1dd8>, '#', <__main__.Root object at 0x100e4ada0>, '-', <__main__.NominalizerTerminal object at 0x100e89748>, '-', <__main__.SemanticTerminal object at 0x100e89da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 25.800000000000107
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 23.90000000000007
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 11.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.10000000000001
line done
line done

---------------------

input line #308
input roots: [<__main__.Root object at 0x100e89a20>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.499999999999986..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b38>, '-', <__main__.AgrTerminal object at 0x100e569b0>, '#', <__main__.Root object at 0x100ea0b70>, '-', <__main__.NominalizerTerminal object at 0x100ea0860>, '-', <__main__.SemanticTerminal object at 0x100ea0da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: lo#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 99.39999999999918
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 40.60000000000022
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.899999999999924
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.70000000000003
line done
line done

---------------------

input line #309
input roots: [<__main__.Root object at 0x100ea0f28>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 30.600000000000126..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.39999999999918..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.50000000000004..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.800000000000107..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.000000000000078..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.000000000000057..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.50000000000013..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 23.90000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.49999999999918..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.60000000000013..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 25.90000000000011..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.10000000000006..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 32.70000000000013..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.60000000000004..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.00000000000011..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.099999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c470>, '-', <__main__.AgrTerminal object at 0x100ea0940>, '#', <__main__.Root object at 0x100e8cbe0>, '-', <__main__.NominalizerTerminal object at 0x100e8c0f0>, '-', <__main__.SemanticTerminal object at 0x100e8c358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CHILD-a
full_pronunciation: una#CHILDa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.599999999999994..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.999999999999988..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.299999999999992..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 32.70000000000013
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 30.600000000000126
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 20.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 25.80000000000003
line done
line done

---------------------

input line #310
input roots: [<__main__.Root object at 0x100ea06d8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 99.59999999999917..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 31.200000000000127..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.40000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.69999999999916..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.60000000000022..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.50000000000005..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.899999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd668>, '-', <__main__.AgrTerminal object at 0x100e8ce10>, '#', <__main__.Root object at 0x100ebd470>, '-', <__main__.NominalizerTerminal object at 0x100ebdcf8>, '-', <__main__.SemanticTerminal object at 0x100ebdef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: lee#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 14.899999999999983
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 21.50000000000005
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 20.7
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.5
line done
line done

---------------------

input line #311
input roots: [<__main__.Root object at 0x100e89b38>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 31.30000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.79999999999916..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.700000000000042..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.10000000000011..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.10000000000008..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.20000000000006..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.30000000000013..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 24.00000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.89999999999915..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.400000000000134..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.200000000000113..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.30000000000006..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.500000000000135..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.800000000000043..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.300000000000114..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.199999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92d30>, '-', <__main__.AgrTerminal object at 0x100ebd4e0>, '#', <__main__.Root object at 0x100e92550>, '-', <__main__.NominalizerTerminal object at 0x100e92b70>, '-', <__main__.SemanticTerminal object at 0x100e925f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: unoa#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 14.799999999999985
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 31.30000000000013
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.799999999999923
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 26.40000000000003
line done
line done

---------------------

input line #312
input roots: [<__main__.Root object at 0x100ea77f0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 31.30000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 99.99999999999915..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 21.900000000000045..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.400000000000116..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.20000000000008..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.400000000000063..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.600000000000136..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 24.100000000000072..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 100.09999999999914..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.70000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.500000000000117..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.500000000000064..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.80000000000014..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.000000000000046..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.60000000000012..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.299999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebddd8>, '-', <__main__.AgrTerminal object at 0x100ea7a90>, '#', <__main__.Root object at 0x100e8cd30>, '-', <__main__.NominalizerTerminal object at 0x100e8ceb8>, '-', <__main__.SemanticTerminal object at 0x100ebde80>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 26.60000000000012
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 24.100000000000072
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.69999999999992
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.000000000000007
line done
line done

---------------------

input line #313
input roots: [<__main__.Root object at 0x100ebda90>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 31.40000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 100.19999999999914..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.100000000000048..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.60000000000012..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.300000000000082..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.600000000000065..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 33.90000000000014..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 24.100000000000072..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 100.29999999999913..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 34.00000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.70000000000012..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 25.700000000000067..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 34.10000000000014..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.20000000000005..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.80000000000012..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e781d0>, '-', <__main__.AgrTerminal object at 0x100ebdb70>, '#', <__main__.Root object at 0x100e44d68>, '-', <__main__.NominalizerTerminal object at 0x100e78390>, '-', <__main__.SemanticTerminal object at 0x100e785c0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 30.90000000000019
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.699999999999996..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.099999999999987..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 34.10000000000014
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 25.700000000000067
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 20.599999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 26.500000000000032
line done
line done

---------------------

input line #314
input roots: [<__main__.Root object at 0x100e8ccf8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.599999999999985..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0668>, '-', <__main__.AgrTerminal object at 0x100e784e0>, '#', <__main__.Root object at 0x100ea0710>, '-', <__main__.NominalizerTerminal object at 0x100ea0b00>, '-', <__main__.SemanticTerminal object at 0x100ea0ef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 31.200000000000195
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 21.2..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.799999999999997..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.199999999999987..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 100.29999999999913
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 24.100000000000072
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.59999999999992
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 27.100000000000033
line done
line done

---------------------

input line #315
input roots: [<__main__.Root object at 0x100ea09e8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 40.70000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 100.89999999999912..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.300000000000036..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.400000000000038..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.799999999999985..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89160>, '-', <__main__.AgrTerminal object at 0x100ea0cc0>, '#', <__main__.Root object at 0x100e56a20>, '-', <__main__.NominalizerTerminal object at 0x100e56ef0>, '-', <__main__.SemanticTerminal object at 0x100e56a58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: uni#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 26.80000000000012
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 25.40000000000006
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.39999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 27.600000000000033
line done
line done

---------------------

input line #316
input roots: [<__main__.Root object at 0x100ea0dd8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.699999999999985..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1358>, '-', <__main__.AgrTerminal object at 0x100e89748>, '#', <__main__.Root object at 0x100eb1240>, '-', <__main__.NominalizerTerminal object at 0x100eb16a0>, '-', <__main__.SemanticTerminal object at 0x100eb1da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#KEY-e
full_pronunciation: lo#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 100.89999999999912
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 40.70000000000022
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.09999999999992
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.70000000000003
line done
line done

---------------------

input line #317
input roots: [<__main__.Root object at 0x100eb14a8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.400000000000084..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.199999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86748>, '-', <__main__.AgrTerminal object at 0x100eb12b0>, '#', <__main__.Root object at 0x100e86588>, '-', <__main__.NominalizerTerminal object at 0x100e869b0>, '-', <__main__.SemanticTerminal object at 0x100e86fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CASTLE-o
full_pronunciation: li#CASTLEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 100.79999999999913
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 25.300000000000058
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.99999999999992
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 27.500000000000032
line done
line done

---------------------

input line #318
input roots: [<__main__.Root object at 0x100eb1940>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.799999999999985..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e927f0>, '-', <__main__.AgrTerminal object at 0x100e66828>, '#', <__main__.Root object at 0x100e92940>, '-', <__main__.NominalizerTerminal object at 0x100e92a90>, '-', <__main__.SemanticTerminal object at 0x100e92eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 31.6000000000002
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 16.9..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.299999999999986..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 100.69999999999914
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 26.200000000000067
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.9
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 21.2
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.10000000000001
line done
line done

---------------------

input line #319
input roots: [<__main__.Root object at 0x100e92e48>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 101.29999999999913..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 31.50000000000013..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.50000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 101.39999999999912..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.70000000000022..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.60000000000005..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.899999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86320>, '-', <__main__.AgrTerminal object at 0x100e92e80>, '#', <__main__.Root object at 0x100e49390>, '-', <__main__.NominalizerTerminal object at 0x100e86748>, '-', <__main__.SemanticTerminal object at 0x100e869b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: li#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 101.39999999999912
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 18.600000000000012
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 14.299999999999986
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.5
line done
line done

---------------------

input line #320
input roots: [<__main__.Root object at 0x100e862b0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 31.600000000000133..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 101.39999999999912..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.30000000000005..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.80000000000012..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.500000000000085..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 26.800000000000068..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 34.700000000000145..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 24.700000000000074..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 101.49999999999912..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 34.800000000000146..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 26.900000000000123..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 26.90000000000007..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 34.90000000000015..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.400000000000052..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 27.000000000000124..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.499999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1b38>, '-', <__main__.AgrTerminal object at 0x100e86390>, '#', <__main__.Root object at 0x100eb1f98>, '-', <__main__.NominalizerTerminal object at 0x100eb1860>, '-', <__main__.SemanticTerminal object at 0x100eb1390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 32.000000000000206
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.0..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.299999999999986..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 27.000000000000124
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 24.700000000000074
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 21.7
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 27.500000000000032
line done
line done

---------------------

input line #321
input roots: [<__main__.Root object at 0x100eb1160>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 101.59999999999911..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 31.700000000000134..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.700000000000053..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 101.69999999999911..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.800000000000225..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 21.800000000000054..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 14.999999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56a58>, '-', <__main__.AgrTerminal object at 0x100e73a90>, '#', <__main__.Root object at 0x100e89240>, '-', <__main__.NominalizerTerminal object at 0x100e89320>, '-', <__main__.SemanticTerminal object at 0x100e89c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#MILKCOW-e
full_pronunciation: le#MILKCOWe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 32.30000000000021
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.1..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.399999999999986..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 101.69999999999911
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 21.800000000000054
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 22.2
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 18.5
line done
line done

---------------------

input line #322
input roots: [<__main__.Root object at 0x100e66c18>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 102.2999999999991..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 31.800000000000136..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.300000000000146..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.3999999999991..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 40.900000000000226..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.400000000000148..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.700000000000124..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.300000000000058..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.49999999999909..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.59999999999908..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 25.300000000000075..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.50000000000015..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.800000000000125..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 26.900000000000126..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.29999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.40000000000006..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.200000000000045..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.00000000000023..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.600000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.69999999999908..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.300000000000047..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.699999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0048>, '-', <__main__.AgrTerminal object at 0x100eb1e10>, '#', <__main__.Root object at 0x100ea0c50>, '-', <__main__.NominalizerTerminal object at 0x100ea05c0>, '-', <__main__.SemanticTerminal object at 0x100ea07f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 102.69999999999908
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 30.50000000000015
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.899999999999917
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 19.0
line done
line done

---------------------

input line #323
input roots: [<__main__.Root object at 0x100ea04e0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 102.69999999999908..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 31.900000000000137..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.50000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.79999999999907..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.10000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.60000000000015..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.000000000000128..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.50000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.89999999999907..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 102.99999999999906..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 25.400000000000077..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.700000000000152..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.10000000000013..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.20000000000013..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.39999999999999..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.600000000000062..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.40000000000005..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.20000000000023..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.700000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.09999999999906..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.50000000000005..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.799999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78278>, '-', <__main__.AgrTerminal object at 0x100ea03c8>, '#', <__main__.Root object at 0x100e8c470>, '-', <__main__.NominalizerTerminal object at 0x100e8ca20>, '-', <__main__.SemanticTerminal object at 0x100e8cf98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CASTLE-i
full_pronunciation: lo#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.09999999999906
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 24.500000000000085
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.799999999999915
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 30.600000000000037
line done
line done

---------------------

input line #324
input roots: [<__main__.Root object at 0x100ea0278>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 103.09999999999906..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 32.000000000000135..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 22.400000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.19999999999905..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.30000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 22.500000000000057..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.099999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd550>, '-', <__main__.AgrTerminal object at 0x100e8c128>, '#', <__main__.Root object at 0x100ebdc88>, '-', <__main__.NominalizerTerminal object at 0x100ebddd8>, '-', <__main__.SemanticTerminal object at 0x100ebdef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#PIBLING-e
full_pronunciation: la#PIBLINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.19999999999905
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 26.90000000000007
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.699999999999914
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 30.500000000000036
line done
line done

---------------------

input line #325
input roots: [<__main__.Root object at 0x100e8cd68>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.899999999999984..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83940>, '-', <__main__.AgrTerminal object at 0x100e89588>, '#', <__main__.Root object at 0x100e83550>, '-', <__main__.NominalizerTerminal object at 0x100e835f8>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: lo#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.09999999999906
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 41.30000000000023
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_9
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.599999999999913
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.70000000000003
line done
line done

---------------------

input line #326
input roots: [<__main__.Root object at 0x100ea7ef0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 103.09999999999906..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 32.100000000000136..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.800000000000153..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.19999999999905..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.30000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 30.900000000000155..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.300000000000132..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.700000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.29999999999905..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.39999999999904..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 25.500000000000078..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 31.000000000000156..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.400000000000134..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.500000000000135..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.499999999999993..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.800000000000065..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.60000000000005..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.40000000000023..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 18.800000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 103.49999999999903..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.700000000000053..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.899999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebdc88>, '-', <__main__.AgrTerminal object at 0x100e83e48>, '#', <__main__.Root object at 0x100ebdb70>, '-', <__main__.NominalizerTerminal object at 0x100ebd048>, '-', <__main__.SemanticTerminal object at 0x100ebdef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.89999999999998..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.399999999999988..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.899999999999995..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.299999999999992..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.399999999999991..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.49999999999903
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 18.800000000000015
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.29999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 30.500000000000036
line done
line done

---------------------

input line #327
input roots: [<__main__.Root object at 0x100ebde10>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.500000000000085..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e785c0>, '-', <__main__.AgrTerminal object at 0x100ebd9e8>, '#', <__main__.Root object at 0x100e442b0>, '-', <__main__.NominalizerTerminal object at 0x100e78f28>, '-', <__main__.SemanticTerminal object at 0x100e781d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: la#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.99999999999903
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 32.100000000000136
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_5
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.49999999999991
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.70000000000003
line done
line done

---------------------

input line #328
input roots: [<__main__.Root object at 0x100e5a6a0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 16.9..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 24.600000000000087..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.399999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0390>, '-', <__main__.AgrTerminal object at 0x100ea7080>, '#', <__main__.Root object at 0x100ea09e8>, '-', <__main__.NominalizerTerminal object at 0x100ea0b00>, '-', <__main__.SemanticTerminal object at 0x100ea0ef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 33.90000000000023
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 15.99999999999998..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.49999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 16.999999999999996..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.399999999999991..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.499999999999991..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 103.89999999999904
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 24.600000000000087
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 23.79999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 26.70000000000003
line done
line done

---------------------

input line #329
input roots: [<__main__.Root object at 0x100ea0ba8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 104.49999999999903..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 32.100000000000136..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 22.60000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 104.59999999999903..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.500000000000234..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 22.70000000000006..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.199999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89390>, '-', <__main__.AgrTerminal object at 0x100ea0c18>, '#', <__main__.Root object at 0x100e56860>, '-', <__main__.NominalizerTerminal object at 0x100e560b8>, '-', <__main__.SemanticTerminal object at 0x100e569b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#GRANDPARENT-e
full_pronunciation: le#GRANDPARENTe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 32.80000000000022
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.200000000000003..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.499999999999986..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 104.59999999999903
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 22.70000000000006
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 22.7
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 19.1
line done
line done

---------------------

input line #330
input roots: [<__main__.Root object at 0x100e89748>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 32.20000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.19999999999902..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.500000000000053..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 27.600000000000126..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.200000000000088..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 26.90000000000007..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 35.00000000000015..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 25.60000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.29999999999902..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 35.10000000000015..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 27.700000000000127..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.00000000000007..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.600000000000055..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 27.80000000000013..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.599999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1a20>, '-', <__main__.AgrTerminal object at 0x100ea0668>, '#', <__main__.Root object at 0x100eb1240>, '-', <__main__.NominalizerTerminal object at 0x100eb1da0>, '-', <__main__.SemanticTerminal object at 0x100eb1358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 33.10000000000022
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.300000000000004..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.599999999999985..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 35.20000000000015
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 25.60000000000008
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 23.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 28.200000000000035
line done
line done

---------------------

input line #331
input roots: [<__main__.Root object at 0x100eb1668>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 32.30000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.39999999999901..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.700000000000056..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 27.90000000000013..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.30000000000009..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.100000000000072..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 35.80000000000015..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 26.20000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.499999999999..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 35.900000000000155..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 28.00000000000013..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.200000000000074..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.000000000000156..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.800000000000058..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 28.100000000000133..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.699999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86390>, '-', <__main__.AgrTerminal object at 0x100eb1978>, '#', <__main__.Root object at 0x100e86320>, '-', <__main__.NominalizerTerminal object at 0x100e869b0>, '-', <__main__.SemanticTerminal object at 0x100e862b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 33.400000000000226
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.400000000000006..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.699999999999985..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 28.100000000000133
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 26.20000000000008
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 23.7
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 28.800000000000036
line done
line done

---------------------

input line #332
input roots: [<__main__.Root object at 0x100e72198>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 105.599999999999..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 32.40000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 31.100000000000158..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.699999999999..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.600000000000236..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 31.20000000000016..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.600000000000136..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 25.900000000000066..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.79999999999899..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.89999999999898..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 26.800000000000082..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 31.30000000000016..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.700000000000138..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.80000000000014..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.599999999999994..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.000000000000068..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.800000000000054..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 41.70000000000024..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 19.400000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 105.99999999999898..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 21.900000000000055..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 14.999999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84748>, '-', <__main__.AgrTerminal object at 0x100eb16a0>, '#', <__main__.Root object at 0x100e84940>, '-', <__main__.NominalizerTerminal object at 0x100e847b8>, '-', <__main__.SemanticTerminal object at 0x100e841d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 34.20000000000024
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 105.99999999999898
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 31.30000000000016
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 31.100000000000037
line done
line done

---------------------

input line #333
input roots: [<__main__.Root object at 0x100e86588>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 14.999999999999984..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86748>, '-', <__main__.AgrTerminal object at 0x100e84be0>, '#', <__main__.Root object at 0x100e86fd0>, '-', <__main__.NominalizerTerminal object at 0x100e86390>, '-', <__main__.SemanticTerminal object at 0x100e869b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.500000000000007..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.799999999999985..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 106.49999999999898
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 32.40000000000014
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.9
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 24.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 29.400000000000038
line done
line done

---------------------

input line #334
input roots: [<__main__.Root object at 0x100e86940>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.099999999999984..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1b38>, '-', <__main__.AgrTerminal object at 0x100e86828>, '#', <__main__.Root object at 0x100eb1128>, '-', <__main__.NominalizerTerminal object at 0x100eb12e8>, '-', <__main__.SemanticTerminal object at 0x100eb1160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 33.90000000000023
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.60000000000001..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.899999999999984..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 106.99999999999898
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 26.800000000000082
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 24.7
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 30.00000000000004
line done
line done

---------------------

input line #335
input roots: [<__main__.Root object at 0x100e63ba8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 41.80000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 107.59999999999897..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.50000000000004..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.60000000000004..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.899999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89320>, '-', <__main__.AgrTerminal object at 0x100eb1e10>, '#', <__main__.Root object at 0x100e89240>, '-', <__main__.NominalizerTerminal object at 0x100e894e0>, '-', <__main__.SemanticTerminal object at 0x100e89a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: uno#CASTLEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.59999999999999..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.099999999999998..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.499999999999991..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.59999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 36.000000000000156
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 41.80000000000024
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.29999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 27.300000000000033
line done
line done

---------------------

input line #336
input roots: [<__main__.Root object at 0x100eb11d0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 107.69999999999897..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 33.00000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 31.900000000000162..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 107.79999999999896..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.40000000000024..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 32.00000000000016..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 27.90000000000014..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.10000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 107.89999999999895..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 107.99999999999895..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.400000000000084..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 32.100000000000165..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.000000000000142..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.100000000000144..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.20000000000007..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.000000000000057..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.50000000000024..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 19.500000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 108.09999999999894..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.10000000000006..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.099999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0ba8>, '-', <__main__.AgrTerminal object at 0x100e7fb00>, '#', <__main__.Root object at 0x100ea0e48>, '-', <__main__.NominalizerTerminal object at 0x100ea0390>, '-', <__main__.SemanticTerminal object at 0x100ea0b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_6: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CLOWN-i
full_pronunciation: li#CLOWNi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 34.700000000000244
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.2..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 108.09999999999894
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 32.100000000000165
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_6
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 16.19999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 31.70000000000004
line done
line done

---------------------

input line #337
input roots: [<__main__.Root object at 0x100ea09e8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 42.60000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 108.69999999999894..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.700000000000042..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.800000000000043..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 14.999999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e785c0>, '-', <__main__.AgrTerminal object at 0x100ea0dd8>, '#', <__main__.Root object at 0x100e8c710>, '-', <__main__.NominalizerTerminal object at 0x100e8c470>, '-', <__main__.SemanticTerminal object at 0x100e8c438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 20.800000000000043
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 42.60000000000024
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.79999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.60000000000001
line done
line done

---------------------

input line #338
input roots: [<__main__.Root object at 0x100e44390>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 108.79999999999893..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 33.10000000000014..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.30000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 108.89999999999893..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.60000000000024..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.400000000000063..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.299999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd208>, '-', <__main__.AgrTerminal object at 0x100e8c128>, '#', <__main__.Root object at 0x100ebd6d8>, '-', <__main__.NominalizerTerminal object at 0x100ebd7b8>, '-', <__main__.SemanticTerminal object at 0x100ebd8d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: li#TOWERi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 108.89999999999893
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 19.500000000000018
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.39999999999991
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 32.30000000000004
line done
line done

---------------------

input line #339
input roots: [<__main__.Root object at 0x100ebd550>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.199999999999983..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75d30>, '-', <__main__.AgrTerminal object at 0x100ebd390>, '#', <__main__.Root object at 0x100e756d8>, '-', <__main__.NominalizerTerminal object at 0x100e75b00>, '-', <__main__.SemanticTerminal object at 0x100e75668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: la#CARa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 25.3..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.70000000000001..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.999999999999984..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 108.79999999999893
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 33.10000000000014
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.29999999999991
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 30.60000000000004
line done
line done

---------------------

input line #340
input roots: [<__main__.Root object at 0x100e83e48>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 42.700000000000244..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 109.39999999999893..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.800000000000043..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.900000000000045..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.099999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebda20>, '-', <__main__.AgrTerminal object at 0x100e759b0>, '#', <__main__.Root object at 0x100ebd630>, '-', <__main__.NominalizerTerminal object at 0x100ebd208>, '-', <__main__.SemanticTerminal object at 0x100ebd7b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: una#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 20.900000000000045
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 33.60000000000014
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.79999999999991
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.000000000000036
line done
line done

---------------------

input line #341
input roots: [<__main__.Root object at 0x100ebde80>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 33.60000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 109.49999999999892..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 22.90000000000006..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 28.700000000000134..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.40000000000009..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.300000000000075..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.60000000000016..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.500000000000085..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 109.59999999999891..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.70000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 28.800000000000136..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.400000000000077..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.80000000000016..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.00000000000006..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 28.900000000000137..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.799999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c438>, '-', <__main__.AgrTerminal object at 0x100ebd390>, '#', <__main__.Root object at 0x100e78128>, '-', <__main__.NominalizerTerminal object at 0x100e78f28>, '-', <__main__.SemanticTerminal object at 0x100e785c0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_20: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: une#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 36.80000000000016
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 16.699999999999996
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_20
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 13.399999999999988
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.60000000000001
line done
line done

---------------------

input line #342
input roots: [<__main__.Root object at 0x100ebd908>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.500000000000092..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.499999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea09e8>, '-', <__main__.AgrTerminal object at 0x100e44240>, '#', <__main__.Root object at 0x100ea0748>, '-', <__main__.NominalizerTerminal object at 0x100ea0ba8>, '-', <__main__.SemanticTerminal object at 0x100ea0390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: lo#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 109.59999999999891
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 25.500000000000092
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.699999999999978
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.10000000000004
line done
line done

---------------------

input line #343
input roots: [<__main__.Root object at 0x100ea0320>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.1..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.500000000000092..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.599999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89320>, '-', <__main__.AgrTerminal object at 0x100ea0438>, '#', <__main__.Root object at 0x100e56860>, '-', <__main__.NominalizerTerminal object at 0x100e569b0>, '-', <__main__.SemanticTerminal object at 0x100e566a0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#FOOT-e
full_pronunciation: lo#FOOTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 109.49999999999892
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 42.700000000000244
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.599999999999977
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.00000000000004
line done
line done

---------------------

input line #344
input roots: [<__main__.Root object at 0x100e56ef0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.299999999999983..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1128>, '-', <__main__.AgrTerminal object at 0x100e45d30>, '#', <__main__.Root object at 0x100eb1828>, '-', <__main__.NominalizerTerminal object at 0x100eb1390>, '-', <__main__.SemanticTerminal object at 0x100eb1160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 25.400000000000002..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.80000000000001..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.099999999999984..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 109.39999999999893
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 33.60000000000014
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.900000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.699999999999907
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.00000000000004
line done
line done

---------------------

input line #345
input roots: [<__main__.Root object at 0x100e66be0>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.600000000000094..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.699999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86f98>, '-', <__main__.AgrTerminal object at 0x100eb1eb8>, '#', <__main__.Root object at 0x100e86eb8>, '-', <__main__.NominalizerTerminal object at 0x100e86240>, '-', <__main__.SemanticTerminal object at 0x100e86400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked la_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: laa#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 15.299999999999983
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 34.10000000000014
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.199999999999907
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.50000000000004
line done
line done

---------------------

input line #346
input roots: [<__main__.Root object at 0x100e86c18>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 109.99999999999892..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 34.10000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 32.700000000000166..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 110.09999999999891..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.700000000000244..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 32.80000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.200000000000145..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.30000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 110.19999999999891..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 110.2999999999989..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.600000000000087..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 32.90000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.300000000000146..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.400000000000148..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.699999999999996..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.400000000000073..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.20000000000006..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.800000000000246..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 19.500000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 110.3999999999989..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.30000000000006..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.199999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7eda0>, '-', <__main__.AgrTerminal object at 0x100ea0630>, '#', <__main__.Root object at 0x100e7e780>, '-', <__main__.NominalizerTerminal object at 0x100e7ec50>, '-', <__main__.SemanticTerminal object at 0x100e7e438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 16.799999999999983..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.699999999999992..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.3..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.59999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.69999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 110.3999999999989
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 19.500000000000018
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.400000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.499999999999975
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 32.30000000000004
line done
line done

---------------------

input line #347
input roots: [<__main__.Root object at 0x100e84f28>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.700000000000095..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.799999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86780>, '-', <__main__.AgrTerminal object at 0x100e7ecf8>, '#', <__main__.Root object at 0x100e86fd0>, '-', <__main__.NominalizerTerminal object at 0x100e86828>, '-', <__main__.SemanticTerminal object at 0x100e860b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: loi#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 15.799999999999981
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.400000000000073
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.099999999999905
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.400000000000038
line done
line done

---------------------

input line #348
input roots: [<__main__.Root object at 0x100e92a90>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 110.99999999999889..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 34.200000000000145..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.00000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.09999999999889..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 42.90000000000025..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.10000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.50000000000015..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.400000000000073..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.19999999999888..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.29999999999887..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.700000000000088..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.20000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.60000000000015..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.700000000000152..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.799999999999997..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.500000000000075..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.400000000000063..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.00000000000025..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.10000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.39999999999887..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.500000000000064..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.299999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1358>, '-', <__main__.AgrTerminal object at 0x100e7ec88>, '#', <__main__.Root object at 0x100eb1e80>, '-', <__main__.NominalizerTerminal object at 0x100eb16d8>, '-', <__main__.SemanticTerminal object at 0x100eb1ef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#CLOWN-i
full_pronunciation: li#CLOWNe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 111.39999999999887
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.500000000000075
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.999999999999975
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 19.6
line done
line done

---------------------

input line #349
input roots: [<__main__.Root object at 0x100eb1668>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 34.300000000000146..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.39999999999887..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.100000000000062..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.00000000000014..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.800000000000097..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.500000000000078..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.80000000000016..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.80000000000009..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.49999999999886..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 36.90000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.10000000000014..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.60000000000008..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.00000000000016..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.200000000000063..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.20000000000014..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.899999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89588>, '-', <__main__.AgrTerminal object at 0x100e7e4a8>, '#', <__main__.Root object at 0x100e894e0>, '-', <__main__.NominalizerTerminal object at 0x100e89a20>, '-', <__main__.SemanticTerminal object at 0x100e89400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: uno#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 37.00000000000016
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 43.00000000000025
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.999999999999904
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.70000000000001
line done
line done

---------------------

input line #350
input roots: [<__main__.Root object at 0x100e560b8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 111.59999999999886..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 34.40000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.500000000000064..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.69999999999885..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.00000000000025..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.600000000000065..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.39999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0908>, '-', <__main__.AgrTerminal object at 0x100e66828>, '#', <__main__.Root object at 0x100ea0b38>, '-', <__main__.NominalizerTerminal object at 0x100ea09b0>, '-', <__main__.SemanticTerminal object at 0x100ea0c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#FROG-e
full_pronunciation: le#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 111.69999999999885
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 23.600000000000065
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 25.400000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 32.90000000000004
line done
line done

---------------------

input line #351
input roots: [<__main__.Root object at 0x100ea0320>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 111.69999999999885..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 34.50000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.300000000000175..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.79999999999885..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.10000000000025..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.400000000000176..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.800000000000153..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.500000000000075..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.89999999999884..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.99999999999883..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 27.90000000000009..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.50000000000018..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 28.900000000000155..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.000000000000156..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 16.9..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.600000000000076..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.600000000000065..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.20000000000025..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.20000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 112.09999999999883..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.700000000000067..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.39999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e612e8>, '-', <__main__.AgrTerminal object at 0x100ea0208>, '#', <__main__.Root object at 0x100e8c438>, '-', <__main__.NominalizerTerminal object at 0x100e8c668>, '-', <__main__.SemanticTerminal object at 0x100e8cf98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: le#BOOKi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 112.09999999999883
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.19999999999999
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.899999999999974
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 32.90000000000004
line done
line done

---------------------

input line #352
input roots: [<__main__.Root object at 0x100e89320>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 25.900000000000098..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.799999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd048>, '-', <__main__.AgrTerminal object at 0x100e8ce80>, '#', <__main__.Root object at 0x100ebd588>, '-', <__main__.NominalizerTerminal object at 0x100ebd668>, '-', <__main__.SemanticTerminal object at 0x100ebdc88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#FOOT-e
full_pronunciation: la#FOOTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 111.99999999999883
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 34.50000000000015
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.899999999999903
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.20000000000004
line done
line done

---------------------

input line #353
input roots: [<__main__.Root object at 0x100ebd630>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.0000000000001..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.89999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b390>, '-', <__main__.AgrTerminal object at 0x100ebd9e8>, '#', <__main__.Root object at 0x100e9b208>, '-', <__main__.NominalizerTerminal object at 0x100e9b978>, '-', <__main__.SemanticTerminal object at 0x100e9b9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CHILD-o
full_pronunciation: li#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 111.89999999999884
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.600000000000076
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.7999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.20000000000004
line done
line done

---------------------

input line #354
input roots: [<__main__.Root object at 0x100ebdd30>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 34.50000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.89999999999884..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.300000000000065..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.300000000000143..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.1000000000001..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.70000000000008..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.00000000000016..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 28.000000000000092..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 111.99999999999883..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.100000000000165..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.400000000000144..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.800000000000082..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.200000000000166..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.400000000000066..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.500000000000146..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 14.999999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd6d8>, '-', <__main__.AgrTerminal object at 0x100e75c50>, '#', <__main__.Root object at 0x100e8c4a8>, '-', <__main__.NominalizerTerminal object at 0x100e8c828>, '-', <__main__.SemanticTerminal object at 0x100e8ca58>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 25.400000000000002..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 17.900000000000013..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.199999999999983..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 37.200000000000166
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 34.50000000000015
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.6999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.400000000000038
line done
line done

---------------------

input line #355
input roots: [<__main__.Root object at 0x100ebdcf8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 43.30000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 112.09999999999883..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 20.900000000000045..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.000000000000046..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.199999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '-', <__main__.AgrTerminal object at 0x100e8cf98>, '#', <__main__.Root object at 0x100ea02b0>, '-', <__main__.NominalizerTerminal object at 0x100ea05f8>, '-', <__main__.SemanticTerminal object at 0x100e5a710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: una#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 37.700000000000166
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.00000000000015
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.799999999999972
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.900000000000038
line done
line done

---------------------

input line #356
input roots: [<__main__.Root object at 0x100e75668>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.299999999999983..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0eb8>, '-', <__main__.AgrTerminal object at 0x100e44240>, '#', <__main__.Root object at 0x100ea0e48>, '-', <__main__.NominalizerTerminal object at 0x100ea0c50>, '-', <__main__.SemanticTerminal object at 0x100ea0fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 35.20000000000025
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.000000000000014..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.299999999999983..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 112.09999999999883
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 28.000000000000092
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 25.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 20.80000000000001
line done
line done

---------------------

input line #357
input roots: [<__main__.Root object at 0x100ea0630>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 112.69999999999882..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.00000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.600000000000065..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 112.79999999999882..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.400000000000254..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.700000000000067..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.49999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e66668>, '-', <__main__.AgrTerminal object at 0x100ea0048>, '#', <__main__.Root object at 0x100e7fbe0>, '-', <__main__.NominalizerTerminal object at 0x100e66be0>, '-', <__main__.SemanticTerminal object at 0x100e666d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.399999999999983..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 112.79999999999882
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.09999999999999
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 19.700000000000003
line done
line done

---------------------

input line #358
input roots: [<__main__.Root object at 0x100ea0c88>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 113.39999999999881..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.10000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.60000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 113.4999999999988..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.500000000000256..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.70000000000018..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.100000000000158..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.600000000000076..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 113.5999999999988..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 113.6999999999988..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 28.600000000000094..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 33.80000000000018..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.20000000000016..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.30000000000016..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.700000000000077..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.800000000000068..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.60000000000026..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.300000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 113.79999999999879..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.90000000000007..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.49999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1d30>, '-', <__main__.AgrTerminal object at 0x100e66828>, '#', <__main__.Root object at 0x100eb1198>, '-', <__main__.NominalizerTerminal object at 0x100eb1b70>, '-', <__main__.SemanticTerminal object at 0x100eb1240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 36.30000000000027
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 24.799999999999972..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 16.899999999999984..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.799999999999994..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.400000000000002..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.69999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.79999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 113.79999999999879
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 33.80000000000018
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 13.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.1999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 32.90000000000004
line done
line done

---------------------

input line #359
input roots: [<__main__.Root object at 0x100eb1be0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 114.39999999999878..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.500000000000068..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.600000000000147..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.200000000000102..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 27.900000000000084..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.700000000000166..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 28.700000000000095..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 114.49999999999878..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.80000000000017..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.70000000000015..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 28.000000000000085..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.90000000000017..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.60000000000007..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.80000000000015..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.099999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92160>, '-', <__main__.AgrTerminal object at 0x100eb1e80>, '#', <__main__.Root object at 0x100e84668>, '-', <__main__.NominalizerTerminal object at 0x100e849b0>, '-', <__main__.SemanticTerminal object at 0x100e92c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: unoa#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 15.199999999999983
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 28.700000000000095
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.6999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.20000000000004
line done
line done

---------------------

input line #360
input roots: [<__main__.Root object at 0x100e92898>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.300000000000104..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 15.99999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b9b0>, '-', <__main__.AgrTerminal object at 0x100e92748>, '#', <__main__.Root object at 0x100e9bb70>, '-', <__main__.NominalizerTerminal object at 0x100e9bba8>, '-', <__main__.SemanticTerminal object at 0x100e9b940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_15: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: lo#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 22.90000000000007
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 43.60000000000026
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 15.39999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 21.30000000000001
line done
line done

---------------------

input line #361
input roots: [<__main__.Root object at 0x100e9bac8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 43.60000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 114.59999999999877..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.100000000000048..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.20000000000005..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.199999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84a20>, '-', <__main__.AgrTerminal object at 0x100e9be48>, '#', <__main__.Root object at 0x100e86400>, '-', <__main__.NominalizerTerminal object at 0x100e92a20>, '-', <__main__.SemanticTerminal object at 0x100e92160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: una#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 37.90000000000017
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.20000000000015
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.5999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.900000000000038
line done
line done

---------------------

input line #362
input roots: [<__main__.Root object at 0x100e7ec88>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 114.69999999999877..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.800000000000068..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 114.79999999999876..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.70000000000026..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 23.90000000000007..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.59999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1278>, '-', <__main__.AgrTerminal object at 0x100e862b0>, '#', <__main__.Root object at 0x100eb1240>, '-', <__main__.NominalizerTerminal object at 0x100eb1b70>, '-', <__main__.SemanticTerminal object at 0x100eb1be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: la#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 29.30000000000016
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 28.000000000000085
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.499999999999897
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 20.300000000000004
line done
line done

---------------------

input line #363
input roots: [<__main__.Root object at 0x100e9bcc0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.400000000000105..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e662b0>, '-', <__main__.AgrTerminal object at 0x100eb12e8>, '#', <__main__.Root object at 0x100e56e10>, '-', <__main__.NominalizerTerminal object at 0x100e56710>, '-', <__main__.SemanticTerminal object at 0x100e560b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: li#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 114.79999999999876
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.700000000000077
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.399999999999896
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.800000000000036
line done
line done

---------------------

input line #364
input roots: [<__main__.Root object at 0x100eb1d30>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 114.79999999999876..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.30000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.00000000000007..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 114.89999999999876..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 43.80000000000026..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.100000000000072..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.69999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0cc0>, '-', <__main__.AgrTerminal object at 0x100e89cc0>, '#', <__main__.Root object at 0x100ea07b8>, '-', <__main__.NominalizerTerminal object at 0x100ea0278>, '-', <__main__.SemanticTerminal object at 0x100ea0ac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CAR-e
full_pronunciation: le#CARe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.100000000000016..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.899999999999979..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.499999999999982..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 114.89999999999876
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.59999999999999
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 25.900000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 20.300000000000004
line done
line done

---------------------

input line #365
input roots: [<__main__.Root object at 0x100ea0390>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 43.90000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 115.49999999999875..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.30000000000005..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.400000000000052..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44f98>, '-', <__main__.AgrTerminal object at 0x100ea05c0>, '#', <__main__.Root object at 0x100e78048>, '-', <__main__.NominalizerTerminal object at 0x100e78278>, '-', <__main__.SemanticTerminal object at 0x100e784e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 21.400000000000052
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 43.90000000000026
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.700000000000035
line done
line done

---------------------

input line #366
input roots: [<__main__.Root object at 0x100ea0780>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.500000000000107..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebda20>, '-', <__main__.AgrTerminal object at 0x100e44d68>, '#', <__main__.Root object at 0x100ebd208>, '-', <__main__.NominalizerTerminal object at 0x100ebd8d0>, '-', <__main__.SemanticTerminal object at 0x100ebd6d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 16.999999999999986..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.899999999999995..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.500000000000004..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.79999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.89999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 115.49999999999875
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 43.80000000000026
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 13.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.799999999999972
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 21.30000000000001
line done
line done

---------------------

input line #367
input roots: [<__main__.Root object at 0x100e8c128>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.399999999999983..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc4e0>, '-', <__main__.AgrTerminal object at 0x100ebde10>, '#', <__main__.Root object at 0x100ecc1d0>, '-', <__main__.NominalizerTerminal object at 0x100ecc240>, '-', <__main__.SemanticTerminal object at 0x100ecc390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 115.99999999999875
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.30000000000015
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_6
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 26.400000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.500000000000043
line done
line done

---------------------

input line #368
input roots: [<__main__.Root object at 0x100e75278>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.499999999999982..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c710>, '-', <__main__.AgrTerminal object at 0x100e75550>, '#', <__main__.Root object at 0x100e8c9b0>, '-', <__main__.NominalizerTerminal object at 0x100e8c668>, '-', <__main__.SemanticTerminal object at 0x100e8cb38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CHILD to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 36.200000000000266
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.200000000000017..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 15.999999999999979..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.599999999999982..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 115.89999999999876
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 28.600000000000094
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 26.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 31.800000000000036
line done
line done

---------------------

input line #369
input roots: [<__main__.Root object at 0x100e8c400>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 44.40000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 116.49999999999875..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.400000000000052..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.500000000000053..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.399999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0a20>, '-', <__main__.AgrTerminal object at 0x100e8c860>, '#', <__main__.Root object at 0x100ea0ba8>, '-', <__main__.NominalizerTerminal object at 0x100ea07f0>, '-', <__main__.SemanticTerminal object at 0x100ea0438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 29.80000000000015
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.20000000000015
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.299999999999894
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.500000000000043
line done
line done

---------------------

input line #370
input roots: [<__main__.Root object at 0x100e8ce80>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 116.59999999999874..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.200000000000074..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 116.69999999999874..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 44.50000000000026..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.300000000000075..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.79999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'BALL_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'BALL_1', 'BALL_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89748>, '-', <__main__.AgrTerminal object at 0x100ea0860>, '#', <__main__.Root object at 0x100e89240>, '-', <__main__.NominalizerTerminal object at 0x100e89320>, '-', <__main__.SemanticTerminal object at 0x100e89e10>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_10: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#BALL-e
full_pronunciation: le#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 116.69999999999874
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 17.0
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_10
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 18.200000000000017
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.40000000000004
line done
line done

---------------------

input line #371
input roots: [<__main__.Root object at 0x100ea0048>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 35.30000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 116.69999999999874..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.70000000000007..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.80000000000015..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.600000000000108..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 28.000000000000085..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 37.90000000000017..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.200000000000095..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 116.79999999999873..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.00000000000017..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 29.90000000000015..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 28.100000000000087..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.10000000000017..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.80000000000007..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.000000000000153..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.199999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1630>, '-', <__main__.AgrTerminal object at 0x100e89470>, '#', <__main__.Root object at 0x100eb1668>, '-', <__main__.NominalizerTerminal object at 0x100eb1d68>, '-', <__main__.SemanticTerminal object at 0x100eb12e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 30.000000000000153
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.30000000000015
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.199999999999893
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 21.80000000000001
line done
line done

---------------------

input line #372
input roots: [<__main__.Root object at 0x100e66c18>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 17.900000000000013..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.70000000000011..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e739b0>, '-', <__main__.AgrTerminal object at 0x100eb1d30>, '#', <__main__.Root object at 0x100e86940>, '-', <__main__.NominalizerTerminal object at 0x100e862b0>, '-', <__main__.SemanticTerminal object at 0x100e73a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#OFFSPRING-o
full_pronunciation: la#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 22.800000000000068
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.20000000000015
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.299999999999972
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.500000000000043
line done
line done

---------------------

input line #373
input roots: [<__main__.Root object at 0x100e785c0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 116.89999999999873..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.40000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 116.99999999999872..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 44.600000000000264..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.500000000000185..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.30000000000016..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.700000000000077..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 117.09999999999872..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 117.19999999999871..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.300000000000097..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.600000000000186..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.400000000000162..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.500000000000163..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.80000000000008..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.800000000000068..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 44.700000000000266..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.400000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 117.2999999999987..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 22.90000000000007..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.59999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ea90>, '-', <__main__.AgrTerminal object at 0x100e86eb8>, '#', <__main__.Root object at 0x100e9bbe0>, '-', <__main__.NominalizerTerminal object at 0x100e9b7f0>, '-', <__main__.SemanticTerminal object at 0x100e9b3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lei#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 15.79999999999998
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.80000000000008
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.09999999999989
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.40000000000004
line done
line done

---------------------

input line #374
input roots: [<__main__.Root object at 0x100eb1908>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 117.3999999999987..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.30000000000015..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.400000000000077..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 117.49999999999869..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 44.80000000000027..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 24.500000000000078..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.79999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc780>, '-', <__main__.AgrTerminal object at 0x100e7ea20>, '#', <__main__.Root object at 0x100ecc9b0>, '-', <__main__.NominalizerTerminal object at 0x100ecc940>, '-', <__main__.SemanticTerminal object at 0x100ecc860>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CAR-e
full_pronunciation: le#CARe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 36.70000000000027
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 26.900000000000002..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.200000000000017..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.699999999999982..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 117.49999999999869
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 24.500000000000078
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_2
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 24.99999999999989
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 21.000000000000007
line done
line done

---------------------

input line #375
input roots: [<__main__.Root object at 0x100ecc588>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 35.400000000000155..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.09999999999869..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 23.900000000000073..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.000000000000153..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.80000000000011..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 28.200000000000088..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.20000000000017..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.400000000000098..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.19999999999868..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.300000000000175..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.100000000000154..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 28.30000000000009..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.400000000000176..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.000000000000075..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.200000000000156..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.299999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b5c0>, '-', <__main__.AgrTerminal object at 0x100e7fe48>, '#', <__main__.Root object at 0x100e9b358>, '-', <__main__.NominalizerTerminal object at 0x100e9b748>, '-', <__main__.SemanticTerminal object at 0x100e9b828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 37.00000000000028
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 27.000000000000004..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.30000000000002..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.799999999999981..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 30.200000000000156
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 28.30000000000009
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.49999999999989
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.50000000000004
line done
line done

---------------------

input line #376
input roots: [<__main__.Root object at 0x100e9b978>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.000000000000014..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.900000000000112..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e445c0>, '-', <__main__.AgrTerminal object at 0x100e9b4e0>, '#', <__main__.Root object at 0x100e757f0>, '-', <__main__.NominalizerTerminal object at 0x100e75b00>, '-', <__main__.SemanticTerminal object at 0x100e49278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: li#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 118.19999999999868
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 26.700000000000077
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.99999999999989
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.00000000000004
line done
line done

---------------------

input line #377
input roots: [<__main__.Root object at 0x100e7e668>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 118.19999999999868..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.500000000000156..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.70000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.29999999999868..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 44.90000000000027..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.80000000000019..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.600000000000165..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.700000000000077..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.39999999999867..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.49999999999866..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.5000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 34.90000000000019..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.700000000000166..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.800000000000168..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.1..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.80000000000008..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.00000000000007..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.00000000000027..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.500000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.59999999999866..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.100000000000072..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.69999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a710>, '-', <__main__.AgrTerminal object at 0x100e9bfd0>, '#', <__main__.Root object at 0x100e835f8>, '-', <__main__.NominalizerTerminal object at 0x100e83278>, '-', <__main__.SemanticTerminal object at 0x100e5a3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CASTLE-i
full_pronunciation: lo#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 118.59999999999866
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 26.900000000000112
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.19999999999997
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.40000000000004
line done
line done

---------------------

input line #378
input roots: [<__main__.Root object at 0x100e44390>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 118.59999999999866..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.60000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.00000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.69999999999865..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.10000000000027..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.10000000000019..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 29.90000000000017..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 26.90000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.79999999999865..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.89999999999864..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.6000000000001..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.200000000000195..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.00000000000017..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.100000000000172..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.200000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 27.00000000000008..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.200000000000074..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.20000000000027..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.600000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.99999999999864..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.300000000000075..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.79999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0588>, '-', <__main__.AgrTerminal object at 0x100e84940>, '#', <__main__.Root object at 0x100ea0668>, '-', <__main__.NominalizerTerminal object at 0x100ea0470>, '-', <__main__.SemanticTerminal object at 0x100ea0b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: li#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 118.99999999999864
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 35.200000000000195
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.89999999999989
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 21.500000000000007
line done
line done

---------------------

input line #379
input roots: [<__main__.Root object at 0x100ea0978>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.599999999999982..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92940>, '-', <__main__.AgrTerminal object at 0x100ea0748>, '#', <__main__.Root object at 0x100e92be0>, '-', <__main__.NominalizerTerminal object at 0x100e92cf8>, '-', <__main__.SemanticTerminal object at 0x100e92860>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: lo#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 118.89999999999864
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 45.20000000000027
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.799999999999887
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 21.80000000000001
line done
line done

---------------------

input line #380
input roots: [<__main__.Root object at 0x100e75c50>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 118.89999999999864..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.70000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.200000000000195..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 118.99999999999864..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.20000000000027..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.300000000000196..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.200000000000173..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 27.100000000000083..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 119.09999999999863..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 119.19999999999862..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.700000000000102..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.4000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.300000000000175..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.400000000000176..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.300000000000004..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 27.200000000000085..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.400000000000077..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.300000000000274..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.700000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 119.29999999999862..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.500000000000078..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.899999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89390>, '-', <__main__.AgrTerminal object at 0x100e92128>, '#', <__main__.Root object at 0x100e89c50>, '-', <__main__.NominalizerTerminal object at 0x100e89748>, '-', <__main__.SemanticTerminal object at 0x100e89320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: li#OFFSPRINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 37.80000000000029
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.19999999999997..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.099999999999987..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.999999999999996..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.600000000000005..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.89999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 12.99999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 119.29999999999862
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 27.200000000000085
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.500000000000002
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 25.699999999999886
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.50000000000004
line done
line done

---------------------

input line #381
input roots: [<__main__.Root object at 0x100ea04a8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 119.89999999999861..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.80000000000016..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.10000000000008..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 119.99999999999861..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.400000000000276..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.20000000000008..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.899999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'GRANDPARENT_7', 'null_11', 'GRANDPARENT_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86048>, '-', <__main__.AgrTerminal object at 0x100e92358>, '#', <__main__.Root object at 0x100e66c18>, '-', <__main__.NominalizerTerminal object at 0x100e72160>, '-', <__main__.SemanticTerminal object at 0x100e72198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#GRANDPARENT-e
full_pronunciation: la#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 119.99999999999861
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 28.80000000000009
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.000000000000004
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 34.00000000000004
line done
line done

---------------------

input line #382
input roots: [<__main__.Root object at 0x100e72048>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.699999999999982..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89828>, '-', <__main__.AgrTerminal object at 0x100e723c8>, '#', <__main__.Root object at 0x100e78278>, '-', <__main__.NominalizerTerminal object at 0x100e78390>, '-', <__main__.SemanticTerminal object at 0x100e78048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 37.500000000000284
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 27.000000000000004..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.40000000000002..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.299999999999983..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.89999999999998..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 119.89999999999861
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 28.700000000000088
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 26.199999999999886
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 21.80000000000001
line done
line done

---------------------

input line #383
input roots: [<__main__.Root object at 0x100e89b00>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.100000000000016..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 26.900000000000112..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92898>, '-', <__main__.AgrTerminal object at 0x100e89588>, '#', <__main__.Root object at 0x100e6ec88>, '-', <__main__.NominalizerTerminal object at 0x100e65940>, '-', <__main__.SemanticTerminal object at 0x100e92c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CLOWN-o
full_pronunciation: lo#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 120.39999999999861
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 45.400000000000276
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.19999999999997
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.90000000000004
line done
line done

---------------------

input line #384
input roots: [<__main__.Root object at 0x100e92eb8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.799999999999981..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0940>, '-', <__main__.AgrTerminal object at 0x100e92e80>, '#', <__main__.Root object at 0x100ea0ac8>, '-', <__main__.NominalizerTerminal object at 0x100ea0240>, '-', <__main__.SemanticTerminal object at 0x100ea02b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: lo#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 120.29999999999862
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 45.300000000000274
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 26.699999999999886
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.90000000000004
line done
line done

---------------------

input line #385
input roots: [<__main__.Root object at 0x100ea06d8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 120.29999999999862..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.90000000000016..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.300000000000082..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.39999999999861..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.300000000000274..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.400000000000084..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 15.999999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e842b0>, '-', <__main__.AgrTerminal object at 0x100ea0cc0>, '#', <__main__.Root object at 0x100e84a90>, '-', <__main__.NominalizerTerminal object at 0x100e840f0>, '-', <__main__.SemanticTerminal object at 0x100e841d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_16: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#FROG-e
full_pronunciation: le#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 120.39999999999861
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 16.09999999999999
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_16
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 14.799999999999983
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.90000000000004
line done
line done

---------------------

input line #386
input roots: [<__main__.Root object at 0x100e84a20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 45.400000000000276..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.39999999999861..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.600000000000055..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.700000000000056..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.499999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e449b0>, '-', <__main__.AgrTerminal object at 0x100e84c50>, '#', <__main__.Root object at 0x100e7ec88>, '-', <__main__.NominalizerTerminal object at 0x100e63ba8>, '-', <__main__.SemanticTerminal object at 0x100e5e978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: una#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 21.700000000000056
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 35.90000000000016
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.09999999999997
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.700000000000045
line done
line done

---------------------

input line #387
input roots: [<__main__.Root object at 0x100e44390>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 120.49999999999861..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 35.90000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.5000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.5999999999986..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.50000000000028..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.6000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.500000000000178..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 27.800000000000086..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.6999999999986..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.79999999999859..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.800000000000104..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.7000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.60000000000018..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.70000000000018..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.400000000000006..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 27.900000000000087..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.60000000000008..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 45.60000000000028..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.80000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 120.89999999999858..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.70000000000008..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 15.999999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b2e8>, '-', <__main__.AgrTerminal object at 0x100e44f98>, '#', <__main__.Root object at 0x100e9beb8>, '-', <__main__.NominalizerTerminal object at 0x100e9b940>, '-', <__main__.SemanticTerminal object at 0x100e9be10>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 38.300000000000296
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.09999999999997..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.19999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.099999999999998..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.700000000000006..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 12.99999999999999..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.099999999999989..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 120.89999999999858
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 27.900000000000087
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 26.599999999999884
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 33.90000000000004
line done
line done

---------------------

input line #388
input roots: [<__main__.Root object at 0x100e9ba90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.200000000000017..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.000000000000114..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e739b0>, '-', <__main__.AgrTerminal object at 0x100e56710>, '#', <__main__.Root object at 0x100eb1128>, '-', <__main__.NominalizerTerminal object at 0x100eb14e0>, '-', <__main__.SemanticTerminal object at 0x100e73780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: li#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 121.39999999999858
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 28.400000000000087
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 14.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.099999999999884
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.400000000000013
line done
line done

---------------------

input line #389
input roots: [<__main__.Root object at 0x100e9b6d8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 36.00000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.39999999999858..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.100000000000076..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.800000000000157..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.100000000000115..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.30000000000009..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.50000000000018..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.900000000000105..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.49999999999858..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.60000000000018..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 30.90000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.40000000000009..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.70000000000018..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.200000000000077..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.00000000000016..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.39999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bba8>, '-', <__main__.AgrTerminal object at 0x100e73780>, '#', <__main__.Root object at 0x100e9b4e0>, '-', <__main__.NominalizerTerminal object at 0x100e9b080>, '-', <__main__.SemanticTerminal object at 0x100e9b978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#TOWER-e
full_pronunciation: una#TOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 38.70000000000018
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 29.900000000000105
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.000000000000004
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.80000000000004
line done
line done

---------------------

input line #390
input roots: [<__main__.Root object at 0x100e3ec88>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 45.70000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.59999999999857..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.700000000000056..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 21.800000000000058..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.599999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44550>, '-', <__main__.AgrTerminal object at 0x100e667b8>, '#', <__main__.Root object at 0x100e75550>, '-', <__main__.NominalizerTerminal object at 0x100e75b00>, '-', <__main__.SemanticTerminal object at 0x100e75a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uno#OFFSPRINGo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 38.7000000000003
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.19999999999997..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.29999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.2..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.800000000000008..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.099999999999989..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.199999999999989..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 21.800000000000058
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 45.70000000000028
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 26.999999999999883
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 28.700000000000045
line done
line done

---------------------

input line #391
input roots: [<__main__.Root object at 0x100e9b240>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 36.100000000000165..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.69999999999857..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.30000000000008..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.10000000000016..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.200000000000117..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.500000000000092..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.70000000000018..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 29.900000000000105..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.79999999999856..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.80000000000018..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.200000000000163..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.600000000000094..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.90000000000018..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.40000000000008..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.300000000000164..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.49999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e45d30>, '-', <__main__.AgrTerminal object at 0x100e445c0>, '#', <__main__.Root object at 0x100e83278>, '-', <__main__.NominalizerTerminal object at 0x100e83128>, '-', <__main__.SemanticTerminal object at 0x100e5a6a0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: unoa#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 15.599999999999982
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 29.600000000000094
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 26.900000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.500000000000014
line done
line done

---------------------

input line #392
input roots: [<__main__.Root object at 0x100e75198>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 46.30000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.89999999999856..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.40000000000006..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.50000000000006..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.599999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0240>, '-', <__main__.AgrTerminal object at 0x100e84a90>, '#', <__main__.Root object at 0x100ea0fd0>, '-', <__main__.NominalizerTerminal object at 0x100ea0ba8>, '-', <__main__.SemanticTerminal object at 0x100ea0940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uni#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 38.90000000000018
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 28.300000000000086
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.19999999999997
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 29.300000000000047
line done
line done

---------------------

input line #393
input roots: [<__main__.Root object at 0x100ea0eb8>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.30000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.300000000000118..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92c88>, '-', <__main__.AgrTerminal object at 0x100ea0780>, '#', <__main__.Root object at 0x100e92a20>, '-', <__main__.NominalizerTerminal object at 0x100e92cc0>, '-', <__main__.SemanticTerminal object at 0x100e92d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 121.89999999999856
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.100000000000165
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.09999999999997
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 29.300000000000047
line done
line done

---------------------

input line #394
input roots: [<__main__.Root object at 0x100e5a3c8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 46.40000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 121.89999999999856..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.600000000000062..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.700000000000063..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.699999999999982..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89eb8>, '-', <__main__.AgrTerminal object at 0x100e927f0>, '#', <__main__.Root object at 0x100e89da0>, '-', <__main__.NominalizerTerminal object at 0x100e89160>, '-', <__main__.SemanticTerminal object at 0x100e89828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 38.80000000000018
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.00000000000016
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.999999999999968
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.70000000000004
line done
line done

---------------------

input line #395
input roots: [<__main__.Root object at 0x100e92780>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 121.99999999999855..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.00000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.8000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.09999999999854..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 46.500000000000284..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 35.900000000000205..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.800000000000182..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.300000000000086..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.19999999999854..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.29999999999853..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 30.000000000000107..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 36.000000000000206..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 30.900000000000183..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.000000000000185..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.500000000000007..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.400000000000087..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.800000000000082..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 46.600000000000286..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 20.90000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.39999999999853..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 23.900000000000084..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb14e0>, '-', <__main__.AgrTerminal object at 0x100e862b0>, '#', <__main__.Root object at 0x100eb1f98>, '-', <__main__.NominalizerTerminal object at 0x100eb16d8>, '-', <__main__.SemanticTerminal object at 0x100eb1b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_15: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 39.30000000000031
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 122.39999999999853
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 36.000000000000206
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 15.79999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 34.50000000000004
line done
line done

---------------------

input line #396
input roots: [<__main__.Root object at 0x100e72358>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.40000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.40000000000012..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7a4a8>, '-', <__main__.AgrTerminal object at 0x100e868d0>, '#', <__main__.Root object at 0x100e925f8>, '-', <__main__.NominalizerTerminal object at 0x100e92358>, '-', <__main__.SemanticTerminal object at 0x100e6bb00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: la#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 122.89999999999853
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.00000000000016
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.899999999999967
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 29.40000000000005
line done
line done

---------------------

input line #397
input roots: [<__main__.Root object at 0x100e89e80>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 46.70000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.89999999999853..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.800000000000065..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 22.900000000000066..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.799999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e65c88>, '-', <__main__.AgrTerminal object at 0x100e92be0>, '#', <__main__.Root object at 0x100ea0278>, '-', <__main__.NominalizerTerminal object at 0x100ea02b0>, '-', <__main__.SemanticTerminal object at 0x100ea0be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: unoo#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 15.799999999999981
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 27.40000000000012
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.499999999999883
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 29.40000000000005
line done
line done

---------------------

input line #398
input roots: [<__main__.Root object at 0x100e723c8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 36.00000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 122.99999999999852..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.50000000000008..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.400000000000166..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 27.40000000000012..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.600000000000094..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.80000000000018..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 30.100000000000108..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 123.09999999999852..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 38.90000000000018..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.500000000000167..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.700000000000095..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.000000000000185..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.600000000000083..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.60000000000017..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.59999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea00f0>, '-', <__main__.AgrTerminal object at 0x100ea0710>, '#', <__main__.Root object at 0x100e835f8>, '-', <__main__.NominalizerTerminal object at 0x100e4ada0>, '-', <__main__.SemanticTerminal object at 0x100ea0898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 38.200000000000294
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.50000000000002..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.399999999999984..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.99999999999998..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 39.000000000000185
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 30.100000000000108
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 26.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 32.70000000000004
line done
line done

---------------------

input line #399
input roots: [<__main__.Root object at 0x100ea0048>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 46.80000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 123.19999999999851..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.000000000000068..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.10000000000007..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.799999999999981..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e49278>, '-', <__main__.AgrTerminal object at 0x100ea0588>, '#', <__main__.Root object at 0x100e756d8>, '-', <__main__.NominalizerTerminal object at 0x100e75198>, '-', <__main__.SemanticTerminal object at 0x100e79be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: uno#FOOTe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 39.80000000000032
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.39999999999999..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.3..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 17.90000000000001..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.899999999999979..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.39999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.199999999999989..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.299999999999988..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 23.10000000000007
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 27.40000000000012
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_2
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.799999999999965
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.500000000000014
line done
line done

---------------------

input line #400
input roots: [<__main__.Root object at 0x100e84748>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 36.100000000000165..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 123.2999999999985..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.700000000000085..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.70000000000017..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.00000000000012..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.800000000000097..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.600000000000186..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 30.70000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 123.3999999999985..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.70000000000019..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.80000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.900000000000098..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.80000000000019..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.800000000000086..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 31.900000000000173..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.69999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e7b8>, '-', <__main__.AgrTerminal object at 0x100e75be0>, '#', <__main__.Root object at 0x100e7e780>, '-', <__main__.NominalizerTerminal object at 0x100e7e710>, '-', <__main__.SemanticTerminal object at 0x100e7e9b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#OFFSPRING-a
full_pronunciation: uno#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 39.80000000000019
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 46.80000000000029
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.3
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 23.000000000000014
line done
line done

---------------------

input line #401
input roots: [<__main__.Root object at 0x100e83128>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.89999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bac8>, '-', <__main__.AgrTerminal object at 0x100e49390>, '#', <__main__.Root object at 0x100e66be0>, '-', <__main__.NominalizerTerminal object at 0x100e66128>, '-', <__main__.SemanticTerminal object at 0x100e56ef0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 38.6000000000003
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.600000000000023..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 123.3999999999985
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 30.70000000000011
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.40000000000004
line done
line done

---------------------

input line #402
input roots: [<__main__.Root object at 0x100e9bd68>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.50000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.100000000000122..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb12e8>, '-', <__main__.AgrTerminal object at 0x100e9bba8>, '#', <__main__.Root object at 0x100eb10f0>, '-', <__main__.NominalizerTerminal object at 0x100eb1b00>, '-', <__main__.SemanticTerminal object at 0x100eb14a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: lo#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 123.8999999999985
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 46.70000000000029
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.39999999999988
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.90000000000004
line done
line done

---------------------

input line #403
input roots: [<__main__.Root object at 0x100e44550>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 123.8999999999985..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.200000000000166..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.500000000000085..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 123.9999999999985..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 46.70000000000029..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.600000000000087..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56710>, '-', <__main__.AgrTerminal object at 0x100eb1240>, '#', <__main__.Root object at 0x100e9b7b8>, '-', <__main__.NominalizerTerminal object at 0x100e9bdd8>, '-', <__main__.SemanticTerminal object at 0x100e3ec88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: la#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 123.9999999999985
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 29.900000000000098
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.29999999999988
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 21.70000000000001
line done
line done

---------------------

input line #404
input roots: [<__main__.Root object at 0x100e735f8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 123.9999999999985..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.30000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 36.60000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 124.09999999999849..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 46.80000000000029..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 36.70000000000021..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.100000000000186..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.50000000000009..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 124.19999999999848..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 124.29999999999848..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.30000000000011..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 36.80000000000021..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.200000000000188..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.30000000000019..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.60000000000001..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.60000000000009..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 24.000000000000085..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 46.90000000000029..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.000000000000032..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 124.39999999999847..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 24.100000000000087..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e940>, '-', <__main__.AgrTerminal object at 0x100e9bd30>, '#', <__main__.Root object at 0x100e445f8>, '-', <__main__.NominalizerTerminal object at 0x100e442b0>, '-', <__main__.SemanticTerminal object at 0x100e7ecf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.399999999999967..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.499999999999993..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.400000000000002..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.00000000000001..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.999999999999979..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.499999999999982..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.299999999999988..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.399999999999988..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 124.39999999999847
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 21.000000000000032
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.19999999999988
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 35.100000000000044
line done
line done

---------------------

input line #405
input roots: [<__main__.Root object at 0x100e7ee10>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 47.00000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 124.99999999999847..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.70000000000007..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.80000000000007..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.89999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84668>, '-', <__main__.AgrTerminal object at 0x100e7e668>, '#', <__main__.Root object at 0x100e84940>, '-', <__main__.NominalizerTerminal object at 0x100e849b0>, '-', <__main__.SemanticTerminal object at 0x100e84160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CLOWN-o
full_pronunciation: una#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 23.80000000000007
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.30000000000017
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.80000000000004
line done
line done

---------------------

input line #406
input roots: [<__main__.Root object at 0x100e756d8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 125.09999999999846..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.30000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 36.90000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.19999999999845..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.10000000000029..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.00000000000021..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.40000000000019..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.70000000000009..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.29999999999845..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.39999999999844..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.400000000000112..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.100000000000215..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.500000000000192..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.600000000000193..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.70000000000001..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.800000000000093..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 24.200000000000088..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.200000000000294..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.600000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.49999999999844..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 24.30000000000009..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0e48>, '-', <__main__.AgrTerminal object at 0x100e83358>, '#', <__main__.Root object at 0x100ea0518>, '-', <__main__.NominalizerTerminal object at 0x100ea0710>, '-', <__main__.SemanticTerminal object at 0x100ea0898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CASTLE-i
full_pronunciation: leo#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 16.09999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 28.100000000000122
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.69999999999988
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 35.700000000000045
line done
line done

---------------------

input line #407
input roots: [<__main__.Root object at 0x100eb1f60>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.600000000000023..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.100000000000122..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ed68>, '-', <__main__.AgrTerminal object at 0x100ea0b70>, '#', <__main__.Root object at 0x100e92160>, '-', <__main__.NominalizerTerminal object at 0x100e92fd0>, '-', <__main__.SemanticTerminal object at 0x100e92b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_5: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 125.49999999999844
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.200000000000294
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.399999999999967
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.70000000000004
line done
line done

---------------------

input line #408
input roots: [<__main__.Root object at 0x100ea0a20>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.700000000000024..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.200000000000124..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e785c0>, '-', <__main__.AgrTerminal object at 0x100e92a90>, '#', <__main__.Root object at 0x100e89908>, '-', <__main__.NominalizerTerminal object at 0x100e89710>, '-', <__main__.SemanticTerminal object at 0x100e61eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 40.70000000000033
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.399999999999967..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.599999999999994..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.500000000000004..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.100000000000012..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.599999999999984..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.499999999999988..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 24.30000000000009
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.10000000000029
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.599999999999877
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 29.700000000000053
line done
line done

---------------------

input line #409
input roots: [<__main__.Root object at 0x100e927f0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 15.99999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7e48>, '-', <__main__.AgrTerminal object at 0x100e89748>, '#', <__main__.Root object at 0x100ea7ba8>, '-', <__main__.NominalizerTerminal object at 0x100ea79e8>, '-', <__main__.SemanticTerminal object at 0x100ea7048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_20: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: lo#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 125.39999999999844
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.60000000000029
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 11.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_20
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 14.199999999999985
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.900000000000013
line done
line done

---------------------

input line #410
input roots: [<__main__.Root object at 0x100e65c88>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e925f8>, '-', <__main__.AgrTerminal object at 0x100e89748>, '#', <__main__.Root object at 0x100e92550>, '-', <__main__.NominalizerTerminal object at 0x100e929b0>, '-', <__main__.SemanticTerminal object at 0x100e92860>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#MILKCOW-a
full_pronunciation: lo#MILKCOWa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 125.29999999999845
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.50000000000029
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.80000000000004
line done
line done

---------------------

input line #411
input roots: [<__main__.Root object at 0x100e89a20>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 125.29999999999845..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.40000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.200000000000216..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.39999999999844..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.50000000000029..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.30000000000022..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.700000000000195..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 28.900000000000095..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.49999999999844..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.59999999999843..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.500000000000114..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.40000000000022..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.800000000000196..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 31.900000000000198..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 17.80000000000001..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.000000000000096..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 24.90000000000009..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.60000000000029..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.700000000000035..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.69999999999843..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.000000000000092..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0278>, '-', <__main__.AgrTerminal object at 0x100e92eb8>, '#', <__main__.Root object at 0x100ea04e0>, '-', <__main__.NominalizerTerminal object at 0x100ea0a90>, '-', <__main__.SemanticTerminal object at 0x100ea0f28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: le#MOUSEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 125.69999999999843
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.999999999999991
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 28.099999999999877
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 35.700000000000045
line done
line done

---------------------

input line #412
input roots: [<__main__.Root object at 0x100ea0c18>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 47.700000000000294..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.69999999999843..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.80000000000007..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 23.900000000000073..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 15.99999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83cf8>, '-', <__main__.AgrTerminal object at 0x100ea0908>, '#', <__main__.Root object at 0x100e5a710>, '-', <__main__.NominalizerTerminal object at 0x100e5a3c8>, '-', <__main__.SemanticTerminal object at 0x100e83b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: uno#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 39.70000000000019
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 28.200000000000124
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_8
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.399999999999967
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.70000000000004
line done
line done

---------------------

input line #413
input roots: [<__main__.Root object at 0x100e6edd8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 125.79999999999842..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.50000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.700000000000088..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 125.89999999999841..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.800000000000296..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.80000000000009..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75048>, '-', <__main__.AgrTerminal object at 0x100e84828>, '#', <__main__.Root object at 0x100e75550>, '-', <__main__.NominalizerTerminal object at 0x100e75be0>, '-', <__main__.SemanticTerminal object at 0x100e75c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: le#FROGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 39.20000000000031
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 125.89999999999841
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 17.80000000000001
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 16.19999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 21.70000000000001
line done
line done

---------------------

input line #414
input roots: [<__main__.Root object at 0x100e75198>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.800000000000026..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.200000000000124..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b240>, '-', <__main__.AgrTerminal object at 0x100e75940>, '#', <__main__.Root object at 0x100e9b080>, '-', <__main__.NominalizerTerminal object at 0x100e9b4e0>, '-', <__main__.SemanticTerminal object at 0x100e9be10>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: loo#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 17.199999999999996
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.800000000000296
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_2
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.299999999999965
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.900000000000013
line done
line done

---------------------

input line #415
input roots: [<__main__.Root object at 0x100e7e4a8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 36.60000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 126.49999999999841..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 24.900000000000087..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.00000000000017..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.300000000000125..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 29.900000000000098..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.70000000000019..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.600000000000115..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 126.5999999999984..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.80000000000019..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.10000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.0000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.90000000000019..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 25.00000000000009..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.20000000000017..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.79999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1f60>, '-', <__main__.AgrTerminal object at 0x100e9bc88>, '#', <__main__.Root object at 0x100eb1b00>, '-', <__main__.NominalizerTerminal object at 0x100eb1240>, '-', <__main__.SemanticTerminal object at 0x100eb12b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: una#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 39.90000000000019
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.60000000000017
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.999999999999876
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 30.300000000000054
line done
line done

---------------------

input line #416
input roots: [<__main__.Root object at 0x100e7b630>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 18.900000000000027..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.400000000000126..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea72e8>, '-', <__main__.AgrTerminal object at 0x100e9bd30>, '#', <__main__.Root object at 0x100e8cba8>, '-', <__main__.NominalizerTerminal object at 0x100ea7160>, '-', <__main__.SemanticTerminal object at 0x100ea78d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: li#CLOWNo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 126.5999999999984
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.000000000000096
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.199999999999964
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 30.300000000000054
line done
line done

---------------------

input line #417
input roots: [<__main__.Root object at 0x100ea70b8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 126.5999999999984..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.60000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 25.90000000000009..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 126.6999999999984..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.800000000000296..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 26.000000000000092..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73a90>, '-', <__main__.AgrTerminal object at 0x100ea77f0>, '#', <__main__.Root object at 0x100e66908>, '-', <__main__.NominalizerTerminal object at 0x100e667b8>, '-', <__main__.SemanticTerminal object at 0x100e73a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: le#OFFSPRINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 39.600000000000314
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.700000000000024..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.499999999999986..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.799999999999983..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 126.6999999999984
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 26.000000000000092
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.099999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 22.30000000000001
line done
line done

---------------------

input line #418
input roots: [<__main__.Root object at 0x100e73710>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bcf8>, '-', <__main__.AgrTerminal object at 0x100eb1198>, '#', <__main__.Root object at 0x100e7e780>, '-', <__main__.NominalizerTerminal object at 0x100e7ea20>, '-', <__main__.SemanticTerminal object at 0x100e7e9b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: lo#BALLa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 127.1999999999984
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 47.800000000000296
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.599999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.80000000000004
line done
line done

---------------------

input line #419
input roots: [<__main__.Root object at 0x100e9b9e8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 127.1999999999984..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.70000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 26.600000000000094..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 127.29999999999839..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 47.800000000000296..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 26.700000000000095..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75438>, '-', <__main__.AgrTerminal object at 0x100e9b7f0>, '#', <__main__.Root object at 0x100e49390>, '-', <__main__.NominalizerTerminal object at 0x100e49278>, '-', <__main__.SemanticTerminal object at 0x100e756d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: li#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 127.29999999999839
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 21.700000000000035
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_9
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.899999999999874
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 22.900000000000013
line done
line done

---------------------

input line #420
input roots: [<__main__.Root object at 0x100e755f8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 47.9000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 127.29999999999839..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.000000000000075..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.100000000000076..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e835f8>, '-', <__main__.AgrTerminal object at 0x100e84240>, '#', <__main__.Root object at 0x100ea0e48>, '-', <__main__.NominalizerTerminal object at 0x100ea0f98>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CHILD-o
full_pronunciation: una#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 24.100000000000076
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.70000000000017
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.099999999999962
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.70000000000004
line done
line done

---------------------

input line #421
input roots: [<__main__.Root object at 0x100e3ec88>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 48.0000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 127.39999999999839..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.100000000000076..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.200000000000077..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b00>, '-', <__main__.AgrTerminal object at 0x100ea0470>, '#', <__main__.Root object at 0x100ea0eb8>, '-', <__main__.NominalizerTerminal object at 0x100ea0358>, '-', <__main__.SemanticTerminal object at 0x100ea0d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: uno#CASTLEa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 39.80000000000019
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 28.400000000000126
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.60000000000004
line done
line done

---------------------

input line #422
input roots: [<__main__.Root object at 0x100ea0b70>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 127.49999999999838..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.70000000000017..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 26.800000000000097..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 127.59999999999837..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.1000000000003..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 26.900000000000098..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92908>, '-', <__main__.AgrTerminal object at 0x100e7e1d0>, '#', <__main__.Root object at 0x100e78f28>, '-', <__main__.NominalizerTerminal object at 0x100e7a4a8>, '-', <__main__.SemanticTerminal object at 0x100e92b70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 40.10000000000032
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.800000000000026..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.599999999999987..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.899999999999984..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 127.59999999999837
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 18.30000000000001
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.499999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 22.900000000000013
line done
line done

---------------------

input line #423
input roots: [<__main__.Root object at 0x100e92e48>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 128.19999999999837..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.800000000000175..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 27.0000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.29999999999836..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.2000000000003..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 27.1000000000001..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c0f0>, '-', <__main__.AgrTerminal object at 0x100e78860>, '#', <__main__.Root object at 0x100e8c828>, '-', <__main__.NominalizerTerminal object at 0x100e8c710>, '-', <__main__.SemanticTerminal object at 0x100e8c668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: li#TOWERi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 128.29999999999836
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 21.600000000000033
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 35.700000000000045
line done
line done

---------------------

input line #424
input roots: [<__main__.Root object at 0x100e8c550>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 128.29999999999836..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 36.900000000000176..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.50000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.39999999999836..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.3000000000003..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.60000000000022..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.0000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.000000000000096..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.49999999999835..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.59999999999835..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.700000000000117..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.70000000000022..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.1000000000002..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.2000000000002..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 18.900000000000013..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.100000000000097..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.100000000000094..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.400000000000304..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.600000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.69999999999834..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.200000000000095..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92be0>, '-', <__main__.AgrTerminal object at 0x100e89320>, '#', <__main__.Root object at 0x100e6bc50>, '-', <__main__.NominalizerTerminal object at 0x100e92fd0>, '-', <__main__.SemanticTerminal object at 0x100e92898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_13: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 128.69999999999834
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 37.70000000000022
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_13
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 16.09999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 23.400000000000013
line done
line done

---------------------

input line #425
input roots: [<__main__.Root object at 0x100e92668>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 48.500000000000306..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 128.69999999999834..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.30000000000008..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.40000000000008..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0dd8>, '-', <__main__.AgrTerminal object at 0x100e92cf8>, '#', <__main__.Root object at 0x100ea0710>, '-', <__main__.NominalizerTerminal object at 0x100ea0518>, '-', <__main__.SemanticTerminal object at 0x100ea0fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uno#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 24.40000000000008
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 28.300000000000125
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.799999999999873
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.80000000000001
line done
line done

---------------------

input line #426
input roots: [<__main__.Root object at 0x100ea06d8>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.00000000000003..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.300000000000125..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e794a8>, '-', <__main__.AgrTerminal object at 0x100ea0c50>, '#', <__main__.Root object at 0x100e841d0>, '-', <__main__.NominalizerTerminal object at 0x100e84f28>, '-', <__main__.SemanticTerminal object at 0x100e84a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#CHILD-o
full_pronunciation: lo#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 128.69999999999834
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 48.500000000000306
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_5
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.99999999999996
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.500000000000036
line done
line done

---------------------

input line #427
input roots: [<__main__.Root object at 0x100ea0780>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44f98>, '-', <__main__.AgrTerminal object at 0x100e83128>, '#', <__main__.Root object at 0x100e7e1d0>, '-', <__main__.NominalizerTerminal object at 0x100e7ba90>, '-', <__main__.SemanticTerminal object at 0x100e44240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 18.900000000000027..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.69999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.999999999999986..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 128.59999999999835
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 36.900000000000176
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 27.899999999999995
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 22.80000000000001
line done
line done

---------------------

input line #428
input roots: [<__main__.Root object at 0x100e92198>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b940>, '-', <__main__.AgrTerminal object at 0x100e49390>, '#', <__main__.Root object at 0x100e56860>, '-', <__main__.NominalizerTerminal object at 0x100e9bfd0>, '-', <__main__.SemanticTerminal object at 0x100e9b518>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 129.09999999999835
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 37.400000000000176
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.69999999999987
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 30.60000000000006
line done
line done

---------------------

input line #429
input roots: [<__main__.Root object at 0x100e9b358>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 37.400000000000176..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 129.09999999999835..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 25.10000000000009..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.300000000000175..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.400000000000126..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.1000000000001..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.80000000000019..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.800000000000118..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 129.19999999999834..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 39.90000000000019..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.400000000000176..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.200000000000102..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.00000000000019..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 25.20000000000009..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.50000000000018..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.899999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb10f0>, '-', <__main__.AgrTerminal object at 0x100e9b7b8>, '#', <__main__.Root object at 0x100ea7048>, '-', <__main__.NominalizerTerminal object at 0x100ea7cf8>, '-', <__main__.SemanticTerminal object at 0x100eb14e0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: uno#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 32.50000000000018
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 48.400000000000304
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.59999999999987
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.60000000000004
line done
line done

---------------------

input line #430
input roots: [<__main__.Root object at 0x100eb12b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ceb8>, '-', <__main__.AgrTerminal object at 0x100eb1320>, '#', <__main__.Root object at 0x100ebd780>, '-', <__main__.NominalizerTerminal object at 0x100ebd208>, '-', <__main__.SemanticTerminal object at 0x100e8c588>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.00000000000003..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.79999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.099999999999987..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 129.19999999999834
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 37.400000000000176
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 28.399999999999995
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 23.400000000000013
line done
line done

---------------------

input line #431
input roots: [<__main__.Root object at 0x100e8c470>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 129.79999999999833..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 38.00000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 27.200000000000102..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 129.89999999999833..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.400000000000304..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 27.300000000000104..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi TOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_2', 'null_9', 'null_19', 'i_1', 'TOWER_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1f98>, '-', <__main__.AgrTerminal object at 0x100e8c978>, '#', <__main__.Root object at 0x100eb16d8>, '-', <__main__.NominalizerTerminal object at 0x100eb1390>, '-', <__main__.SemanticTerminal object at 0x100eb1f60>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#TOWER-i
full_pronunciation: le#TOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 41.100000000000335
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 28.999999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.10000000000003..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.89999999999999..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.19999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 129.89999999999833
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 27.300000000000104
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.49999999999987
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 35.80000000000005
line done
line done

---------------------

input line #432
input roots: [<__main__.Root object at 0x100ea77f0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 48.500000000000306..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 130.49999999999832..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.40000000000008..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.50000000000008..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9be10>, '-', <__main__.AgrTerminal object at 0x100eb1c88>, '#', <__main__.Root object at 0x100e9b390>, '-', <__main__.NominalizerTerminal object at 0x100e9bd30>, '-', <__main__.SemanticTerminal object at 0x100e9bcc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_21: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#BOOK-o
full_pronunciation: unoa#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 16.399999999999984
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 38.00000000000018
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_21
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 13.399999999999988
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.500000000000036
line done
line done

---------------------

input line #433
input roots: [<__main__.Root object at 0x100e9b828>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.10000000000003..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 28.500000000000128..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e752b0>, '-', <__main__.AgrTerminal object at 0x100e9b9e8>, '#', <__main__.Root object at 0x100e75550>, '-', <__main__.NominalizerTerminal object at 0x100e75668>, '-', <__main__.SemanticTerminal object at 0x100e75c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 42.00000000000035
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.699999999999996..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.600000000000005..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.200000000000014..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.699999999999985..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.399999999999988..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.599999999999987..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 130.49999999999832
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 28.500000000000128
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 24.89999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 24.000000000000014
line done
line done

---------------------

input line #434
input roots: [<__main__.Root object at 0x100e449b0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 38.00000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.09999999999832..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 25.300000000000093..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.50000000000018..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.10000000000013..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.300000000000104..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.10000000000019..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 31.90000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.1999999999983..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.200000000000195..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.60000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.400000000000105..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.300000000000196..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 25.400000000000095..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.70000000000018..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 15.999999999999979..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a710>, '-', <__main__.AgrTerminal object at 0x100e75f28>, '#', <__main__.Root object at 0x100e83940>, '-', <__main__.NominalizerTerminal object at 0x100e83b70>, '-', <__main__.SemanticTerminal object at 0x100e83128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#MILKCOW-a
full_pronunciation: una#MILKCOWa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MILKCOW to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 41.40000000000034
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.29999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 25.400000000000095
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 31.90000000000012
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 17.29999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 33.500000000000036
line done
line done

---------------------

input line #435
input roots: [<__main__.Root object at 0x100e7ea20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 38.10000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.2999999999983..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.000000000000096..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.80000000000018..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.20000000000013..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.500000000000107..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.4000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 32.50000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.3999999999983..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.5000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 32.90000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.600000000000108..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 40.6000000000002..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.100000000000097..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.000000000000185..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.09999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0fd0>, '-', <__main__.AgrTerminal object at 0x100e5a3c8>, '#', <__main__.Root object at 0x100ea0b00>, '-', <__main__.NominalizerTerminal object at 0x100ea0390>, '-', <__main__.SemanticTerminal object at 0x100ea09e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_18: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: una#TOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 15.899999999999979..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 40.6000000000002
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 38.10000000000018
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_18
    triggers: {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 15.899999999999979
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 24.600000000000016
line done
line done

---------------------

input line #436
input roots: [<__main__.Root object at 0x100ea0208>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 48.60000000000031..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.4999999999983..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.600000000000083..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.700000000000085..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92b00>, '-', <__main__.AgrTerminal object at 0x100ea0438>, '#', <__main__.Root object at 0x100e92860>, '-', <__main__.NominalizerTerminal object at 0x100e926a0>, '-', <__main__.SemanticTerminal object at 0x100e92080>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_15: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.1000000000002
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 48.60000000000031
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 16.699999999999985
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.100000000000016
line done
line done

---------------------

input line #437
input roots: [<__main__.Root object at 0x100e920f0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 48.60000000000031..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.5999999999983..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.800000000000086..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 24.900000000000087..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebdc88>, '-', <__main__.AgrTerminal object at 0x100e92c88>, '#', <__main__.Root object at 0x100ebdd30>, '-', <__main__.NominalizerTerminal object at 0x100ebdf98>, '-', <__main__.SemanticTerminal object at 0x100ebd9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: uno#OFFSPRING-o
full_pronunciation: uni#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.0000000000002
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.100000000000097
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.39999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.000000000000014
line done
line done

---------------------

input line #438
input roots: [<__main__.Root object at 0x100ebd8d0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.20000000000003..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.300000000000132..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ef28>, '-', <__main__.AgrTerminal object at 0x100e89828>, '#', <__main__.Root object at 0x100ea0ef0>, '-', <__main__.NominalizerTerminal object at 0x100ea0dd8>, '-', <__main__.SemanticTerminal object at 0x100e3ec88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_8: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#MOUSE-o
full_pronunciation: la#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-feminine'}
    diacritic: l_4
    triggers: set()
    weight: 25.200000000000095
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 38.60000000000018
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_8
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 18.200000000000014
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 30.900000000000063
line done
line done

---------------------

input line #439
input roots: [<__main__.Root object at 0x100e781d0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 131.69999999999828..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 38.60000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 27.900000000000105..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.79999999999828..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.70000000000031..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.000000000000107..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0f98>, '-', <__main__.AgrTerminal object at 0x100e6eeb8>, '#', <__main__.Root object at 0x100ea0860>, '-', <__main__.NominalizerTerminal object at 0x100ea09b0>, '-', <__main__.SemanticTerminal object at 0x100ea0320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: la#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 131.79999999999828
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 30.600000000000108
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 28.999999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.30000000000005
line done
line done

---------------------

input line #440
input roots: [<__main__.Root object at 0x100ea00f0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 131.79999999999828..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 38.70000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.70000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.89999999999827..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.80000000000031..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.800000000000225..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.3000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.100000000000097..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 131.99999999999827..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.09999999999826..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 32.60000000000012..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.900000000000226..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.400000000000205..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.500000000000206..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.000000000000014..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.2000000000001..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.200000000000095..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 48.90000000000031..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.700000000000035..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.19999999999825..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.300000000000097..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84668>, '-', <__main__.AgrTerminal object at 0x100e7fb00>, '#', <__main__.Root object at 0x100e75f28>, '-', <__main__.NominalizerTerminal object at 0x100e757f0>, '-', <__main__.SemanticTerminal object at 0x100e84940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 132.19999999999825
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 37.900000000000226
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.299999999999958
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 23.400000000000013
line done
line done

---------------------

input line #441
input roots: [<__main__.Root object at 0x100e847b8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.300000000000033..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.400000000000134..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e710>, '-', <__main__.AgrTerminal object at 0x100e49278>, '#', <__main__.Root object at 0x100e7e7b8>, '-', <__main__.NominalizerTerminal object at 0x100e7e4a8>, '-', <__main__.SemanticTerminal object at 0x100e7e668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.799999999999997..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.700000000000006..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.200000000000014..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.699999999999985..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.499999999999988..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.699999999999987..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 132.09999999999826
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 48.90000000000031
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.900000000000002
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.199999999999957
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 30.900000000000063
line done
line done

---------------------

input line #442
input roots: [<__main__.Root object at 0x100e44d68>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 38.80000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.69999999999825..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.2000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.100000000000186..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.500000000000135..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.600000000000108..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.0000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 32.700000000000124..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.79999999999825..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.1000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.20000000000019..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.70000000000011..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.2000000000002..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.3000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.30000000000019..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e566a0>, '-', <__main__.AgrTerminal object at 0x100e759b0>, '#', <__main__.Root object at 0x100e73a90>, '-', <__main__.NominalizerTerminal object at 0x100e73ac8>, '-', <__main__.SemanticTerminal object at 0x100e667b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: une#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.2000000000002
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 19.000000000000014
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.99999999999987
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 34.10000000000004
line done
line done

---------------------

input line #443
input roots: [<__main__.Root object at 0x100e66be0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7780>, '-', <__main__.AgrTerminal object at 0x100eb14e0>, '#', <__main__.Root object at 0x100e8ca20>, '-', <__main__.NominalizerTerminal object at 0x100e8c978>, '-', <__main__.SemanticTerminal object at 0x100e8c400>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: lo#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 132.79999999999825
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 49.40000000000031
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_9
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 28.899999999999995
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.400000000000063
line done
line done

---------------------

input line #444
input roots: [<__main__.Root object at 0x100ea7080>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 132.79999999999825..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 38.90000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 37.900000000000226..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.89999999999824..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 49.40000000000031..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.00000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.60000000000021..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.3000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 132.99999999999824..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 133.09999999999823..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 32.800000000000125..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.10000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.70000000000021..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.80000000000021..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.000000000000014..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.4000000000001..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.400000000000098..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 49.50000000000031..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.800000000000036..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 133.19999999999823..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.5000000000001..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd940>, '-', <__main__.AgrTerminal object at 0x100ea7cf8>, '#', <__main__.Root object at 0x100ebdc18>, '-', <__main__.NominalizerTerminal object at 0x100ebdfd0>, '-', <__main__.SemanticTerminal object at 0x100ebd518>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: lo#GRANDPARENTi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: l_2
    triggers: set()
    weight: 32.80000000000021
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 29.500000000000135
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.899999999999867
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.40000000000005
line done
line done

---------------------

input line #445
input roots: [<__main__.Root object at 0x100ebdf60>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 49.600000000000314..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 133.29999999999822..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.00000000000009..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.10000000000009..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7358>, '-', <__main__.AgrTerminal object at 0x100ebd9e8>, '#', <__main__.Root object at 0x100ea7ef0>, '-', <__main__.NominalizerTerminal object at 0x100ea72b0>, '-', <__main__.SemanticTerminal object at 0x100ea7438>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CASTLE-o
full_pronunciation: uni#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.1000000000002
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.4000000000001
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.799999999999866
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.400000000000063
line done
line done

---------------------

input line #446
input roots: [<__main__.Root object at 0x100ebd7b8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56a58>, '-', <__main__.AgrTerminal object at 0x100ebd6d8>, '#', <__main__.Root object at 0x100e9b4e0>, '-', <__main__.NominalizerTerminal object at 0x100e9bdd8>, '-', <__main__.SemanticTerminal object at 0x100e9b358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.20000000000003..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 16.999999999999993..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.89999999999999..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.49999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 133.29999999999822
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 38.90000000000018
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.800000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 28.799999999999994
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 34.20000000000004
line done
line done

---------------------

input line #447
input roots: [<__main__.Root object at 0x100e8c780>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.400000000000034..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.500000000000135..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '-', <__main__.AgrTerminal object at 0x100e56ef0>, '#', <__main__.Root object at 0x100e492e8>, '-', <__main__.NominalizerTerminal object at 0x100e7a4a8>, '-', <__main__.SemanticTerminal object at 0x100e44f98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#FOOT-e
full_pronunciation: la#FOOTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 133.79999999999822
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 39.40000000000018
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.699999999999864
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.30000000000006
line done
line done

---------------------

input line #448
input roots: [<__main__.Root object at 0x100e44240>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 49.700000000000315..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 133.79999999999822..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.20000000000009..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.300000000000093..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84940>, '-', <__main__.AgrTerminal object at 0x100e9ba58>, '#', <__main__.Root object at 0x100e65940>, '-', <__main__.NominalizerTerminal object at 0x100e84f28>, '-', <__main__.SemanticTerminal object at 0x100e849b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#OFFSPRING-o
full_pronunciation: unai#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 16.19999999999998
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.3000000000001
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.699999999999957
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 34.70000000000004
line done
line done

---------------------

input line #449
input roots: [<__main__.Root object at 0x100e84c50>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0940>, '-', <__main__.AgrTerminal object at 0x100e83550>, '#', <__main__.Root object at 0x100ea0908>, '-', <__main__.NominalizerTerminal object at 0x100ea0e48>, '-', <__main__.SemanticTerminal object at 0x100ea0c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.999999999999993..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.59999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 133.79999999999822
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 39.30000000000018
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 34.70000000000004
line done
line done

---------------------

input line #450
input roots: [<__main__.Root object at 0x100e5a3c8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 134.39999999999822..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 39.90000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.20000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.4999999999982..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 49.80000000000032..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.30000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.80000000000021..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.3000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.5999999999982..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.6999999999982..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 32.90000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.40000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 32.90000000000021..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.00000000000021..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.100000000000016..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.4000000000001..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.6000000000001..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 49.90000000000032..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 21.900000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.7999999999982..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.700000000000102..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ed68>, '-', <__main__.AgrTerminal object at 0x100ea0cc0>, '#', <__main__.Root object at 0x100e92be0>, '-', <__main__.NominalizerTerminal object at 0x100e92fd0>, '-', <__main__.SemanticTerminal object at 0x100e929b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#BOOK-i
full_pronunciation: le#BOOKi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 134.7999999999982
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.899999999999991
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.599999999999863
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.40000000000005
line done
line done

---------------------

input line #451
input roots: [<__main__.Root object at 0x100e7e1d0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.00000000000032..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.7999999999982..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.400000000000095..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.500000000000096..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc898>, '-', <__main__.AgrTerminal object at 0x100e781d0>, '#', <__main__.Root object at 0x100ecc1d0>, '-', <__main__.NominalizerTerminal object at 0x100ecc4e0>, '-', <__main__.SemanticTerminal object at 0x100ecc630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: una#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.0000000000002
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 39.90000000000018
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.49999999999986
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.100000000000016
line done
line done

---------------------

input line #452
input roots: [<__main__.Root object at 0x100e7e940>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 134.8999999999982..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 39.90000000000018..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.100000000000108..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 134.99999999999818..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.10000000000032..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.20000000000011..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'BALL_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'BALL_1', 'BALL_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0cc0>, '-', <__main__.AgrTerminal object at 0x100e929b0>, '#', <__main__.Root object at 0x100ea07f0>, '-', <__main__.NominalizerTerminal object at 0x100ea0eb8>, '-', <__main__.SemanticTerminal object at 0x100ea0780>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: le#BALLe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 42.60000000000036
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 29.399999999999995..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.300000000000033..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.199999999999996..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.099999999999994..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.69999999999998..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 134.99999999999818
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 19.100000000000016
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.39999999999986
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 23.400000000000013
line done
line done

---------------------

input line #453
input roots: [<__main__.Root object at 0x100e6edd8>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 135.59999999999818..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.000000000000185..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.500000000000234..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.69999999999817..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.20000000000032..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.600000000000236..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.100000000000215..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.500000000000103..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.79999999999816..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.89999999999816..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 33.00000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.70000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.200000000000216..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.30000000000022..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.700000000000017..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.600000000000104..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.800000000000104..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.300000000000324..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.00000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.99999999999815..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 25.900000000000105..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83b70>, '-', <__main__.AgrTerminal object at 0x100e86588>, '#', <__main__.Root object at 0x100e83e48>, '-', <__main__.NominalizerTerminal object at 0x100e83940>, '-', <__main__.SemanticTerminal object at 0x100e83358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#FLOWER-i
full_pronunciation: lo#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 135.99999999999815
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 29.500000000000135
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.599999999999955
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 23.900000000000013
line done
line done

---------------------

input line #454
input roots: [<__main__.Root object at 0x100ea0048>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75f28>, '-', <__main__.AgrTerminal object at 0x100ea0940>, '#', <__main__.Root object at 0x100e75d30>, '-', <__main__.NominalizerTerminal object at 0x100e75588>, '-', <__main__.SemanticTerminal object at 0x100e75278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: lo#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 135.89999999999816
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 50.300000000000324
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.89999999999986
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.30000000000004
line done
line done

---------------------

input line #455
input roots: [<__main__.Root object at 0x100e84b00>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.300000000000324..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.89999999999816..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.600000000000097..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.7000000000001..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9ba58>, '-', <__main__.AgrTerminal object at 0x100ea0da0>, '#', <__main__.Root object at 0x100e9b828>, '-', <__main__.NominalizerTerminal object at 0x100e9b978>, '-', <__main__.SemanticTerminal object at 0x100e9bba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CHILD-o
full_pronunciation: uno#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 25.7000000000001
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 50.300000000000324
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.79999999999986
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.20000000000004
line done
line done

---------------------

input line #456
input roots: [<__main__.Root object at 0x100e7e780>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 40.100000000000186..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.99999999999815..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.4000000000001..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.40000000000019..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.500000000000135..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.80000000000011..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.0000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 33.10000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 136.09999999999815..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.1000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.50000000000019..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 30.900000000000112..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 41.2000000000002..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.500000000000103..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.60000000000019..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.19999999999998..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb10f0>, '-', <__main__.AgrTerminal object at 0x100e754e0>, '#', <__main__.Root object at 0x100eb1f60>, '-', <__main__.NominalizerTerminal object at 0x100eb1198>, '-', <__main__.SemanticTerminal object at 0x100eb1550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 43.00000000000036
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.400000000000034..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.299999999999997..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.199999999999996..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.799999999999983..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.2000000000002
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 30.900000000000112
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 29.399999999999995
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.20000000000004
line done
line done

---------------------

input line #457
input roots: [<__main__.Root object at 0x100e66828>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c668>, '-', <__main__.AgrTerminal object at 0x100ea7ba8>, '#', <__main__.Root object at 0x100ebd9e8>, '-', <__main__.NominalizerTerminal object at 0x100ebd630>, '-', <__main__.SemanticTerminal object at 0x100ebd4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_23: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: le#TOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 136.09999999999815
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 19.700000000000017
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_1
    triggers: set()
    weight: 11.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_23
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 15.199999999999982
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.70000000000004
line done
line done

---------------------

input line #458
input roots: [<__main__.Root object at 0x100eb14e0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 136.09999999999815..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.20000000000019..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.30000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 136.19999999999814..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.300000000000324..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.400000000000112..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eccc18>, '-', <__main__.AgrTerminal object at 0x100e8c780>, '#', <__main__.Root object at 0x100ecce48>, '-', <__main__.NominalizerTerminal object at 0x100eccdd8>, '-', <__main__.SemanticTerminal object at 0x100ecccf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: la#FROGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 136.19999999999814
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 31.400000000000112
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.699999999999857
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 23.900000000000013
line done
line done

---------------------

input line #459
input roots: [<__main__.Root object at 0x100eccbe0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.500000000000036..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.600000000000136..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84668>, '-', <__main__.AgrTerminal object at 0x100e75438>, '#', <__main__.Root object at 0x100e612e8>, '-', <__main__.NominalizerTerminal object at 0x100e5a3c8>, '-', <__main__.SemanticTerminal object at 0x100e5a1d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: li#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 136.09999999999815
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.600000000000104
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.599999999999856
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.200000000000017
line done
line done

---------------------

input line #460
input roots: [<__main__.Root object at 0x100e840f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.600000000000037..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.700000000000138..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc7b8>, '-', <__main__.AgrTerminal object at 0x100e842b0>, '#', <__main__.Root object at 0x100e838d0>, '-', <__main__.NominalizerTerminal object at 0x100ecc2e8>, '-', <__main__.SemanticTerminal object at 0x100ecc208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 135.99999999999815
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 50.300000000000324
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.499999999999954
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.60000000000004
line done
line done

---------------------

input line #461
input roots: [<__main__.Root object at 0x100ecc198>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.300000000000324..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.99999999999815..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.7000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.8000000000001..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd978>, '-', <__main__.AgrTerminal object at 0x100ecc940>, '#', <__main__.Root object at 0x100ebd710>, '-', <__main__.NominalizerTerminal object at 0x100ebd898>, '-', <__main__.SemanticTerminal object at 0x100ebd048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CHILD-o
full_pronunciation: uni#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 25.8000000000001
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.500000000000103
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_6
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.399999999999952
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.600000000000065
line done
line done

---------------------

input line #462
input roots: [<__main__.Root object at 0x100ebda90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.70000000000004..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.80000000000014..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c0f0>, '-', <__main__.AgrTerminal object at 0x100ecc668>, '#', <__main__.Root object at 0x100e8c550>, '-', <__main__.NominalizerTerminal object at 0x100e8ca58>, '-', <__main__.SemanticTerminal object at 0x100e8c0b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#MOUSE-o
full_pronunciation: li#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 135.99999999999815
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.4000000000001
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.29999999999995
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.600000000000065
line done
line done

---------------------

input line #463
input roots: [<__main__.Root object at 0x100e8ccf8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.400000000000325..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 135.99999999999815..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.8000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.9000000000001..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7eb8>, '-', <__main__.AgrTerminal object at 0x100e8c978>, '#', <__main__.Root object at 0x100ea7320>, '-', <__main__.NominalizerTerminal object at 0x100ea7b00>, '-', <__main__.SemanticTerminal object at 0x100ea7208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 25.9000000000001
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 40.20000000000019
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.499999999999854
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.500000000000036
line done
line done

---------------------

input line #464
input roots: [<__main__.Root object at 0x100ea7c88>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.80000000000004..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 29.90000000000014..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92898>, '-', <__main__.AgrTerminal object at 0x100ea7080>, '#', <__main__.Root object at 0x100e92780>, '-', <__main__.NominalizerTerminal object at 0x100e927f0>, '-', <__main__.SemanticTerminal object at 0x100e92e48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: lo#CLOWNo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 44.20000000000038
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.29999999999995..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 17.9..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.800000000000008..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.300000000000015..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.299999999999983..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.799999999999986..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.599999999999987..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.799999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 135.99999999999815
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 29.90000000000014
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.399999999999853
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 31.700000000000067
line done
line done

---------------------

input line #465
input roots: [<__main__.Root object at 0x100e92668>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 136.59999999999815..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.20000000000019..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.500000000000114..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 136.69999999999814..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.50000000000033..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.600000000000115..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7fbe0>, '-', <__main__.AgrTerminal object at 0x100e73ac8>, '#', <__main__.Root object at 0x100eb1b70>, '-', <__main__.NominalizerTerminal object at 0x100eb1c88>, '-', <__main__.SemanticTerminal object at 0x100eb1f98>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: le#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 136.69999999999814
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.799999999999992
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 29.899999999999995
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.40000000000005
line done
line done

---------------------

input line #466
input roots: [<__main__.Root object at 0x100e926a0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 136.69999999999814..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.30000000000019..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.700000000000117..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 136.79999999999814..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.60000000000033..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.800000000000118..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'BALL_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'BALL_1', 'BALL_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92dd8>, '-', <__main__.AgrTerminal object at 0x100e7fbe0>, '#', <__main__.Root object at 0x100e929b0>, '-', <__main__.NominalizerTerminal object at 0x100e92fd0>, '-', <__main__.SemanticTerminal object at 0x100e92198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: le#BALLe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.500000000000036..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.4..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.299999999999997..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.899999999999984..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 136.79999999999814
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.699999999999992
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 29.799999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 24.000000000000014
line done
line done

---------------------

input line #467
input roots: [<__main__.Root object at 0x100e92c88>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 137.39999999999813..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.40000000000019..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 28.90000000000012..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 137.49999999999812..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 50.70000000000033..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.00000000000012..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7a90>, '-', <__main__.AgrTerminal object at 0x100e7e710>, '#', <__main__.Root object at 0x100ea7630>, '-', <__main__.NominalizerTerminal object at 0x100ea72b0>, '-', <__main__.SemanticTerminal object at 0x100ea79e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: la#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 137.49999999999812
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 31.30000000000011
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.800000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.899999999999853
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 24.600000000000016
line done
line done

---------------------

input line #468
input roots: [<__main__.Root object at 0x100e442b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cd68>, '-', <__main__.AgrTerminal object at 0x100ea7a20>, '#', <__main__.Root object at 0x100e8ca20>, '-', <__main__.NominalizerTerminal object at 0x100e8c940>, '-', <__main__.SemanticTerminal object at 0x100e8c278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 43.900000000000375
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.600000000000037..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.5..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.4..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 16.999999999999986..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 137.39999999999813
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 33.10000000000013
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 30.299999999999994
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 35.500000000000036
line done
line done

---------------------

input line #469
input roots: [<__main__.Root object at 0x100e8cf98>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.80000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 137.99999999999812..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 25.9000000000001..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.000000000000103..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc048>, '-', <__main__.AgrTerminal object at 0x100e8cdd8>, '#', <__main__.Root object at 0x100ecc400>, '-', <__main__.NominalizerTerminal object at 0x100ecc1d0>, '-', <__main__.SemanticTerminal object at 0x100ecc4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 44.500000000000384
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.399999999999952..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.0..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.90000000000001..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.400000000000016..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.399999999999984..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.899999999999988..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.699999999999987..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.899999999999986..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 41.7000000000002
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 30.40000000000014
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 27.79999999999985
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 32.30000000000007
line done
line done

---------------------

input line #470
input roots: [<__main__.Root object at 0x100eccba8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 50.90000000000033..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 138.09999999999812..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.100000000000104..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.200000000000106..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd550>, '-', <__main__.AgrTerminal object at 0x100ecc240>, '#', <__main__.Root object at 0x100ebdc88>, '-', <__main__.NominalizerTerminal object at 0x100ebd4e0>, '-', <__main__.SemanticTerminal object at 0x100ebd9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_4: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#FLOWER-e
full_pronunciation: uni#FLOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 42.2000000000002
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.3000000000001
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_4
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.100000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 32.80000000000007
line done
line done

---------------------

input line #471
input roots: [<__main__.Root object at 0x100ecc940>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 19.90000000000004..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 31.000000000000142..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e849b0>, '-', <__main__.AgrTerminal object at 0x100e61eb8>, '#', <__main__.Root object at 0x100e75940>, '-', <__main__.NominalizerTerminal object at 0x100e75cf8>, '-', <__main__.SemanticTerminal object at 0x100e841d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: lo#CLOWNo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 44.90000000000039
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.499999999999954..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.1..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.00000000000001..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.500000000000018..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.499999999999986..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.99999999999999..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.799999999999986..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 13.999999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 138.09999999999812
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 31.000000000000142
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 28.29999999999985
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 32.80000000000007
line done
line done

---------------------

input line #472
input roots: [<__main__.Root object at 0x100e84b00>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 138.6999999999981..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.50000000000019..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.80000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 138.7999999999981..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.000000000000334..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 38.90000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.40000000000022..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.3000000000001..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 138.8999999999981..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 138.9999999999981..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 33.70000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.00000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.50000000000022..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.60000000000022..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.700000000000017..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.4000000000001..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.000000000000107..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.100000000000335..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.10000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 139.0999999999981..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.100000000000108..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb12b0>, '-', <__main__.AgrTerminal object at 0x100e84c50>, '#', <__main__.Root object at 0x100eb1400>, '-', <__main__.NominalizerTerminal object at 0x100eb1ef0>, '-', <__main__.SemanticTerminal object at 0x100eb1d68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 139.0999999999981
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 39.00000000000024
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 28.79999999999985
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 24.500000000000014
line done
line done

---------------------

input line #473
input roots: [<__main__.Root object at 0x100e7eb00>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 139.0999999999981..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 40.60000000000019..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.00000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 139.19999999999808..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.20000000000034..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.10000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.70000000000022..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.500000000000103..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 139.29999999999808..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 139.39999999999807..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 33.80000000000013..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.200000000000244..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.800000000000225..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 33.900000000000226..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.80000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.600000000000104..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.20000000000011..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.30000000000034..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.200000000000042..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 139.49999999999807..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.30000000000011..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_2', 'i_1', 'null_5', 'OFFSPRING_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebdef0>, '-', <__main__.AgrTerminal object at 0x100e75c50>, '#', <__main__.Root object at 0x100ebd9b0>, '-', <__main__.NominalizerTerminal object at 0x100ebdd30>, '-', <__main__.SemanticTerminal object at 0x100ebdfd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#OFFSPRING-i
full_pronunciation: lo#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 139.49999999999807
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 31.500000000000142
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 28.69999999999985
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.50000000000005
line done
line done

---------------------

input line #474
input roots: [<__main__.Root object at 0x100e84a20>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecce48>, '-', <__main__.AgrTerminal object at 0x100ebd940>, '#', <__main__.Root object at 0x100ecc4e0>, '-', <__main__.NominalizerTerminal object at 0x100ecc3c8>, '-', <__main__.SemanticTerminal object at 0x100ecc240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: la#CARa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.70000000000004..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.6..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.899999999999979..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.5..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.099999999999987..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 139.39999999999807
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 40.60000000000019
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 30.799999999999994
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.10000000000004
line done
line done

---------------------

input line #475
input roots: [<__main__.Root object at 0x100e849b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 20.000000000000043..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 31.500000000000142..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83278>, '-', <__main__.AgrTerminal object at 0x100ecc780>, '#', <__main__.Root object at 0x100e8c128>, '-', <__main__.NominalizerTerminal object at 0x100e7b630>, '-', <__main__.SemanticTerminal object at 0x100e4ada0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_12: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 45.4000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.599999999999987..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.09999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 139.89999999999807
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 31.500000000000142
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_12
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 12.200000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.30000000000002
line done
line done

---------------------

input line #476
input roots: [<__main__.Root object at 0x100eccc50>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 140.49999999999807..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 41.200000000000195..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.100000000000122..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 140.59999999999806..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.40000000000034..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.200000000000124..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bb00>, '-', <__main__.AgrTerminal object at 0x100e8c9b0>, '#', <__main__.Root object at 0x100ea7908>, '-', <__main__.NominalizerTerminal object at 0x100ea7a20>, '-', <__main__.SemanticTerminal object at 0x100e65c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_23: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 140.59999999999806
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 16.199999999999992
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 11.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_23
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 15.39999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.40000000000005
line done
line done

---------------------

input line #477
input roots: [<__main__.Root object at 0x100e8c550>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 20.100000000000044..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 32.10000000000014..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'CASTLE_1', 'null_5', 'o_1', 'CASTLE_2'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44f98>, '-', <__main__.AgrTerminal object at 0x100e6bda0>, '#', <__main__.Root object at 0x100e92f98>, '-', <__main__.NominalizerTerminal object at 0x100e445f8>, '-', <__main__.SemanticTerminal object at 0x100e44d68>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CASTLE-o
full_pronunciation: li#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 140.49999999999807
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.600000000000104
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.300000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.499999999999954
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 33.40000000000007
line done
line done

---------------------

input line #478
input roots: [<__main__.Root object at 0x100e449b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 20.200000000000045..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 32.200000000000145..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e739b0>, '-', <__main__.AgrTerminal object at 0x100e925f8>, '#', <__main__.Root object at 0x100e7ec50>, '-', <__main__.NominalizerTerminal object at 0x100e7ee10>, '-', <__main__.SemanticTerminal object at 0x100e7e710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 45.8000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.200000000000003..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.100000000000012..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.60000000000002..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.69999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.199999999999992..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.899999999999986..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.099999999999985..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 140.39999999999807
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 32.200000000000145
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.5
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 25.399999999999952
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 33.40000000000007
line done
line done

---------------------

input line #479
input roots: [<__main__.Root object at 0x100e7a7f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 140.99999999999807..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 41.300000000000196..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.300000000000246..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 141.09999999999806..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.50000000000034..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.40000000000025..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.00000000000023..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.600000000000104..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 141.19999999999806..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 141.29999999999805..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 33.900000000000134..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.50000000000025..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.10000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.20000000000023..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 19.90000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 29.700000000000106..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.400000000000112..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.60000000000034..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.300000000000043..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 141.39999999999804..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.500000000000114..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1da0>, '-', <__main__.AgrTerminal object at 0x100e73ac8>, '#', <__main__.Root object at 0x100e9b4e0>, '-', <__main__.NominalizerTerminal object at 0x100e79be0>, '-', <__main__.SemanticTerminal object at 0x100eb1160>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 46.100000000000406
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 25.999999999999954..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.300000000000004..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.200000000000014..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.70000000000002..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.79999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.299999999999994..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 13.999999999999986..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.199999999999985..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 141.39999999999804
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 29.700000000000106
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 28.59999999999985
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 36.40000000000005
line done
line done

---------------------

input line #480
input roots: [<__main__.Root object at 0x100eb1668>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 20.300000000000047..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 32.800000000000146..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73198>, '-', <__main__.AgrTerminal object at 0x100eb1d68>, '#', <__main__.Root object at 0x100e92940>, '-', <__main__.NominalizerTerminal object at 0x100e73a90>, '-', <__main__.SemanticTerminal object at 0x100e73a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 46.40000000000041
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 26.099999999999955..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.400000000000006..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.300000000000015..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.800000000000022..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.89999999999999..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.399999999999995..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.099999999999985..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.299999999999985..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 141.89999999999804
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 32.800000000000146
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.200000000000001
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.09999999999985
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.00000000000007
line done
line done

---------------------

input line #481
input roots: [<__main__.Root object at 0x100e7ec50>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.49999999999804..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.600000000000104..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.700000000000195..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.40000000000015..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.30000000000011..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.2000000000002..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.000000000000135..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.59999999999803..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.3000000000002..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.800000000000196..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.400000000000112..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.400000000000205..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.700000000000106..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.9000000000002..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.299999999999983..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7a4a8>, '-', <__main__.AgrTerminal object at 0x100e44240>, '#', <__main__.Root object at 0x100ea7d30>, '-', <__main__.NominalizerTerminal object at 0x100ea7278>, '-', <__main__.SemanticTerminal object at 0x100ea7e48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#CHILD-a
full_pronunciation: uno#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 33.9000000000002
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 51.60000000000034
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.59999999999985
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.70000000000004
line done
line done

---------------------

input line #482
input roots: [<__main__.Root object at 0x100e73780>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 51.60000000000034..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.69999999999803..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.300000000000107..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.40000000000011..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e3ec88>, '-', <__main__.AgrTerminal object at 0x100e6bf98>, '#', <__main__.Root object at 0x100e8cc50>, '-', <__main__.NominalizerTerminal object at 0x100e8ca58>, '-', <__main__.SemanticTerminal object at 0x100e7bda0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#OFFSPRING-o
full_pronunciation: una#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 42.400000000000205
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 41.4000000000002
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.499999999999847
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.60000000000004
line done
line done

---------------------

input line #483
input roots: [<__main__.Root object at 0x100e65c88>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.79999999999802..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.800000000000107..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 33.9000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.50000000000015..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.500000000000114..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.400000000000205..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.100000000000136..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.89999999999802..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.500000000000206..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.0000000000002..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.600000000000115..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.60000000000021..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 26.90000000000011..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.1000000000002..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.399999999999984..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e838d0>, '-', <__main__.AgrTerminal object at 0x100e739b0>, '#', <__main__.Root object at 0x100e83a90>, '-', <__main__.NominalizerTerminal object at 0x100e83e48>, '-', <__main__.SemanticTerminal object at 0x100e83278>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: una#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 42.60000000000021
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 41.4000000000002
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_5
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.300000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.299999999999994
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.60000000000007
line done
line done

---------------------

input line #484
input roots: [<__main__.Root object at 0x100e8cac8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 142.999999999998..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.300000000000125..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 143.099999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 51.700000000000344..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.400000000000126..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc3c8>, '-', <__main__.AgrTerminal object at 0x100e8cdd8>, '#', <__main__.Root object at 0x100e6ef28>, '-', <__main__.NominalizerTerminal object at 0x100e6eeb8>, '-', <__main__.SemanticTerminal object at 0x100ecce48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#OFFSPRING-e
full_pronunciation: la#OFFSPRINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 143.099999999998
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 31.600000000000115
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_3
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.399999999999846
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 24.600000000000016
line done
line done

---------------------

input line #485
input roots: [<__main__.Root object at 0x100ecc630>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 51.800000000000345..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 143.099999999998..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.50000000000011..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.60000000000011..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd390>, '-', <__main__.AgrTerminal object at 0x100ecc5c0>, '#', <__main__.Root object at 0x100e5a7b8>, '-', <__main__.NominalizerTerminal object at 0x100ebd978>, '-', <__main__.SemanticTerminal object at 0x100ebd860>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_6: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: una#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 26.60000000000011
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 41.4000000000002
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_6
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 18.400000000000006
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.60000000000007
line done
line done

---------------------

input line #486
input roots: [<__main__.Root object at 0x100ebd470>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 20.40000000000005..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.60000000000015..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.700000000000017..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bcf8>, '-', <__main__.AgrTerminal object at 0x100e849b0>, '#', <__main__.Root object at 0x100e9be10>, '-', <__main__.NominalizerTerminal object at 0x100e9bfd0>, '-', <__main__.SemanticTerminal object at 0x100e9b5c0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FOOT-e
full_pronunciation: lo#FOOTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 26.199999999999957..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.400000000000006..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.400000000000016..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 18.900000000000023..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.999999999999993..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.499999999999996..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.199999999999985..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.399999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 20.40000000000005
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 51.800000000000345
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.299999999999844
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 25.90000000000002
line done
line done

---------------------

input line #487
input roots: [<__main__.Root object at 0x100e75668>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.00000000000005..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.70000000000015..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.80000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_3', 'null_6', 'null_5', 'OFFSPRING_1', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd5c0>, '-', <__main__.AgrTerminal object at 0x100e75e80>, '#', <__main__.Root object at 0x100ebd550>, '-', <__main__.NominalizerTerminal object at 0x100ebd7b8>, '-', <__main__.SemanticTerminal object at 0x100ebdb70>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#OFFSPRING-o
full_pronunciation: lo#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 143.099999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 52.300000000000345
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.199999999999957
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.60000000000004
line done
line done

---------------------

input line #488
input roots: [<__main__.Root object at 0x100ebd7f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eccc18>, '-', <__main__.AgrTerminal object at 0x100ebddd8>, '#', <__main__.Root object at 0x100ecc7b8>, '-', <__main__.NominalizerTerminal object at 0x100ecc710>, '-', <__main__.SemanticTerminal object at 0x100eccd30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: lo#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 142.999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 52.200000000000344
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 18.5
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.60000000000004
line done
line done

---------------------

input line #489
input roots: [<__main__.Root object at 0x100eccf28>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 142.999999999998..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.00000000000011..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.2000000000002..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.80000000000015..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.600000000000115..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.60000000000021..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.20000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 143.099999999998..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.70000000000021..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.3000000000002..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 31.700000000000117..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.80000000000021..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.10000000000011..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.400000000000205..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.499999999999986..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c668>, '-', <__main__.AgrTerminal object at 0x100ecc908>, '#', <__main__.Root object at 0x100e8c9b0>, '-', <__main__.NominalizerTerminal object at 0x100e8cd68>, '-', <__main__.SemanticTerminal object at 0x100e8cc18>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: una#OFFSPRINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 42.80000000000021
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 41.4000000000002
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.799999999999844
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.60000000000007
line done
line done

---------------------

input line #490
input roots: [<__main__.Root object at 0x100e83e48>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea77f0>, '-', <__main__.AgrTerminal object at 0x100e8c0f0>, '#', <__main__.Root object at 0x100ea7e10>, '-', <__main__.NominalizerTerminal object at 0x100ea7080>, '-', <__main__.SemanticTerminal object at 0x100ea70b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 45.00000000000039
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 31.299999999999994..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.80000000000004..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.700000000000003..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 15.999999999999979..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.5..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.19999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 143.099999999998
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 31.700000000000117
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 29.699999999999843
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 36.70000000000004
line done
line done

---------------------

input line #491
input roots: [<__main__.Root object at 0x100ebd908>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 143.699999999998..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 41.4000000000002..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.500000000000128..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 143.799999999998..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.200000000000344..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.60000000000013..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e927b8>, '-', <__main__.AgrTerminal object at 0x100ea7c50>, '#', <__main__.Root object at 0x100e92d30>, '-', <__main__.NominalizerTerminal object at 0x100e92a20>, '-', <__main__.SemanticTerminal object at 0x100e92eb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CAR-e
full_pronunciation: le#CARe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CAR to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 45.300000000000395
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 31.399999999999995..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 19.90000000000004..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.800000000000004..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.6..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.29999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 143.799999999998
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 19.90000000000002
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 30.199999999999843
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 24.600000000000016
line done
line done

---------------------

input line #492
input roots: [<__main__.Root object at 0x100e445c0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 41.5000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.399999999998..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.200000000000113..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.500000000000206..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.900000000000155..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.30000000000012..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.80000000000021..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.30000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.49999999999798..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 42.90000000000021..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.60000000000021..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.40000000000012..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 43.00000000000021..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.300000000000114..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.70000000000021..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.599999999999987..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7fd30>, '-', <__main__.AgrTerminal object at 0x100e73198>, '#', <__main__.Root object at 0x100eb1b00>, '-', <__main__.NominalizerTerminal object at 0x100eb1d68>, '-', <__main__.SemanticTerminal object at 0x100eb1cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: una#CARa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 31.499999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.000000000000043..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 17.900000000000006..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.700000000000003..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.39999999999999..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 43.00000000000021
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 41.5000000000002
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.9
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 30.699999999999843
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 37.30000000000004
line done
line done

---------------------

input line #493
input roots: [<__main__.Root object at 0x100e7ec50>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 144.59999999999798..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.1000000000002..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.60000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.69999999999797..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.300000000000345..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.70000000000025..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.30000000000023..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.300000000000107..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.79999999999797..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.89999999999796..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.40000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.80000000000025..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.40000000000023..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.500000000000234..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 20.50000000000002..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.40000000000011..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.600000000000115..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.40000000000035..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.400000000000045..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.99999999999795..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.700000000000117..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b5f8>, '-', <__main__.AgrTerminal object at 0x100e7fbe0>, '#', <__main__.Root object at 0x100ea0048>, '-', <__main__.NominalizerTerminal object at 0x100ea0278>, '-', <__main__.SemanticTerminal object at 0x100ea0da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: lo#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 144.99999999999795
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 33.900000000000155
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.300000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.099999999999955
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 37.00000000000005
line done
line done

---------------------

input line #494
input roots: [<__main__.Root object at 0x100e9bbe0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 42.2000000000002..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 144.99999999999795..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.400000000000116..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.80000000000021..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 33.900000000000155..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.50000000000012..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 43.600000000000215..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 34.50000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.09999999999795..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 43.700000000000216..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 34.90000000000021..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.60000000000012..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 43.80000000000022..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.500000000000117..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.00000000000021..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.69999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ecf8>, '-', <__main__.AgrTerminal object at 0x100e9bfd0>, '#', <__main__.Root object at 0x100e739b0>, '-', <__main__.NominalizerTerminal object at 0x100e73a90>, '-', <__main__.SemanticTerminal object at 0x100e73198>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 45.8000000000004
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 31.599999999999998..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.100000000000044..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.000000000000007..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.299999999999983..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.800000000000004..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.499999999999993..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 43.80000000000022
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 34.50000000000014
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.199999999999843
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 37.90000000000004
line done
line done

---------------------

input line #495
input roots: [<__main__.Root object at 0x100eb11d0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 52.50000000000035..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.19999999999794..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.60000000000011..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.700000000000113..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '-', <__main__.AgrTerminal object at 0x100e7e9b0>, '#', <__main__.Root object at 0x100ea7d30>, '-', <__main__.NominalizerTerminal object at 0x100ea7eb8>, '-', <__main__.SemanticTerminal object at 0x100e44550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: uni#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 26.700000000000113
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 30.40000000000011
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 13.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.699999999999843
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 26.50000000000002
line done
line done

---------------------

input line #496
input roots: [<__main__.Root object at 0x100e79668>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 145.29999999999794..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.3000000000002..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.70000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.39999999999793..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.60000000000035..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.800000000000132..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bb00>, '-', <__main__.AgrTerminal object at 0x100e442b0>, '#', <__main__.Root object at 0x100e7bda0>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e45d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: li#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 145.39999999999793
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 22.400000000000045
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.59999999999984
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.200000000000017
line done
line done

---------------------

input line #497
input roots: [<__main__.Root object at 0x100e6bf98>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 145.39999999999793..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.400000000000205..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 39.900000000000254..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.49999999999793..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.70000000000035..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.000000000000256..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.600000000000236..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.40000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.59999999999792..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.6999999999979..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 35.10000000000014..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.10000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.70000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.80000000000024..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 20.600000000000023..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.50000000000011..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.800000000000118..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 52.80000000000035..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.400000000000045..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 145.7999999999979..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 26.90000000000012..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cdd8>, '-', <__main__.AgrTerminal object at 0x100ea7080>, '#', <__main__.Root object at 0x100e83b70>, '-', <__main__.NominalizerTerminal object at 0x100e83128>, '-', <__main__.SemanticTerminal object at 0x100e837f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 26.099999999999955..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.500000000000007..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.500000000000018..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 19.000000000000025..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.599999999999998..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.299999999999985..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.499999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 145.7999999999979
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 22.400000000000045
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_6
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.49999999999984
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 37.00000000000005
line done
line done

---------------------

input line #498
input roots: [<__main__.Root object at 0x100ea70b8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.10000000000005..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.000000000000156..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 18.90000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc2b0>, '-', <__main__.AgrTerminal object at 0x100e83940>, '#', <__main__.Root object at 0x100e6ef28>, '-', <__main__.NominalizerTerminal object at 0x100e6edd8>, '-', <__main__.SemanticTerminal object at 0x100ecc1d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.60000000000001..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.60000000000002..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 19.100000000000026..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.199999999999996..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.7..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.599999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 146.2999999999979
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 52.80000000000035
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 13.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.099999999999955
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 26.50000000000002
line done
line done

---------------------

input line #499
input roots: [<__main__.Root object at 0x100eccc88>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 42.500000000000206..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 146.8999999999979..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.60000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.100000000000215..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.10000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.700000000000124..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.40000000000022..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 35.200000000000145..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 146.9999999999979..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.50000000000022..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.200000000000216..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.800000000000125..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.60000000000022..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.70000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.30000000000022..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.79999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd390>, '-', <__main__.AgrTerminal object at 0x100ecc710>, '#', <__main__.Root object at 0x100ebd9b0>, '-', <__main__.NominalizerTerminal object at 0x100ebdfd0>, '-', <__main__.SemanticTerminal object at 0x100ebd860>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#OFFSPRING-a
full_pronunciation: uno#OFFSPRINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 27.70000000000012
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 53.30000000000035
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_6
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.599999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 38.50000000000004
line done
line done

---------------------

input line #500
input roots: [<__main__.Root object at 0x100ebd748>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 147.0999999999979..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.60000000000021..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 29.900000000000134..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.19999999999789..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.30000000000035..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.000000000000135..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CAR_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'CAR_1', 'e_3', 'CAR_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0550>, '-', <__main__.AgrTerminal object at 0x100e84160>, '#', <__main__.Root object at 0x100ea0fd0>, '-', <__main__.NominalizerTerminal object at 0x100ea0630>, '-', <__main__.SemanticTerminal object at 0x100ea0668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#CAR-e
full_pronunciation: li#CARi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 147.19999999999789
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 22.900000000000045
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.499999999999996
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 37.50000000000005
line done
line done

---------------------

input line #501
input roots: [<__main__.Root object at 0x100e612e8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e78f98>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebdf60>, '-', <__main__.AgrTerminal object at 0x100e84cf8>, '#', <__main__.Root object at 0x100e61eb8>, '-', <__main__.NominalizerTerminal object at 0x100e5a7b8>, '-', <__main__.SemanticTerminal object at 0x100ebddd8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: lo#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 147.0999999999979
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 53.30000000000035
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_3
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.300000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.399999999999995
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 38.50000000000004
line done
line done

---------------------

input line #502
input roots: [<__main__.Root object at 0x100ebd6d8>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 42.70000000000021..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.0999999999979..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.70000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.40000000000022..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.20000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.90000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.70000000000022..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 35.300000000000146..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.19999999999789..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.800000000000225..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.50000000000022..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.00000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 44.900000000000226..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.80000000000012..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.60000000000022..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.89999999999999..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc630>, '-', <__main__.AgrTerminal object at 0x100e6edd8>, '#', <__main__.Root object at 0x100e83940>, '-', <__main__.NominalizerTerminal object at 0x100ecc5c0>, '-', <__main__.SemanticTerminal object at 0x100ecc3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#CHILD-a
full_pronunciation: una#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 35.60000000000022
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 35.300000000000146
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.99999999999984
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.50000000000007
line done
line done

---------------------

input line #503
input roots: [<__main__.Root object at 0x100eccc50>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 147.29999999999788..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.80000000000021..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.20000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.39999999999787..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.30000000000035..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.30000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 34.90000000000024..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.60000000000011..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.49999999999787..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.59999999999786..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 35.300000000000146..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.40000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.00000000000024..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.10000000000024..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 20.700000000000024..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.700000000000113..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.00000000000012..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.400000000000354..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 22.900000000000045..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.69999999999786..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.100000000000122..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c828>, '-', <__main__.AgrTerminal object at 0x100ecce48>, '#', <__main__.Root object at 0x100e8c128>, '-', <__main__.NominalizerTerminal object at 0x100e8ccf8>, '-', <__main__.SemanticTerminal object at 0x100e8c8d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: le#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 147.69999999999786
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 16.09999999999999
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.89999999999984
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.200000000000017
line done
line done

---------------------

input line #504
input roots: [<__main__.Root object at 0x100e8cb00>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 147.69999999999786..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 42.90000000000021..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.50000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.79999999999785..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.500000000000355..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.600000000000264..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.200000000000244..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.800000000000114..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.89999999999785..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 147.99999999999784..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 35.40000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.700000000000266..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.300000000000246..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.40000000000025..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 20.800000000000026..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 30.900000000000116..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.200000000000124..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.60000000000036..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.000000000000046..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 148.09999999999783..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.300000000000125..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea79e8>, '-', <__main__.AgrTerminal object at 0x100e83358>, '#', <__main__.Root object at 0x100ea7d68>, '-', <__main__.NominalizerTerminal object at 0x100ea79b0>, '-', <__main__.SemanticTerminal object at 0x100ea7b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_8: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 47.90000000000043
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 19.200000000000028..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 148.09999999999783
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 30.900000000000116
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_1
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_8
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 19.200000000000028
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 37.60000000000005
line done
line done

---------------------

input line #505
input roots: [<__main__.Root object at 0x100ea7160>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 148.69999999999783..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 43.00000000000021..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.100000000000136..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 148.79999999999782..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.70000000000036..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.200000000000138..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'BALL_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'BALL_1', 'BALL_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e929b0>, '-', <__main__.AgrTerminal object at 0x100ea77f0>, '#', <__main__.Root object at 0x100e735f8>, '-', <__main__.NominalizerTerminal object at 0x100e73ac8>, '-', <__main__.SemanticTerminal object at 0x100e92fd0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#BALL-e
full_pronunciation: la#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 148.79999999999782
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 33.00000000000013
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.299999999999994
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 38.10000000000005
line done
line done

---------------------

input line #506
input roots: [<__main__.Root object at 0x100ebda58>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 148.79999999999782..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 43.100000000000215..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.30000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 148.89999999999782..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.80000000000036..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.40000000000014..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b6d8>, '-', <__main__.AgrTerminal object at 0x100e73198>, '#', <__main__.Root object at 0x100e9bd68>, '-', <__main__.NominalizerTerminal object at 0x100e9bba8>, '-', <__main__.SemanticTerminal object at 0x100e9beb8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: la#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 148.89999999999782
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 32.90000000000013
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.799999999999837
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 38.10000000000005
line done
line done

---------------------

input line #507
input roots: [<__main__.Root object at 0x100eb1d68>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0eb8>, '-', <__main__.AgrTerminal object at 0x100e7e4a8>, '#', <__main__.Root object at 0x100ea0be0>, '-', <__main__.NominalizerTerminal object at 0x100ea0a20>, '-', <__main__.SemanticTerminal object at 0x100ea0cc0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#PIBLING-a
full_pronunciation: la#PIBLINGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.200000000000045..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.10000000000001..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.399999999999984..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.900000000000006..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.599999999999994..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.899999999999979..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 148.79999999999782
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 43.100000000000215
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.199999999999992
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 38.600000000000044
line done
line done

---------------------

input line #508
input roots: [<__main__.Root object at 0x100ea0ef0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 149.39999999999782..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 43.700000000000216..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.500000000000142..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 149.4999999999978..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 53.90000000000036..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.600000000000144..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9beb8>, '-', <__main__.AgrTerminal object at 0x100ea0470>, '#', <__main__.Root object at 0x100eb1f98>, '-', <__main__.NominalizerTerminal object at 0x100eb14a8>, '-', <__main__.SemanticTerminal object at 0x100eb11d0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: le#PIBLINGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 47.00000000000042
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 31.799999999999994..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.300000000000047..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.20000000000001..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.499999999999986..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.000000000000007..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.699999999999996..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 15.999999999999979..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.79999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.899999999999979..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 149.4999999999978
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 20.800000000000026
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.699999999999836
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.30000000000002
line done
line done

---------------------

input line #509
input roots: [<__main__.Root object at 0x100e9bcf8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e92fd0>, '-', <__main__.AgrTerminal object at 0x100e73198>, '#', <__main__.Root object at 0x100e92940>, '-', <__main__.NominalizerTerminal object at 0x100e92eb8>, '-', <__main__.SemanticTerminal object at 0x100e92e48>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 47.30000000000042
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.40000000000005..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.30000000000001..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.599999999999987..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.10000000000001..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.799999999999997..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.899999999999979..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.999999999999979..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 149.9999999999978
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 35.40000000000015
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.8
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 31.799999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 27.100000000000023
line done
line done

---------------------

input line #510
input roots: [<__main__.Root object at 0x100ea0a20>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 150.5999999999978..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 43.80000000000022..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.80000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 150.6999999999978..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.00000000000036..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 40.90000000000027..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.50000000000025..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 31.500000000000117..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 150.7999999999978..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 150.8999999999978..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.00000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.00000000000027..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.60000000000025..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.70000000000025..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.400000000000027..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 31.60000000000012..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.400000000000126..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.100000000000364..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.100000000000048..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 150.99999999999778..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.500000000000128..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7240>, '-', <__main__.AgrTerminal object at 0x100e929b0>, '#', <__main__.Root object at 0x100ea7e10>, '-', <__main__.NominalizerTerminal object at 0x100ea7f60>, '-', <__main__.SemanticTerminal object at 0x100ea7c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_22: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 48.200000000000436
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 14.699999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 150.99999999999778
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 31.60000000000012
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_22
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}
    weight: 14.699999999999983
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 38.10000000000005
line done
line done

---------------------

input line #511
input roots: [<__main__.Root object at 0x100ea7e48>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 43.90000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 151.59999999999778..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 27.900000000000123..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.60000000000022..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.30000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 32.90000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 45.00000000000023..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.10000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 151.69999999999777..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 45.10000000000023..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.70000000000022..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.00000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 45.20000000000023..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.000000000000124..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.800000000000225..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 16.999999999999993..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8c550>, '-', <__main__.AgrTerminal object at 0x100ea7438>, '#', <__main__.Root object at 0x100e8ccc0>, '-', <__main__.NominalizerTerminal object at 0x100e8ca58>, '-', <__main__.SemanticTerminal object at 0x100e8ca20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 47.60000000000043
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.50000000000005..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.400000000000013..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.69999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.20000000000001..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 17.9..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.999999999999979..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 45.20000000000023
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 33.00000000000013
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.3
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 39.200000000000045
line done
line done

---------------------

input line #512
input roots: [<__main__.Root object at 0x100e92160>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 151.79999999999777..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 44.00000000000022..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.10000000000027..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 151.89999999999776..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.200000000000365..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.20000000000027..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.80000000000025..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.200000000000124..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 151.99999999999775..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.09999999999775..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.20000000000015..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.300000000000274..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 35.900000000000254..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.000000000000256..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.50000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.300000000000125..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.60000000000013..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.30000000000037..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.20000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.19999999999774..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.70000000000013..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eccc50>, '-', <__main__.AgrTerminal object at 0x100e838d0>, '#', <__main__.Root object at 0x100ecc400>, '-', <__main__.NominalizerTerminal object at 0x100ecc198>, '-', <__main__.SemanticTerminal object at 0x100ecc3c8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_21: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#CHILD-i
full_pronunciation: li#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 152.19999999999774
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 23.20000000000005
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_1
    triggers: set()
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_21
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 14.399999999999984
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.80000000000002
line done
line done

---------------------

input line #513
input roots: [<__main__.Root object at 0x100eb1278>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e922e8>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd7b8>, '-', <__main__.AgrTerminal object at 0x100ecc780>, '#', <__main__.Root object at 0x100ebdef0>, '-', <__main__.NominalizerTerminal object at 0x100ebdf98>, '-', <__main__.SemanticTerminal object at 0x100ebdf60>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '+definite'}
we picked l_5: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+feminine', '+definite'}
    diacritic: l_5
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 36.20000000000015
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_9
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.19999999999983
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.40000000000007
line done
line done

---------------------

input line #514
input roots: [<__main__.Root object at 0x100ea7780>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 54.40000000000037..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.19999999999774..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.700000000000113..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.800000000000114..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78240>, '-', <__main__.AgrTerminal object at 0x100ebd550>, '#', <__main__.Root object at 0x100e89eb8>, '-', <__main__.NominalizerTerminal object at 0x100e89160>, '-', <__main__.SemanticTerminal object at 0x100e89828>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: unoo#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 17.700000000000003
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 34.30000000000016
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.599999999999955
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 27.700000000000024
line done
line done

---------------------

input line #515
input roots: [<__main__.Root object at 0x100e84668>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 44.10000000000022..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.29999999999774..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.100000000000126..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 35.900000000000226..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.30000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.60000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 45.80000000000023..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.20000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.39999999999773..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 45.90000000000023..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.00000000000023..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.70000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.000000000000234..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.200000000000127..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.10000000000023..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.099999999999994..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd908>, '-', <__main__.AgrTerminal object at 0x100e78630>, '#', <__main__.Root object at 0x100e6ec88>, '-', <__main__.NominalizerTerminal object at 0x100e61eb8>, '-', <__main__.SemanticTerminal object at 0x100ebde80>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#PIBLING-a
full_pronunciation: une#PIBLINGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 46.000000000000234
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 21.50000000000003
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_7
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 39.90000000000005
line done
line done

---------------------

input line #516
input roots: [<__main__.Root object at 0x100ebd8d0>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 152.49999999999773..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 44.20000000000022..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.700000000000145..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.59999999999772..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.50000000000037..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.800000000000146..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecccf8>, '-', <__main__.AgrTerminal object at 0x100ebd4a8>, '#', <__main__.Root object at 0x100e83550>, '-', <__main__.NominalizerTerminal object at 0x100e83940>, '-', <__main__.SemanticTerminal object at 0x100e83cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#MILKCOW-e
full_pronunciation: la#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 152.59999999999772
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 33.70000000000013
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.699999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.80000000000002
line done
line done

---------------------

input line #517
input roots: [<__main__.Root object at 0x100ecc128>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8cdd8>, '-', <__main__.AgrTerminal object at 0x100eccba8>, '#', <__main__.Root object at 0x100e45d30>, '-', <__main__.NominalizerTerminal object at 0x100e65c88>, '-', <__main__.SemanticTerminal object at 0x100e7b630>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#KEY-e
full_pronunciation: la#KEYe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 32.699999999999996..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.60000000000005..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.500000000000014..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.79999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.30000000000001..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.0..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.299999999999983..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 152.49999999999773
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 44.20000000000022
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.4
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.09999999999983
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 27.700000000000024
line done
line done

---------------------

input line #518
input roots: [<__main__.Root object at 0x100e8c278>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7908>, '-', <__main__.AgrTerminal object at 0x100e78048>, '#', <__main__.Root object at 0x100e44240>, '-', <__main__.NominalizerTerminal object at 0x100e44550>, '-', <__main__.SemanticTerminal object at 0x100ea7f28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: lo#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 152.99999999999773
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 54.50000000000037
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.59999999999983
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 39.90000000000005
line done
line done

---------------------

input line #519
input roots: [<__main__.Root object at 0x100ea7d30>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 44.800000000000225..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 152.99999999999773..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.30000000000013..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.20000000000023..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.40000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.70000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.000000000000234..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.30000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 153.09999999999772..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.100000000000236..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.30000000000023..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.80000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.20000000000024..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.40000000000013..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.40000000000023..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.199999999999996..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73780>, '-', <__main__.AgrTerminal object at 0x100ea7e48>, '#', <__main__.Root object at 0x100e7e668>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e73a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: una#PIBLING-a
full_pronunciation: unoa#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 17.6
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 44.800000000000225
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_6
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.49999999999983
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.30000000000007
line done
line done

---------------------

input line #520
input roots: [<__main__.Root object at 0x100e442b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 153.19999999999771..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 44.800000000000225..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.400000000000276..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 153.2999999999977..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.50000000000037..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.50000000000028..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.10000000000026..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.40000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 153.3999999999977..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 153.4999999999977..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.400000000000155..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 41.60000000000028..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.20000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.30000000000026..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.50000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.50000000000013..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.800000000000132..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.60000000000037..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.20000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 153.5999999999977..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 27.900000000000134..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'MOUSE_3', 'null_7', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b4e0>, '-', <__main__.AgrTerminal object at 0x100eb1e80>, '#', <__main__.Root object at 0x100ea0a90>, '-', <__main__.NominalizerTerminal object at 0x100ea0dd8>, '-', <__main__.SemanticTerminal object at 0x100e9b5f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 48.70000000000044
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 26.599999999999955..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.70000000000001..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.70000000000002..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 19.80000000000003..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.299999999999997..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.8..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.399999999999984..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.299999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 153.5999999999977
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 41.60000000000028
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.39999999999983
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 38.800000000000054
line done
line done

---------------------

input line #521
input roots: [<__main__.Root object at 0x100e9bc50>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 154.1999999999977..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 44.900000000000226..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 30.900000000000148..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.29999999999768..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.70000000000037..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.00000000000015..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89e10>, '-', <__main__.AgrTerminal object at 0x100ea0358>, '#', <__main__.Root object at 0x100e666d8>, '-', <__main__.NominalizerTerminal object at 0x100e66978>, '-', <__main__.SemanticTerminal object at 0x100e66908>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: la#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 154.29999999999768
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 33.80000000000013
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_8
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.699999999999996
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.80000000000002
line done
line done

---------------------

input line #522
input roots: [<__main__.Root object at 0x100ea0320>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 45.00000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.29999999999768..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.50000000000013..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.500000000000234..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.50000000000016..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.80000000000013..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.30000000000024..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.500000000000156..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.39999999999768..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.40000000000024..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.600000000000236..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 33.900000000000134..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.50000000000024..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.600000000000133..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.70000000000024..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.299999999999997..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea04a8>, '-', <__main__.AgrTerminal object at 0x100e66978>, '#', <__main__.Root object at 0x100e9beb8>, '-', <__main__.NominalizerTerminal object at 0x100e9b5c0>, '-', <__main__.SemanticTerminal object at 0x100e9b5f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_11: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#CAR-a
full_pronunciation: uno#CARo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 46.50000000000024
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 54.70000000000037
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_11
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.20000000000007
line done
line done

---------------------

input line #523
input roots: [<__main__.Root object at 0x100ea0438>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 154.49999999999767..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.10000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.20000000000028..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.59999999999766..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.70000000000037..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.30000000000028..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.40000000000026..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.60000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.69999999999766..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.79999999999765..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.60000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.40000000000028..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.50000000000026..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.600000000000264..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.60000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.70000000000013..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.000000000000135..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.800000000000374..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.30000000000005..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 154.89999999999765..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.100000000000136..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'CASTLE_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi CASTLE_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'CASTLE_1', 'CASTLE_3', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e73198>, '-', <__main__.AgrTerminal object at 0x100e7fbe0>, '#', <__main__.Root object at 0x100e927f0>, '-', <__main__.NominalizerTerminal object at 0x100e92fd0>, '-', <__main__.SemanticTerminal object at 0x100e92080>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out CASTLE terminal with values set()
we picked CASTLE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.80000000000001..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.800000000000022..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 19.90000000000003..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.4..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.900000000000002..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.499999999999984..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.399999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 154.89999999999765
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 23.30000000000005
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.200000000000003
     what if we combine triggers with the otherwise identical vi CASTLE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.599999999999955
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 39.400000000000055
line done
line done

---------------------

input line #524
input roots: [<__main__.Root object at 0x100ea0710>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7c50>, '-', <__main__.AgrTerminal object at 0x100e79be0>, '#', <__main__.Root object at 0x100ea7b38>, '-', <__main__.NominalizerTerminal object at 0x100ea7208>, '-', <__main__.SemanticTerminal object at 0x100ea7d30>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 155.39999999999765
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.10000000000023
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.599999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.200000000000024
line done
line done

---------------------

input line #525
input roots: [<__main__.Root object at 0x100e92dd8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ccc0>, '-', <__main__.AgrTerminal object at 0x100ea7f28>, '#', <__main__.Root object at 0x100e8c588>, '-', <__main__.NominalizerTerminal object at 0x100e8c8d0>, '-', <__main__.SemanticTerminal object at 0x100e8c940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#CAR-a
full_pronunciation: le#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 155.29999999999765
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 21.60000000000003
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_2
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.49999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.100000000000023
line done
line done

---------------------

input line #526
input roots: [<__main__.Root object at 0x100ea7d68>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 45.10000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 155.29999999999765..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.700000000000134..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.80000000000024..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.600000000000165..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.000000000000135..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.50000000000024..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.70000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 155.39999999999765..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.60000000000024..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 36.90000000000024..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.100000000000136..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.700000000000244..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.800000000000136..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.00000000000024..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.4..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecce48>, '-', <__main__.AgrTerminal object at 0x100ea70b8>, '#', <__main__.Root object at 0x100ecce10>, '-', <__main__.NominalizerTerminal object at 0x100ecc198>, '-', <__main__.SemanticTerminal object at 0x100eccc18>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: una#TOWER-e
full_pronunciation: uno#TOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 46.700000000000244
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 54.800000000000374
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.39999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.100000000000023
line done
line done

---------------------

input line #527
input roots: [<__main__.Root object at 0x100e83b70>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.200000000000053..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.700000000000166..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.00000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd828>, '-', <__main__.AgrTerminal object at 0x100ecc668>, '#', <__main__.Root object at 0x100ebdc88>, '-', <__main__.NominalizerTerminal object at 0x100ebdcf8>, '-', <__main__.SemanticTerminal object at 0x100ebd2e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 155.39999999999765
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.10000000000023
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.099999999999955
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.20000000000005
line done
line done

---------------------

input line #528
input roots: [<__main__.Root object at 0x100ecc630>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 155.39999999999765..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.10000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.10000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 155.49999999999764..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.800000000000374..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.200000000000152..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56e10>, '-', <__main__.AgrTerminal object at 0x100ebd860>, '#', <__main__.Root object at 0x100e864e0>, '-', <__main__.NominalizerTerminal object at 0x100e86dd8>, '-', <__main__.SemanticTerminal object at 0x100e86cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: le#FROG-e
full_pronunciation: la#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 155.49999999999764
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 34.100000000000136
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.89999999999983
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 39.900000000000055
line done
line done

---------------------

input line #529
input roots: [<__main__.Root object at 0x100e56a20>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd7b8>, '-', <__main__.AgrTerminal object at 0x100e56a58>, '#', <__main__.Root object at 0x100ecc668>, '-', <__main__.NominalizerTerminal object at 0x100ecc4e0>, '-', <__main__.SemanticTerminal object at 0x100e6edd8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 49.20000000000045
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.700000000000053..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.500000000000014..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.89999999999999..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.400000000000013..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.1..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.399999999999984..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.299999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 155.39999999999765
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 34.000000000000135
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.29999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.20000000000005
line done
line done

---------------------

input line #530
input roots: [<__main__.Root object at 0x100e56e10>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 155.99999999999764..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.20000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.300000000000153..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.09999999999764..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 54.900000000000375..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.400000000000155..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e835f8>, '-', <__main__.AgrTerminal object at 0x100ecc240>, '#', <__main__.Root object at 0x100e65c88>, '-', <__main__.NominalizerTerminal object at 0x100e833c8>, '-', <__main__.SemanticTerminal object at 0x100e83a90>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CHILD-e
full_pronunciation: la#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 156.09999999999764
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 34.500000000000135
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.79999999999983
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.90000000000002
line done
line done

---------------------

input line #531
input roots: [<__main__.Root object at 0x100e75c50>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 55.00000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.09999999999764..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 26.900000000000116..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.000000000000117..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ba90>, '-', <__main__.AgrTerminal object at 0x100e83b70>, '#', <__main__.Root object at 0x100ea7cc0>, '-', <__main__.NominalizerTerminal object at 0x100ea7518>, '-', <__main__.SemanticTerminal object at 0x100e6bb00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#FLOWER-e
full_pronunciation: una#FLOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '-feminine'}
    diacritic: un_1
    triggers: set()
    weight: 27.000000000000117
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.20000000000023
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.900000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.70000000000005
line done
line done

---------------------

input line #532
input roots: [<__main__.Root object at 0x100e6bf98>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 55.10000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.19999999999763..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.000000000000117..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.10000000000012..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e445c0>, '-', <__main__.AgrTerminal object at 0x100ea7d68>, '#', <__main__.Root object at 0x100e92c88>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e44390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FLOWER-e
full_pronunciation: una#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 37.00000000000024
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.10000000000023
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 14.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.999999999999954
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.200000000000024
line done
line done

---------------------

input line #533
input roots: [<__main__.Root object at 0x100ebd588>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 156.29999999999762..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.10000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.500000000000156..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.39999999999762..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.20000000000038..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.600000000000158..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_11', 'PIBLING_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e739b0>, '-', <__main__.AgrTerminal object at 0x100e445f8>, '#', <__main__.Root object at 0x100e7fd30>, '-', <__main__.NominalizerTerminal object at 0x100e7fe48>, '-', <__main__.SemanticTerminal object at 0x100e7e9b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#PIBLING-e
full_pronunciation: la#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 156.39999999999762
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 34.400000000000134
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.699999999999825
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.90000000000002
line done
line done

---------------------

input line #534
input roots: [<__main__.Root object at 0x100e7ecf8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 55.30000000000038..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.39999999999762..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.20000000000012..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.30000000000012..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0cc0>, '-', <__main__.AgrTerminal object at 0x100e9bcf8>, '#', <__main__.Root object at 0x100ea0940>, '-', <__main__.NominalizerTerminal object at 0x100ea0c88>, '-', <__main__.SemanticTerminal object at 0x100ea0470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: uni#FOOTa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 46.60000000000024
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 32.70000000000013
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.60000000000005
line done
line done

---------------------

input line #535
input roots: [<__main__.Root object at 0x100ea7160>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 156.4999999999976..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.20000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.500000000000284..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.5999999999976..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.40000000000038..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.600000000000286..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.700000000000266..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.70000000000013..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.6999999999976..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.7999999999976..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.80000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 42.70000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.80000000000027..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 36.90000000000027..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.60000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.80000000000013..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.200000000000138..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.500000000000384..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 23.900000000000052..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 156.8999999999976..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.30000000000014..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'BOOK_1', 'i_1', 'null_5', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86f98>, '-', <__main__.AgrTerminal object at 0x100ea0e48>, '#', <__main__.Root object at 0x100e72160>, '-', <__main__.NominalizerTerminal object at 0x100e86c88>, '-', <__main__.SemanticTerminal object at 0x100e86320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_5: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked i_1: no super match (neither decl nor L1-gender)
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 49.600000000000456
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 18.900000000000013..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 18.900000000000023..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.000000000000032..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.5..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.000000000000004..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.599999999999984..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.499999999999982..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 156.8999999999976
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 42.70000000000029
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 26.899999999999952
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 39.900000000000055
line done
line done

---------------------

input line #536
input roots: [<__main__.Root object at 0x100e86f28>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0278>, '-', <__main__.AgrTerminal object at 0x100e66be0>, '#', <__main__.Root object at 0x100ea0b38>, '-', <__main__.NominalizerTerminal object at 0x100ea0fd0>, '-', <__main__.SemanticTerminal object at 0x100ea0da0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: la#CHILDo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.3999999999976
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 36.80000000000016
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_9
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.599999999999824
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.20000000000007
line done
line done

---------------------

input line #537
input roots: [<__main__.Root object at 0x100e89c50>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 157.3999999999976..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.30000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.30000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.49999999999758..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.600000000000385..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.40000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.00000000000027..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 32.900000000000134..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.59999999999758..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.69999999999757..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.80000000000016..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.50000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.10000000000027..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.20000000000027..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.70000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.000000000000135..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.40000000000014..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.70000000000039..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.000000000000053..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.79999999999757..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.500000000000142..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7ecf8>, '-', <__main__.AgrTerminal object at 0x100e9b5f8>, '#', <__main__.Root object at 0x100e73a20>, '-', <__main__.NominalizerTerminal object at 0x100e73710>, '-', <__main__.SemanticTerminal object at 0x100e5e978>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.79999999999757
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 43.50000000000029
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.49999999999982
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.80000000000002
line done
line done

---------------------

input line #538
input roots: [<__main__.Root object at 0x100ea0358>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.300000000000054..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.80000000000017..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.100000000000023..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e44d68>, '-', <__main__.AgrTerminal object at 0x100e7e4a8>, '#', <__main__.Root object at 0x100ea72e8>, '-', <__main__.NominalizerTerminal object at 0x100ea7320>, '-', <__main__.SemanticTerminal object at 0x100e79be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.69999999999757
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 55.70000000000039
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.39999999999982
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.200000000000024
line done
line done

---------------------

input line #539
input roots: [<__main__.Root object at 0x100e86eb8>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7bda0>, '-', <__main__.AgrTerminal object at 0x100e6bda0>, '#', <__main__.Root object at 0x100e8c940>, '-', <__main__.NominalizerTerminal object at 0x100e8c0f0>, '-', <__main__.SemanticTerminal object at 0x100e8c358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'o'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.59999999999758
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.30000000000023
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_8
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.79999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.20000000000007
line done
line done

---------------------

input line #540
input roots: [<__main__.Root object at 0x100e7fd30>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.400000000000055..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 34.90000000000017..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.200000000000024..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e83278>, '-', <__main__.AgrTerminal object at 0x100e8c400>, '#', <__main__.Root object at 0x100ecc2b0>, '-', <__main__.NominalizerTerminal object at 0x100e75588>, '-', <__main__.SemanticTerminal object at 0x100e83cf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: lo#CLOWN-o
full_pronunciation: la#CLOWNa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.49999999999758
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.20000000000023
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.29999999999982
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.70000000000005
line done
line done

---------------------

input line #541
input roots: [<__main__.Root object at 0x100e83550>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 45.20000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.49999999999758..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 28.900000000000137..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.00000000000024..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.00000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.400000000000134..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.60000000000024..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 36.90000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.59999999999758..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.700000000000244..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.10000000000024..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.500000000000135..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 46.800000000000246..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.00000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.200000000000244..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.5..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6e828>, '-', <__main__.AgrTerminal object at 0x100e83a90>, '#', <__main__.Root object at 0x100ebd7b8>, '-', <__main__.NominalizerTerminal object at 0x100ebd9b0>, '-', <__main__.SemanticTerminal object at 0x100ebd9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.800000000000054..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.600000000000016..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 16.999999999999993..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.500000000000014..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.200000000000003..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.499999999999986..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.299999999999983..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.399999999999984..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 46.800000000000246
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.20000000000023
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 32.69999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 40.70000000000005
line done
line done

---------------------

input line #542
input roots: [<__main__.Root object at 0x100e8c978>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 55.70000000000039..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.69999999999757..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.400000000000123..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.500000000000124..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ef8208>, '-', <__main__.AgrTerminal object at 0x100e78390>, '#', <__main__.Root object at 0x100ef8438>, '-', <__main__.NominalizerTerminal object at 0x100ef83c8>, '-', <__main__.SemanticTerminal object at 0x100ef82e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 47.300000000000246
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.70000000000023
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.19999999999982
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.30000000000007
line done
line done

---------------------

input line #543
input roots: [<__main__.Root object at 0x100ebd908>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e72160>, '-', <__main__.AgrTerminal object at 0x100e83b70>, '#', <__main__.Root object at 0x100e86f98>, '-', <__main__.NominalizerTerminal object at 0x100e86240>, '-', <__main__.SemanticTerminal object at 0x100e6ec88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 157.69999999999757
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 45.60000000000023
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.09999999999982
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.20000000000007
line done
line done

---------------------

input line #544
input roots: [<__main__.Root object at 0x100e6bc50>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 45.60000000000023..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.69999999999757..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.10000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.300000000000246..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.10000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.600000000000136..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 47.300000000000246..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 37.00000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.79999999999757..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 47.40000000000025..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.40000000000025..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 34.70000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 47.50000000000025..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.20000000000014..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.50000000000025..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.6..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e66d68>, '-', <__main__.AgrTerminal object at 0x100e86320>, '#', <__main__.Root object at 0x100e89e80>, '-', <__main__.NominalizerTerminal object at 0x100e66a20>, '-', <__main__.SemanticTerminal object at 0x100e66c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: una#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 50.200000000000465
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 33.29999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 20.900000000000055..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.700000000000017..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.600000000000016..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.300000000000004..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.599999999999987..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.399999999999984..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.499999999999986..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 47.50000000000025
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 34.70000000000014
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 31.999999999999815
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.200000000000024
line done
line done

---------------------

input line #545
input roots: [<__main__.Root object at 0x100e66128>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 157.89999999999756..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.70000000000023..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.50000000000029..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 157.99999999999756..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.80000000000039..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.60000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.300000000000274..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.100000000000136..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.09999999999755..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.19999999999754..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 37.100000000000165..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.700000000000294..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.400000000000276..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.50000000000028..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.800000000000033..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.20000000000014..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.600000000000144..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 55.90000000000039..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.100000000000055..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.29999999999754..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.700000000000145..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7fe80>, '-', <__main__.AgrTerminal object at 0x100e89240>, '#', <__main__.Root object at 0x100ea0978>, '-', <__main__.NominalizerTerminal object at 0x100ea0f98>, '-', <__main__.SemanticTerminal object at 0x100ea0940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_14: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 158.29999999999754
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 33.20000000000014
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_1
    triggers: set()
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_14
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.800000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.700000000000017
line done
line done

---------------------

input line #546
input roots: [<__main__.Root object at 0x100e785c0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 56.00000000000039..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.29999999999754..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.600000000000126..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.700000000000127..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea03c8>, '-', <__main__.AgrTerminal object at 0x100e7fc50>, '#', <__main__.Root object at 0x100ea0ba8>, '-', <__main__.NominalizerTerminal object at 0x100ea0f28>, '-', <__main__.SemanticTerminal object at 0x100ea05f8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: uno#GRANDPARENTo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 50.40000000000047
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.499999999999954..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.000000000000014..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.000000000000025..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.100000000000033..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.6..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.100000000000005..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.699999999999983..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.599999999999982..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 48.00000000000025
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 35.10000000000017
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.499999999999815
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.20000000000007
line done
line done

---------------------

input line #547
input roots: [<__main__.Root object at 0x100ea06d8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 56.10000000000039..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.39999999999753..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.80000000000013..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 27.90000000000013..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc470>, '-', <__main__.AgrTerminal object at 0x100ea0ef0>, '#', <__main__.Root object at 0x100ea7518>, '-', <__main__.NominalizerTerminal object at 0x100ea7a90>, '-', <__main__.SemanticTerminal object at 0x100ea7c50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#MOUSE-o
full_pronunciation: uno#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 48.50000000000025
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 35.60000000000017
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.499999999999954
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 41.300000000000054
line done
line done

---------------------

input line #548
input roots: [<__main__.Root object at 0x100eccba8>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 158.49999999999753..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.80000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.70000000000016..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 158.59999999999752..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 56.200000000000394..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.80000000000016..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi MILKCOW_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'MILKCOW_3', 'MILKCOW_1', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9bd68>, '-', <__main__.AgrTerminal object at 0x100ea7f28>, '#', <__main__.Root object at 0x100e9b390>, '-', <__main__.NominalizerTerminal object at 0x100e9bfd0>, '-', <__main__.SemanticTerminal object at 0x100e9bcf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#MILKCOW-e
full_pronunciation: la#MILKCOWe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 158.59999999999752
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 35.20000000000014
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.999999999999815
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.700000000000017
line done
line done

---------------------

input line #549
input roots: [<__main__.Root object at 0x100ea7cc0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.700000000000017..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e84940>, '-', <__main__.AgrTerminal object at 0x100e9b7b8>, '#', <__main__.Root object at 0x100e759b0>, '-', <__main__.NominalizerTerminal object at 0x100e757f0>, '-', <__main__.SemanticTerminal object at 0x100e84b00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 50.60000000000047
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.000000000000057..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.80000000000002..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.199999999999996..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.700000000000017..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.400000000000006..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.69999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.499999999999986..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.599999999999987..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 158.49999999999753
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 37.100000000000165
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_5
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 33.29999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 41.300000000000054
line done
line done

---------------------

input line #550
input roots: [<__main__.Root object at 0x100e84240>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 159.09999999999752..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 45.90000000000023..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 31.900000000000162..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 159.19999999999752..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 56.300000000000395..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 32.00000000000016..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.700000000000017..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'null_11', 'FROG_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e4ada0>, '-', <__main__.AgrTerminal object at 0x100e84cf8>, '#', <__main__.Root object at 0x100ea7780>, '-', <__main__.NominalizerTerminal object at 0x100ea7d68>, '-', <__main__.SemanticTerminal object at 0x100ea7080>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#FROG-e
full_pronunciation: le#FROGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 50.900000000000475
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 33.89999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.10000000000006..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 18.90000000000002..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.299999999999997..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.80000000000002..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.500000000000007..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.79999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.599999999999987..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.69999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 159.19999999999752
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 32.00000000000016
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
     what if we combine triggers with the otherwise identical vi FROG_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 32.899999999999814
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 25.700000000000017
line done
line done

---------------------

input line #551
input roots: [<__main__.Root object at 0x100e9bfd0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.80000000000002..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'BALL_1'}
     what if we combine triggers with the otherwise identical vi BALL_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BALL_2', 'BALL_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecccf8>, '-', <__main__.AgrTerminal object at 0x100ea7be0>, '#', <__main__.Root object at 0x100ecce10>, '-', <__main__.NominalizerTerminal object at 0x100ecc240>, '-', <__main__.SemanticTerminal object at 0x100ecc4a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 51.20000000000048
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 33.99999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.20000000000006..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.00000000000002..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.4..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.90000000000002..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.60000000000001..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.89999999999999..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.69999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.79999999999999..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 159.69999999999752
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 35.100000000000136
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 13.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 33.399999999999814
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 41.900000000000055
line done
line done

---------------------

input line #552
input roots: [<__main__.Root object at 0x100ea77f0>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 56.4000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.2999999999975..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.00000000000013..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.100000000000133..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea05c0>, '-', <__main__.AgrTerminal object at 0x100e84828>, '#', <__main__.Root object at 0x100ea0668>, '-', <__main__.NominalizerTerminal object at 0x100ea0630>, '-', <__main__.SemanticTerminal object at 0x100ea09b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'-feminine'}
we picked null_1: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#CLOWN-o
full_pronunciation: uno#CLOWNo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.499999999999954..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.100000000000016..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.100000000000026..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.200000000000035..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.700000000000003..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.200000000000006..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.799999999999983..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.699999999999982..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 48.40000000000025
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 56.4000000000004
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_1
    triggers: set()
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 33.899999999999814
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 34.90000000000007
line done
line done

---------------------

input line #553
input roots: [<__main__.Root object at 0x100e84748>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 160.3999999999975..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.000000000000234..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.800000000000296..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.4999999999975..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 57.0000000000004..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 43.9000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.60000000000028..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.20000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.5999999999975..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.6999999999975..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 37.700000000000166..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.0000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.70000000000028..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.80000000000028..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.900000000000034..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.30000000000014..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.800000000000146..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 57.1000000000004..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.200000000000056..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.79999999999748..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 28.900000000000148..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e78860>, '-', <__main__.AgrTerminal object at 0x100ea0eb8>, '#', <__main__.Root object at 0x100e89b00>, '-', <__main__.NominalizerTerminal object at 0x100e89160>, '-', <__main__.SemanticTerminal object at 0x100e78128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: lo#PIBLINGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 160.79999999999748
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 35.50000000000017
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 34.399999999999814
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 26.200000000000017
line done
line done

---------------------

input line #554
input roots: [<__main__.Root object at 0x100e9b390>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 18.90000000000002..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: MILKCOW in its selectional

now working with the word 'MILKCOW-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'MILKCOW_1'}
     what if we combine triggers with the otherwise identical vi MILKCOW_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'MILKCOW_2', 'null_10', 'a_1', 'MILKCOW_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e56a20>, '-', <__main__.AgrTerminal object at 0x100e785c0>, '#', <__main__.Root object at 0x100e86320>, '-', <__main__.NominalizerTerminal object at 0x100e86748>, '-', <__main__.SemanticTerminal object at 0x100e65c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MILKCOW terminal with values set()
we picked MILKCOW_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_3: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: la#MILKCOW-a
full_pronunciation: la#MILKCOWo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 160.6999999999975
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.000000000000234
VocabularyItem:
    pronunciation: MILKCOW
    label: MILKCOW
    values: set()
    diacritic: MILKCOW_1
    triggers: set()
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_3
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.600000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 35.40000000000007
line done
line done

---------------------

input line #555
input roots: [<__main__.Root object at 0x100e7a7f0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 57.2000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.6999999999975..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.200000000000134..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.300000000000136..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'e_5', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FOOT_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_2', 'null_5', 'null_13', 'FOOT_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e449b0>, '-', <__main__.AgrTerminal object at 0x100e86940>, '#', <__main__.Root object at 0x100e3ec88>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e44550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: uno#FOOT-e
full_pronunciation: uno#FOOTe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.599999999999955..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.200000000000017..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.200000000000028..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.300000000000036..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.800000000000004..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.300000000000008..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.899999999999983..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.799999999999981..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 48.90000000000025
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 57.2000000000004
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 34.29999999999981
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 28.800000000000026
line done
line done

---------------------

input line #556
input roots: [<__main__.Root object at 0x100e44d68>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 57.8000000000004..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.79999999999748..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.400000000000137..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.50000000000014..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75d30>, '-', <__main__.AgrTerminal object at 0x100e83128>, '#', <__main__.Root object at 0x100ebde80>, '-', <__main__.NominalizerTerminal object at 0x100ebd6a0>, '-', <__main__.SemanticTerminal object at 0x100ebd6d8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#PIBLING-o
full_pronunciation: uni#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 49.40000000000025
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 33.30000000000014
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_6
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 34.79999999999981
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 35.40000000000007
line done
line done

---------------------

input line #557
input roots: [<__main__.Root object at 0x100e75a90>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.00000000000002..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e720f0>, '-', <__main__.AgrTerminal object at 0x100e75a20>, '#', <__main__.Root object at 0x100e86eb8>, '-', <__main__.NominalizerTerminal object at 0x100e86470>, '-', <__main__.SemanticTerminal object at 0x100e6ef28>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#GRANDPARENT-a
full_pronunciation: le#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 160.79999999999748
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 21.900000000000034
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 34.69999999999981
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 42.60000000000006
line done
line done

---------------------

input line #558
input roots: [<__main__.Root object at 0x100e6bb00>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 160.79999999999748..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.000000000000234..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.1000000000003..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.89999999999748..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 57.900000000000404..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.2000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 37.90000000000028..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.30000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 160.99999999999747..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 161.09999999999746..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 37.80000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.3000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.000000000000284..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.100000000000286..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.900000000000034..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 33.40000000000014..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.00000000000015..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 58.000000000000405..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.300000000000058..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 161.19999999999746..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.10000000000015..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e66d68>, '-', <__main__.AgrTerminal object at 0x100e868d0>, '#', <__main__.Root object at 0x100e89320>, '-', <__main__.NominalizerTerminal object at 0x100e669e8>, '-', <__main__.SemanticTerminal object at 0x100e66c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FOOT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 51.40000000000048
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.699999999999957..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.30000000000002..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.30000000000003..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.400000000000038..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.900000000000006..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.40000000000001..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 14.999999999999982..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.89999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 161.19999999999746
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 33.40000000000014
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.400000000000002
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 34.59999999999981
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 40.80000000000006
line done
line done

---------------------

input line #559
input roots: [<__main__.Root object at 0x100e66908>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 161.79999999999745..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.100000000000236..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 32.600000000000165..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 161.89999999999745..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 58.100000000000406..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 32.700000000000166..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.80000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'OFFSPRING_1', 'OFFSPRING_7', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e65d68>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7fe80>, '-', <__main__.AgrTerminal object at 0x100e89908>, '#', <__main__.Root object at 0x100ea04a8>, '-', <__main__.NominalizerTerminal object at 0x100ea0940>, '-', <__main__.SemanticTerminal object at 0x100ea0208>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked le_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#OFFSPRING-e
full_pronunciation: lee#OFFSPRINGi
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'+definite', '-atomic'}
    diacritic: le_1
    triggers: set()
    weight: 18.80000000000002
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 21.900000000000034
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 33.99999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 41.30000000000006
line done
line done

---------------------

input line #560
input roots: [<__main__.Root object at 0x100e56710>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 46.20000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 161.99999999999744..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.300000000000143..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.60000000000025..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.50000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 35.70000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.40000000000025..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 37.90000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.09999999999744..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.50000000000025..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.70000000000025..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 35.80000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.60000000000025..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.400000000000144..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 37.80000000000025..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.700000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0f28>, '-', <__main__.AgrTerminal object at 0x100ea0a90>, '#', <__main__.Root object at 0x100ecc2b0>, '-', <__main__.NominalizerTerminal object at 0x100e61eb8>, '-', <__main__.SemanticTerminal object at 0x100ea0b38>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#PIBLING-a
full_pronunciation: una#PIBLINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 51.80000000000049
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 33.99999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.30000000000006..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.100000000000023..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.5..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.00000000000002..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.70000000000001..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 16.999999999999993..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.79999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.89999999999999..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 37.80000000000025
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 37.90000000000017
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 35.09999999999981
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 42.60000000000006
line done
line done

---------------------

input line #561
input roots: [<__main__.Root object at 0x100ea02b0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 58.20000000000041..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.19999999999743..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.60000000000014..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.70000000000014..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'BOOK_1'}
     what if we combine triggers with the otherwise identical vi BOOK_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_3', 'BOOK_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e52048>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7630>, '-', <__main__.AgrTerminal object at 0x100eccf28>, '#', <__main__.Root object at 0x100ea7e10>, '-', <__main__.NominalizerTerminal object at 0x100ea7a90>, '-', <__main__.SemanticTerminal object at 0x100ea7240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '-feminine'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out BOOK terminal with values set()
we picked BOOK_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 49.60000000000025
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.20000000000024
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.699999999999957
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 43.10000000000006
line done
line done

---------------------

input line #562
input roots: [<__main__.Root object at 0x100ecc4a8>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 21.500000000000057..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.60000000000017..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.300000000000026..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'o_1', 'null_6', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'null_6', 'null_5', 'CLOWN_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e9b240>, '-', <__main__.AgrTerminal object at 0x100ea7208>, '#', <__main__.Root object at 0x100e9bbe0>, '-', <__main__.NominalizerTerminal object at 0x100e9b4e0>, '-', <__main__.SemanticTerminal object at 0x100e9bcf8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked l_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#CLOWN-o
full_pronunciation: lo#CLOWNo
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.699999999999957..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.40000000000002..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.40000000000003..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.50000000000004..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.000000000000007..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.50000000000001..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.099999999999982..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 15.99999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: l_3
    triggers: set()
    weight: 21.500000000000057
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 58.20000000000041
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 35.59999999999981
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 35.50000000000007
line done
line done

---------------------

input line #563
input roots: [<__main__.Root object at 0x100e7a7f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 162.29999999999742..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.20000000000024..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.400000000000304..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.39999999999742..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 58.80000000000041..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.500000000000306..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.20000000000029..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.00000000000014..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.4999999999974..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.5999999999974..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 38.50000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.60000000000031..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.30000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.40000000000029..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.900000000000034..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.10000000000014..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.200000000000152..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 58.90000000000041..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.40000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 162.6999999999974..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.300000000000153..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'FLOWER_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FLOWER_1', 'FLOWER_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd7b8>, '-', <__main__.AgrTerminal object at 0x100e9b7f0>, '#', <__main__.Root object at 0x100ebd940>, '-', <__main__.NominalizerTerminal object at 0x100ebd550>, '-', <__main__.SemanticTerminal object at 0x100ebd9e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 52.00000000000049
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.799999999999958..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.50000000000002..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.500000000000032..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.60000000000004..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.10000000000001..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.600000000000012..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.199999999999982..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.09999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 162.6999999999974
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 34.10000000000014
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.3
     what if we combine triggers with the otherwise identical vi FLOWER_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 36.09999999999981
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 41.30000000000006
line done
line done

---------------------

input line #564
input roots: [<__main__.Root object at 0x100ebdcf8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 46.30000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.2999999999974..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.500000000000146..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.400000000000254..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.70000000000017..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 35.90000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.60000000000025..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 38.60000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.3999999999974..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.70000000000025..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.500000000000256..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.00000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 49.80000000000025..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.600000000000147..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.60000000000026..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.800000000000004..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7d68>, '-', <__main__.AgrTerminal object at 0x100e84c50>, '#', <__main__.Root object at 0x100ea79e8>, '-', <__main__.NominalizerTerminal object at 0x100ea78d0>, '-', <__main__.SemanticTerminal object at 0x100ea72e8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: una#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 52.10000000000049
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.400000000000063..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.200000000000024..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.6..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.100000000000023..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.80000000000001..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.89999999999999..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.999999999999993..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 49.80000000000025
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 38.60000000000017
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 33.99999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 29.400000000000027
line done
line done

---------------------

input line #565
input roots: [<__main__.Root object at 0x100e9bbe0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 163.49999999999739..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.40000000000024..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 32.80000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.59999999999738..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.00000000000041..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 32.90000000000017..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.80000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'BALL_1', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi BALL_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_11', 'BALL_1', 'BALL_3', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc470>, '-', <__main__.AgrTerminal object at 0x100e849b0>, '#', <__main__.Root object at 0x100ecc4e0>, '-', <__main__.NominalizerTerminal object at 0x100ecc208>, '-', <__main__.SemanticTerminal object at 0x100ecc7b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out BALL terminal with values set()
we picked BALL_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '-atomic'}
we picked e_3 bc its pronunciation was locally triggered
input pronunciation: le#BALL-e
full_pronunciation: la#BALLe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 163.59999999999738
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 36.00000000000014
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.5
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 34.49999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 26.30000000000002
line done
line done

---------------------

input line #566
input roots: [<__main__.Root object at 0x100eccd30>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.100000000000023..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b70>, '-', <__main__.AgrTerminal object at 0x100ea7c50>, '#', <__main__.Root object at 0x100ea0780>, '-', <__main__.NominalizerTerminal object at 0x100ea0c18>, '-', <__main__.SemanticTerminal object at 0x100ea07f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: la#GRANDPARENT-a
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 163.49999999999739
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 35.90000000000014
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 36.59999999999981
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.00000000000007
line done
line done

---------------------

input line #567
input roots: [<__main__.Root object at 0x100ea0c88>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 22.10000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.800000000000175..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.400000000000027..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'null_5', 'CHILD_1', 'CHILD_3', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89240>, '-', <__main__.AgrTerminal object at 0x100ea0a20>, '#', <__main__.Root object at 0x100e89b70>, '-', <__main__.NominalizerTerminal object at 0x100e89978>, '-', <__main__.SemanticTerminal object at 0x100e89588>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: lo#CHILD-o
full_pronunciation: la#CHILDe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 163.3999999999974
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.40000000000024
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000003
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.799999999999958
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 29.900000000000027
line done
line done

---------------------

input line #568
input roots: [<__main__.Root object at 0x100e785c0>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 163.3999999999974..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.40000000000024..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.70000000000031..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.49999999999739..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.10000000000041..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.80000000000031..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.50000000000029..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.700000000000145..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.59999999999738..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.69999999999737..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 39.20000000000017..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 44.90000000000031..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.60000000000029..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.700000000000294..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 22.000000000000036..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.800000000000146..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.400000000000155..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.200000000000415..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.50000000000006..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 163.79999999999737..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.500000000000156..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.700000000000017..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_1', 'i_1', 'null_5', 'PIBLING_7', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86dd8>, '-', <__main__.AgrTerminal object at 0x100e66c18>, '#', <__main__.Root object at 0x100e86fd0>, '-', <__main__.NominalizerTerminal object at 0x100e860b8>, '-', <__main__.SemanticTerminal object at 0x100e86240>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_8: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#PIBLING-i
full_pronunciation: li#PIBLINGi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: PIBLING to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 52.400000000000496
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.799999999999958..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.600000000000023..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.600000000000033..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.700000000000042..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.20000000000001..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.700000000000014..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.299999999999981..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.19999999999998..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 163.79999999999737
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 44.90000000000031
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_8
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 36.49999999999981
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 41.90000000000006
line done
line done

---------------------

input line #569
input roots: [<__main__.Root object at 0x100e89e80>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 22.20000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 35.900000000000176..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.50000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_5', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'FLOWER_1', 'null_5', 'null_13'}
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'null_13', 'FLOWER_1', 'e_5', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6bc50>, '-', <__main__.AgrTerminal object at 0x100e72390>, '#', <__main__.Root object at 0x100e75438>, '-', <__main__.NominalizerTerminal object at 0x100e83cf8>, '-', <__main__.SemanticTerminal object at 0x100e83550>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_3: no super match (neither decl nor L1-gender)
now spelling out FLOWER terminal with values set()
we picked FLOWER_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 52.7000000000005
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.89999999999996..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.700000000000024..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.700000000000035..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.800000000000043..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.30000000000001..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.800000000000015..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.39999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.299999999999983..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 164.29999999999737
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'-feminine'}
    diacritic: o_3
    triggers: set()
    weight: 35.900000000000176
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
     what if we combine triggers with the otherwise identical vi FLOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 36.99999999999981
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 29.900000000000027
line done
line done

---------------------

input line #570
input roots: [<__main__.Root object at 0x100e86eb8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 59.300000000000416..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 164.89999999999736..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.800000000000143..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 28.900000000000144..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd208>, '-', <__main__.AgrTerminal object at 0x100e6bf98>, '#', <__main__.Root object at 0x100e738d0>, '-', <__main__.NominalizerTerminal object at 0x100e73a90>, '-', <__main__.SemanticTerminal object at 0x100e73a20>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: unoa#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 18.600000000000016
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.40000000000024
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.49999999999981
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.10000000000007
line done
line done

---------------------

input line #571
input roots: [<__main__.Root object at 0x100e735f8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 59.40000000000042..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 164.99999999999736..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 29.000000000000146..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 29.100000000000147..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5', 'MOUSE_1'}
     what if we combine triggers with the otherwise identical vi MOUSE_3 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_2', 'null_6', 'null_5', 'o_1', 'MOUSE_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7bda0>, '-', <__main__.AgrTerminal object at 0x100ebd940>, '#', <__main__.Root object at 0x100e44550>, '-', <__main__.NominalizerTerminal object at 0x100e5db70>, '-', <__main__.SemanticTerminal object at 0x100e6bb00>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out MOUSE terminal with values set()
we picked MOUSE_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: uno#MOUSE-o
full_pronunciation: uni#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 38.60000000000026
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 34.800000000000146
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.89999999999996
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.10000000000007
line done
line done

---------------------

input line #572
input roots: [<__main__.Root object at 0x100e6bf98>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 165.09999999999735..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.40000000000024..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.00000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.19999999999735..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.50000000000042..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.10000000000017..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 18.90000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86320>, '-', <__main__.AgrTerminal object at 0x100e7ba90>, '#', <__main__.Root object at 0x100e56a20>, '-', <__main__.NominalizerTerminal object at 0x100e56ef0>, '-', <__main__.SemanticTerminal object at 0x100e86c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_9: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#KEY-i
full_pronunciation: le#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.19999999999735
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.999999999999991
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 34.39999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 26.200000000000017
line done
line done

---------------------

input line #573
input roots: [<__main__.Root object at 0x100e86b38>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 165.19999999999735..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.50000000000024..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 45.50000000000031..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.29999999999734..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.60000000000042..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 45.600000000000314..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.800000000000296..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.800000000000146..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.39999999999733..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.49999999999733..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 39.300000000000175..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 45.700000000000315..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 38.9000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.0000000000003..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 22.100000000000037..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 34.90000000000015..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.600000000000158..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.70000000000042..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.600000000000062..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.59999999999732..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.70000000000016..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.80000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_4', 'i_1', 'null_5', 'CHILD_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89160>, '-', <__main__.AgrTerminal object at 0x100e66c18>, '#', <__main__.Root object at 0x100e781d0>, '-', <__main__.NominalizerTerminal object at 0x100e78048>, '-', <__main__.SemanticTerminal object at 0x100e78390>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CHILD-i
full_pronunciation: le#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.59999999999732
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.899999999999991
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_4
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.100000000000003
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.39999999999981
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 42.600000000000065
line done
line done

---------------------

input line #574
input roots: [<__main__.Root object at 0x100e89a20>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.200000000000024..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0f28>, '-', <__main__.AgrTerminal object at 0x100e66be0>, '#', <__main__.Root object at 0x100ea05c0>, '-', <__main__.NominalizerTerminal object at 0x100ea0668>, '-', <__main__.SemanticTerminal object at 0x100ea0898>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_19: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#CAR-a
full_pronunciation: la#CARe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.49999999999733
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 39.300000000000175
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_19
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 17.099999999999994
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 30.400000000000027
line done
line done

---------------------

input line #575
input roots: [<__main__.Root object at 0x100ea0c88>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 46.60000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.49999999999733..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.70000000000015..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.60000000000026..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 36.50000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 35.90000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 50.400000000000254..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 39.300000000000175..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.59999999999732..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 50.500000000000256..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.70000000000026..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.00000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 50.60000000000026..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.80000000000015..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.80000000000026..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 17.900000000000006..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61278>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc2e8>, '-', <__main__.AgrTerminal object at 0x100ea0f98>, '#', <__main__.Root object at 0x100eccf60>, '-', <__main__.NominalizerTerminal object at 0x100ecc710>, '-', <__main__.SemanticTerminal object at 0x100ecc668>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: una#GRANDPARENTa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 52.8000000000005
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.500000000000064..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.300000000000026..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.700000000000003..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.200000000000024..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 18.900000000000013..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.999999999999993..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.099999999999994..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 50.60000000000026
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 39.300000000000175
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 34.29999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 43.30000000000006
line done
line done

---------------------

input line #576
input roots: [<__main__.Root object at 0x100eccfd0>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.300000000000026..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'CHILD_1'}
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CHILD_1', 'CHILD_2', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7c88>, '-', <__main__.AgrTerminal object at 0x100eccdd8>, '#', <__main__.Root object at 0x100e84828>, '-', <__main__.NominalizerTerminal object at 0x100e84940>, '-', <__main__.SemanticTerminal object at 0x100ea7ac8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CHILD-a
full_pronunciation: le#CHILDa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.59999999999732
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 22.100000000000037
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 34.79999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 43.90000000000006
line done
line done

---------------------

input line #577
input roots: [<__main__.Root object at 0x100ecc940>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 22.30000000000006..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 36.60000000000018..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.60000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1e10>, '-', <__main__.AgrTerminal object at 0x100ea7278>, '#', <__main__.Root object at 0x100eb12b0>, '-', <__main__.NominalizerTerminal object at 0x100eb1d68>, '-', <__main__.SemanticTerminal object at 0x100eb1320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_9: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: la#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.49999999999733
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.60000000000024
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_9
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.799999999999958
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 43.80000000000006
line done
line done

---------------------

input line #578
input roots: [<__main__.Root object at 0x100e9b978>]
input values: [{'+definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.400000000000027..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: OFFSPRING in its selectional

now working with the word 'OFFSPRING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'OFFSPRING_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi OFFSPRING_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'OFFSPRING_5', 'null_10', 'OFFSPRING_1', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea77f0>, '-', <__main__.AgrTerminal object at 0x100e9b748>, '#', <__main__.Root object at 0x100ea72b0>, '-', <__main__.NominalizerTerminal object at 0x100ea7320>, '-', <__main__.SemanticTerminal object at 0x100ea70b8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out OFFSPRING terminal with values set()
we picked OFFSPRING_7: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: la#OFFSPRING-a
full_pronunciation: la#OFFSPRINGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: OFFSPRING to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 53.20000000000051
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.600000000000065..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.400000000000027..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.800000000000004..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.300000000000026..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.000000000000014..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.199999999999996..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.099999999999994..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.199999999999996..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 165.39999999999733
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 36.00000000000014
VocabularyItem:
    pronunciation: OFFSPRING
    label: OFFSPRING
    values: set()
    diacritic: OFFSPRING_7
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000003
     what if we combine triggers with the otherwise identical vi OFFSPRING_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi OFFSPRING_5 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 34.69999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 43.80000000000006
line done
line done

---------------------

input line #579
input roots: [<__main__.Root object at 0x100ea7358>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 46.60000000000024..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 165.99999999999733..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 29.90000000000015..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 38.90000000000026..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 36.70000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.60000000000014..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.20000000000026..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 39.900000000000176..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.09999999999732..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.30000000000026..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.00000000000026..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.700000000000145..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.40000000000026..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 30.000000000000153..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.100000000000264..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.000000000000007..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ecc518>, '-', <__main__.AgrTerminal object at 0x100ea7780>, '#', <__main__.Root object at 0x100ea0358>, '-', <__main__.NominalizerTerminal object at 0x100ea0240>, '-', <__main__.SemanticTerminal object at 0x100ecce80>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#TOWER-e
full_pronunciation: una#TOWERe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOWER to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 53.50000000000051
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.700000000000067..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.50000000000003..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 17.900000000000006..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.400000000000027..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.100000000000016..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.299999999999997..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.199999999999996..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.299999999999997..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 30.000000000000153
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 39.900000000000176
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.3
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 35.19999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 30.400000000000027
line done
line done

---------------------

input line #580
input roots: [<__main__.Root object at 0x100ecc7f0>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 46.700000000000244..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.19999999999732..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 30.600000000000154..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.200000000000266..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 36.80000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.800000000000146..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.50000000000026..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 40.50000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.2999999999973..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.600000000000264..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.30000000000027..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.90000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.700000000000266..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 30.700000000000156..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.40000000000027..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.10000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'GRANDPARENT_1'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'GRANDPARENT_3', 'a_1', 'GRANDPARENT_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0978>, '-', <__main__.AgrTerminal object at 0x100eccc88>, '#', <__main__.Root object at 0x100ea09b0>, '-', <__main__.NominalizerTerminal object at 0x100ea0c50>, '-', <__main__.SemanticTerminal object at 0x100ea0470>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_17: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#GRANDPARENT-a
full_pronunciation: unoa#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 18.600000000000016
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 36.90000000000015
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_1
    triggers: set()
    weight: 11.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_17
    triggers: {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}
    weight: 20.400000000000027
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 44.40000000000006
line done
line done

---------------------

input line #581
input roots: [<__main__.Root object at 0x100ea04a8>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.50000000000003..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89320>, '-', <__main__.AgrTerminal object at 0x100ea0b38>, '#', <__main__.Root object at 0x100e667b8>, '-', <__main__.NominalizerTerminal object at 0x100e66128>, '-', <__main__.SemanticTerminal object at 0x100e66c88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#CAR-a
full_pronunciation: lo#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 166.2999999999973
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 59.70000000000042
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_4
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.299999999999805
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 44.40000000000006
line done
line done

---------------------

input line #582
input roots: [<__main__.Root object at 0x100e89588>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 166.2999999999973..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 46.800000000000246..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.20000000000017..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.3999999999973..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.70000000000042..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.300000000000175..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 19.00000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e86a90>, '-', <__main__.AgrTerminal object at 0x100e66d68>, '#', <__main__.Root object at 0x100e720f0>, '-', <__main__.NominalizerTerminal object at 0x100e6ed68>, '-', <__main__.SemanticTerminal object at 0x100e65940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_5: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#CHILD-e
full_pronunciation: le#CHILDi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 166.3999999999973
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 22.000000000000036
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_5
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.199999999999804
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 42.500000000000064
line done
line done

---------------------

input line #583
input roots: [<__main__.Root object at 0x100e864e0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.60000000000003..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e754e0>, '-', <__main__.AgrTerminal object at 0x100e44240>, '#', <__main__.Root object at 0x100ebd550>, '-', <__main__.NominalizerTerminal object at 0x100ebd7f0>, '-', <__main__.SemanticTerminal object at 0x100ebd940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: la#TOWER-e
full_pronunciation: la#TOWERe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.800000000000068..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.60000000000003..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.000000000000007..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.400000000000027..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.200000000000017..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.4..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.299999999999997..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.4..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 166.2999999999973
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 46.800000000000246
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 35.69999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 31.00000000000003
line done
line done

---------------------

input line #584
input roots: [<__main__.Root object at 0x100e75b00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 47.40000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.8999999999973..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 30.800000000000157..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.50000000000027..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 36.90000000000018..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 36.90000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.80000000000027..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 40.60000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 166.9999999999973..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 51.90000000000027..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.60000000000027..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.00000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.00000000000027..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 30.90000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.70000000000027..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.20000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100eb1828>, '-', <__main__.AgrTerminal object at 0x100e6bf98>, '#', <__main__.Root object at 0x100eb1a90>, '-', <__main__.NominalizerTerminal object at 0x100eb1898>, '-', <__main__.SemanticTerminal object at 0x100eb1ba8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: unoe#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 21.900000000000034
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.0999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 31.60000000000003
line done
line done

---------------------

input line #585
input roots: [<__main__.Root object at 0x100e6e828>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.70000000000003..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd550>, '-', <__main__.AgrTerminal object at 0x100eb1320>, '#', <__main__.Root object at 0x100e75048>, '-', <__main__.NominalizerTerminal object at 0x100e75cf8>, '-', <__main__.SemanticTerminal object at 0x100ebd940>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null', 'a'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 21.90000000000007..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.70000000000003..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.10000000000001..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.50000000000003..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.30000000000002..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.5..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.4..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.5..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 166.9999999999973
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 47.40000000000025
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 11.500000000000002
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 36.19999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 44.40000000000006
line done
line done

---------------------

input line #586
input roots: [<__main__.Root object at 0x100eb1d30>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 22.400000000000063..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.000000000000185..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.70000000000003..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73e80>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ec88>, '-', <__main__.AgrTerminal object at 0x100ebd6d8>, '#', <__main__.Root object at 0x100e86470>, '-', <__main__.NominalizerTerminal object at 0x100e86fd0>, '-', <__main__.SemanticTerminal object at 0x100e869b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#GRANDPARENT-o
full_pronunciation: la#GRANDPARENTo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 167.4999999999973
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 47.90000000000025
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_2
    triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.699999999999957
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.200000000000074
line done
line done

---------------------

input line #587
input roots: [<__main__.Root object at 0x100eb1668>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e921d0>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: la_1, triggers = set(), weight = 19.800000000000033..already existed
  we're in a functional word...
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'FROG_1'}
     what if we combine triggers with the otherwise identical vi FROG_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FROG_1', 'FROG_2', 'null_10', 'a_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61240>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e89748>, '-', <__main__.AgrTerminal object at 0x100e566a0>, '#', <__main__.Root object at 0x100e89908>, '-', <__main__.NominalizerTerminal object at 0x100e89828>, '-', <__main__.SemanticTerminal object at 0x100e89710>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '+atomic'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out FROG terminal with values set()
we picked FROG_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked e_5: no super match (neither decl nor L1-gender)
input pronunciation: la#FROG-a
full_pronunciation: lo#FROGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 167.3999999999973
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 59.70000000000042
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.4
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 36.69999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 31.50000000000003
line done
line done

---------------------

input line #588
input roots: [<__main__.Root object at 0x100e86a20>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 167.3999999999973..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 47.90000000000025..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 45.80000000000032..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 167.4999999999973..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.70000000000042..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 45.90000000000032..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.1000000000003..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.00000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 167.5999999999973..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 167.6999999999973..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 40.70000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 46.00000000000032..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.2000000000003..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.3000000000003..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 21.900000000000034..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.10000000000015..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.80000000000016..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.80000000000042..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.700000000000063..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 167.79999999999728..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 29.900000000000162..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 18.90000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_2 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_3 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'GRANDPARENT_4', 'i_1', 'null_5', 'GRANDPARENT_1', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e73c50>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea0b70>, '-', <__main__.AgrTerminal object at 0x100e89b00>, '#', <__main__.Root object at 0x100ea0ef0>, '-', <__main__.NominalizerTerminal object at 0x100ea0da0>, '-', <__main__.SemanticTerminal object at 0x100ea04a8>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-feminine'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#GRANDPARENT-i
full_pronunciation: li#GRANDPARENTi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: GRANDPARENT to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 53.50000000000051
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.699999999999957..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.800000000000026..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.800000000000036..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 20.900000000000045..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.400000000000013..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 18.900000000000016..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.49999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.399999999999984..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 167.79999999999728
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 46.00000000000032
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.400000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 36.9999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 42.500000000000064
line done
line done

---------------------

input line #589
input roots: [<__main__.Root object at 0x100e7fe80>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 168.39999999999728..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 48.00000000000025..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.400000000000176..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.49999999999727..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 59.900000000000425..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.50000000000018..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 19.100000000000023..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a7b8>, '-', <__main__.AgrTerminal object at 0x100ea0208>, '#', <__main__.Root object at 0x100ecc1d0>, '-', <__main__.NominalizerTerminal object at 0x100ecc2b0>, '-', <__main__.SemanticTerminal object at 0x100ecc048>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked a_3: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: la#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 168.49999999999727
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine'}
    diacritic: a_3
    triggers: set()
    weight: 37.00000000000015
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.100000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.4999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 43.100000000000065
line done
line done

---------------------

input line #590
input roots: [<__main__.Root object at 0x100ea03c8>]
input values: [{'-definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5edd8>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: o_2, triggers = set(), weight = 60.000000000000426..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.49999999999727..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 29.20000000000015..already existed

create_vi: tried definite: un_1, triggers = set(), weight = 29.30000000000015..already existed

create_vi: tried definite: uno_2, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: GRANDPARENT in its selectional

now working with the word 'GRANDPARENT-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'GRANDPARENT_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi GRANDPARENT_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi GRANDPARENT_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_6', 'GRANDPARENT_1', 'null_5', 'GRANDPARENT_2', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e61208>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7cf8>, '-', <__main__.AgrTerminal object at 0x100e5a1d0>, '#', <__main__.Root object at 0x100ea70b8>, '-', <__main__.NominalizerTerminal object at 0x100ea7320>, '-', <__main__.SemanticTerminal object at 0x100ea7358>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked uno_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'-definite', '+atomic', '-feminine'}
we picked i_3: no super match (neither decl nor L1-gender)
now spelling out GRANDPARENT terminal with values set()
we picked GRANDPARENT_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'null', 'a', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: uno#GRANDPARENT-o
full_pronunciation: unoi#GRANDPARENTa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_2
    triggers: set()
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-feminine'}
    diacritic: i_3
    triggers: set()
    weight: 35.10000000000015
VocabularyItem:
    pronunciation: GRANDPARENT
    label: GRANDPARENT
    values: set()
    diacritic: GRANDPARENT_6
    triggers: {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.900000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.3999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 45.000000000000064
line done
line done

---------------------

input line #591
input roots: [<__main__.Root object at 0x100eccc50>]
input values: [{'-definite'}, {'+atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 48.10000000000025..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.59999999999727..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.00000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.800000000000274..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.100000000000186..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.00000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.10000000000027..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 40.80000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.69999999999726..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.20000000000027..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 39.900000000000276..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.10000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.300000000000274..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.10000000000016..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 40.00000000000028..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.30000000000001..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10', 'PIBLING_1'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'PIBLING_1', 'null_10', 'a_1', 'PIBLING_2'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e7e4a8>, '-', <__main__.AgrTerminal object at 0x100ea77f0>, '#', <__main__.Root object at 0x100e7e940>, '-', <__main__.NominalizerTerminal object at 0x100e7e3c8>, '-', <__main__.SemanticTerminal object at 0x100e7e9b0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_4: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked a_1: no super match (neither decl nor L1-gender)
input pronunciation: una#PIBLING-a
full_pronunciation: una#PIBLINGa
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 22.00000000000007..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.800000000000033..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.20000000000001..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.60000000000003..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.40000000000002..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.6..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.5..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.6..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: un_4
    triggers: set()
    weight: 40.00000000000028
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 48.10000000000025
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.000000000000002
     what if we combine triggers with the otherwise identical vi PIBLING_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_5 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 36.59999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 45.000000000000064
line done
line done

---------------------

input line #592
input roots: [<__main__.Root object at 0x100ea7a90>]
input values: [{'+definite'}, {'+atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_3, triggers = set(), weight = 22.500000000000064..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.20000000000019..already existed

create_vi: tried definite: lo_1, triggers = set(), weight = 19.800000000000033..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'-feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: PIBLING in its selectional

now working with the word 'PIBLING-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_1', 'null_6', 'PIBLING_1', 'null_5'}
     what if we combine triggers with the otherwise identical vi PIBLING_3 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi PIBLING_7 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'PIBLING_5', 'PIBLING_1', 'null_6', 'null_5', 'o_1'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e72f28>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea7908>, '-', <__main__.AgrTerminal object at 0x100e7eda0>, '#', <__main__.Root object at 0x100ea7ba8>, '-', <__main__.NominalizerTerminal object at 0x100ea7208>, '-', <__main__.SemanticTerminal object at 0x100ea7128>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '+atomic'}
we picked lo_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '+atomic', '-feminine'}
we picked o_2: no super match (neither decl nor L1-gender)
now spelling out PIBLING terminal with values set()
we picked PIBLING_6: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'o', 'null', '-feminine'}
we picked null_5 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'o', '+atomic'}
we picked o_1 bc its pronunciation was locally triggered
input pronunciation: lo#PIBLING-o
full_pronunciation: loo#PIBLINGo
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 19.800000000000033
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 60.000000000000426
VocabularyItem:
    pronunciation: PIBLING
    label: PIBLING
    values: set()
    diacritic: PIBLING_6
    triggers: {('e', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'-feminine'}
    diacritic: null_5
    triggers: set()
    weight: 27.699999999999957
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.300000000000075
line done
line done

---------------------

input line #593
input roots: [<__main__.Root object at 0x100e849b0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 168.79999999999725..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 48.70000000000025..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 46.60000000000032..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.89999999999725..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.000000000000426..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 46.70000000000032..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.400000000000304..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.10000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 168.99999999999724..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 169.09999999999724..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 40.90000000000018..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 46.800000000000324..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.500000000000306..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.60000000000031..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 22.000000000000036..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.20000000000015..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 30.000000000000163..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.10000000000043..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 24.800000000000065..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 169.19999999999723..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 30.100000000000165..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 19.00000000000002..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: FOOT in its selectional

now working with the word 'FOOT-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FOOT_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5', 'FOOT_1', 'null_7', 'FOOT_3'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e4db38>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e5a7b8>, '-', <__main__.AgrTerminal object at 0x100ea7780>, '#', <__main__.Root object at 0x100ea0208>, '-', <__main__.NominalizerTerminal object at 0x100ea03c8>, '-', <__main__.SemanticTerminal object at 0x100ea07f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite', '-atomic'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_4: no super match (neither decl nor L1-gender)
now spelling out FOOT terminal with values set()
we picked FOOT_3: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#FOOT-i
full_pronunciation: li#FOOTi
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.699999999999957..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 19.900000000000027..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 19.900000000000038..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 21.000000000000046..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.500000000000014..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 19.000000000000018..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.59999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.499999999999986..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 169.19999999999723
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_4
    triggers: set()
    weight: 24.800000000000065
VocabularyItem:
    pronunciation: FOOT
    label: FOOT
    values: set()
    diacritic: FOOT_3
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.900000000000002
     what if we combine triggers with the otherwise identical vi FOOT_2 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.2999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 43.100000000000065
line done
line done

---------------------

input line #594
input roots: [<__main__.Root object at 0x100eccf60>]
input values: [{'+definite'}, {'-atomic'}, {'-feminine'}]
we selected the nominalizer with values: {'-feminine'}
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e6c6a0>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 169.79999999999723..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 48.80000000000025..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 46.900000000000325..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 169.89999999999722..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.20000000000043..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 47.00000000000033..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.70000000000031..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.30000000000015..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 169.99999999999721..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 170.0999999999972..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 41.000000000000185..already existed

create_vi: tried Agr: i_2, triggers = set(), weight = 47.10000000000033..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.80000000000031..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 39.90000000000031..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 22.100000000000037..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 35.400000000000155..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 30.200000000000166..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.30000000000043..already existed

create_vi: tried Agr: i_4, triggers = set(), weight = 25.400000000000066..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 170.1999999999972..already existed

create_vi: tried definite: l_4, triggers = set(), weight = 30.300000000000168..already existed

create_vi: tried definite: li_2, triggers = set(), weight = 19.100000000000023..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic', '-feminine'}
  - but that newvi helped us find a new Agr node vi: e_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: i_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic', '-feminine'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '-atomic', '-feminine'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'-feminine'} has root Root: CLOWN in its selectional

now working with the word 'CLOWN-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_7', 'null_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_7', 'null_5'}
     what if we combine triggers with the otherwise identical vi CLOWN_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CLOWN_1', 'i_1', 'null_5', 'CLOWN_2', 'null_7'}
done processing input, time to test
we selected the nominalizer with values: {'-feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6a390>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ea09b0>, '-', <__main__.AgrTerminal object at 0x100ea02b0>, '#', <__main__.Root object at 0x100e7fe80>, '-', <__main__.NominalizerTerminal object at 0x100e4ada0>, '-', <__main__.SemanticTerminal object at 0x100ea0320>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+definite', '-atomic', '-feminine'}
we picked i_2: no super match (neither decl nor L1-gender)
now spelling out CLOWN terminal with values set()
we picked CLOWN_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'i', 'null', '-feminine'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: li#CLOWN-i
full_pronunciation: li#CLOWNi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CLOWN to the selectional of the nominalizer whose values are {'-feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'-feminine'}
    selectional: {'PIBLING', 'GRANDPARENT', 'CHILD', 'CASTLE', 'FOOT', 'CLOWN', 'OFFSPRING', 'FLOWER', 'BOOK', 'MOUSE'}
    selection_strength: True
    weight: 54.20000000000052
    linear: (<__main__.NominalizerTerminal object at 0x100e2a0b8>,)

create_vi: tried nominalizer: null_5, triggers = set(), weight = 27.799999999999958..already existed

create_vi: tried nominalizer: null_6, triggers = {('o', frozenset({'+atomic'}))}, weight = 20.00000000000003..already existed

create_vi: tried nominalizer: null_7, triggers = {('i', frozenset({'-atomic'}))}, weight = 20.00000000000004..already existed

create_vi: tried nominalizer: null_8, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 21.100000000000048..already existed

create_vi: tried nominalizer: null_13, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.600000000000016..already existed

create_vi: tried nominalizer: null_15, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 19.10000000000002..already existed

create_vi: tried nominalizer: null_21, triggers = {('a', frozenset({'+atomic'}))}, weight = 15.69999999999998..already existed

create_vi: tried nominalizer: null_22, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 16.599999999999987..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 170.1999999999972
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic', '-feminine'}
    diacritic: i_2
    triggers: set()
    weight: 47.10000000000033
VocabularyItem:
    pronunciation: CLOWN
    label: CLOWN
    values: set()
    diacritic: CLOWN_4
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 12.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 37.7999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 43.70000000000007
line done
line done

---------------------

input line #595
input roots: [<__main__.Root object at 0x100ea0ba8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 48.900000000000254..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 170.7999999999972..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.200000000000163..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 40.60000000000028..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.30000000000019..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.20000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.400000000000276..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 41.100000000000186..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 170.8999999999972..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.50000000000028..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 40.70000000000028..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.30000000000015..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.60000000000028..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.300000000000164..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 40.80000000000028..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.400000000000013..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: TOWER in its selectional

now working with the word 'TOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOWER_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi TOWER_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'TOWER_3', 'null_16', 'TOWER_1', 'e_5'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e66be0>, '-', <__main__.AgrTerminal object at 0x100e5a1d0>, '#', <__main__.Root object at 0x100e66978>, '-', <__main__.NominalizerTerminal object at 0x100e66a20>, '-', <__main__.SemanticTerminal object at 0x100e66c18>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked un_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out TOWER terminal with values set()
we picked TOWER_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'+atomic'}
we picked o_1: no super match (neither decl nor L1-gender)
input pronunciation: una#TOWER-e
full_pronunciation: une#TOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_2
    triggers: set()
    weight: 52.60000000000028
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 22.100000000000037
VocabularyItem:
    pronunciation: TOWER
    label: TOWER
    values: set()
    diacritic: TOWER_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.200000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 37.09999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 36.200000000000074
line done
line done

---------------------

input line #596
input roots: [<__main__.Root object at 0x100e89eb8>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 49.000000000000256..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 170.9999999999972..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.400000000000166..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 40.90000000000028..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.40000000000019..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.400000000000155..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.60000000000028..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 41.20000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 171.09999999999718..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.70000000000028..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 41.000000000000284..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.500000000000156..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.80000000000028..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 31.500000000000167..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 41.100000000000286..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.500000000000014..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_5', 'null_9', 'null_16'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'e_5', 'null_9', 'null_16'}
     what if we combine triggers with the otherwise identical vi KEY_2 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_16', 'e_5', 'KEY_1', 'KEY_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e611d0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e6ef28>, '-', <__main__.AgrTerminal object at 0x100e89e10>, '#', <__main__.Root object at 0x100e44390>, '-', <__main__.NominalizerTerminal object at 0x100e72390>, '-', <__main__.SemanticTerminal object at 0x100e720f0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+feminine', '-definite'}
we picked un_3: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked a_4: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_4: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'e', '+feminine', 'null'}
we picked null_9 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'e', '+atomic'}
we picked e_5 bc its pronunciation was locally triggered
input pronunciation: una#KEY-e
full_pronunciation: una#KEYe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 55.100000000000534
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 22.100000000000072..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 19.900000000000034..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.30000000000001..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.70000000000003..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.50000000000002..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.700000000000003..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.6..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.700000000000003..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'+feminine', '-definite'}
    diacritic: un_3
    triggers: set()
    weight: 31.500000000000167
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+feminine', '+atomic'}
    diacritic: a_4
    triggers: set()
    weight: 41.20000000000019
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_4
    triggers: {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 12.000000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'+feminine'}
    diacritic: null_9
    triggers: set()
    weight: 36.999999999999986
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_5
    triggers: set()
    weight: 31.60000000000003
line done
line done

---------------------

input line #597
input roots: [<__main__.Root object at 0x100e66828>]
input values: [{'+definite'}, {'-atomic'}, {'+feminine'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 171.19999999999717..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 49.10000000000026..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.60000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 171.29999999999717..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.40000000000043..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.70000000000018..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 19.200000000000024..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CHILD in its selectional

now working with the word 'CHILD-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'e_3', 'null_11'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CHILD_1', 'null_9', 'e_3', 'null_11'}
     what if we combine triggers with the otherwise identical vi CHILD_2 (triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_3 (triggers: {('o', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CHILD_7', 'CHILD_1', 'null_11', 'e_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100ebd780>, '-', <__main__.AgrTerminal object at 0x100e6ec88>, '#', <__main__.Root object at 0x100e73710>, '-', <__main__.NominalizerTerminal object at 0x100e73a20>, '-', <__main__.SemanticTerminal object at 0x100ebdc88>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_1: no super match (neither decl nor L1-gender)
now spelling out CHILD terminal with values set()
we picked CHILD_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'-atomic'}
we picked e_3: no super match (neither decl nor L1-gender)
input pronunciation: le#CHILD-e
full_pronunciation: le#CHILDe
vis_used:
Successful derivation!

create_vi: tried nominalizer: null_9, triggers = set(), weight = 37.59999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 22.200000000000074..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 20.000000000000036..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.400000000000013..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.800000000000033..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.600000000000023..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.800000000000004..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.700000000000003..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.800000000000004..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 171.29999999999717
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 15.799999999999992
VocabularyItem:
    pronunciation: CHILD
    label: CHILD
    values: set()
    diacritic: CHILD_2
    triggers: {('a', frozenset({'+atomic'})), ('null', frozenset())}
    weight: 10.400000000000002
     what if we combine triggers with the otherwise identical vi CHILD_4 (triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())})?
     what if we combine triggers with the otherwise identical vi CHILD_7 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 38.2999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 26.30000000000002
line done
line done

---------------------

input line #598
input roots: [<__main__.Root object at 0x100ea0278>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e4cf28>, <__main__.VocabularyItem object at 0x100e52080>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e5d860>, <__main__.VocabularyItem object at 0x100e5d978>, <__main__.VocabularyItem object at 0x100e5eef0>, <__main__.VocabularyItem object at 0x100e5eeb8>, <__main__.VocabularyItem object at 0x100e921d0>]

create_vi: tried Agr: a_2, triggers = set(), weight = 49.20000000000026..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 171.89999999999716..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 32.10000000000017..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 41.20000000000029..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 37.50000000000019..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.60000000000016..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 52.90000000000028..already existed

create_vi: tried Agr: a_4, triggers = set(), weight = 41.80000000000019..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 171.99999999999716..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 53.000000000000284..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 41.30000000000029..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 37.70000000000016..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 53.100000000000286..already existed

create_vi: tried definite: un_3, triggers = set(), weight = 32.20000000000017..already existed

create_vi: tried definite: un_4, triggers = set(), weight = 41.40000000000029..already existed

create_vi: tried definite: una_2, triggers = set(), weight = 18.600000000000016..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic', '-feminine'} to host {'-feminine'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_4
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '+atomic'} to host {'+feminine', '+atomic'}
  - but that newvi helped us find a new Agr node vi: a_3
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '-definite', '+atomic'} to host {'+feminine'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: CAR in its selectional

now working with the word 'CAR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_9', 'null_10'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CAR_1', 'a_1', 'null_9', 'null_10'}
     what if we combine triggers with the otherwise identical vi CAR_2 (triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'CAR_1', 'a_1', 'CAR_3'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e612b0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e8ca58>, '-', <__main__.AgrTerminal object at 0x100eb1ba8>, '#', <__main__.Root object at 0x100e8c588>, '-', <__main__.NominalizerTerminal object at 0x100e8cf98>, '-', <__main__.SemanticTerminal object at 0x100e8cc50>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'-definite', '+atomic'}
we picked una_2: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '-definite', '+atomic'}
we picked e_4: no super match (neither decl nor L1-gender)
now spelling out CAR terminal with values set()
we picked CAR_1: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine'}
we picked null_2: no super match (neither decl nor L1-gender)
now spelling out atomic terminal with values {'+atomic', 'a'}
we picked a_1 bc its pronunciation was locally triggered
input pronunciation: una#CAR-a
full_pronunciation: unae#CARa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_2
    triggers: set()
    weight: 18.600000000000016
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine'}
    diacritic: e_4
    triggers: set()
    weight: 22.000000000000036
VocabularyItem:
    pronunciation: CAR
    label: CAR
    values: set()
    diacritic: CAR_1
    triggers: set()
    weight: 9.800000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_2
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.900000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 45.600000000000065
line done
line done

---------------------

input line #599
input roots: [<__main__.Root object at 0x100eb1860>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: {'+feminine'}
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x100e3e080>, <__main__.VocabularyItem object at 0x100e44748>, <__main__.VocabularyItem object at 0x100e2a3c8>, <__main__.VocabularyItem object at 0x100e49e48>, <__main__.VocabularyItem object at 0x100e56ba8>, <__main__.VocabularyItem object at 0x100e6a198>, <__main__.VocabularyItem object at 0x100e6a358>, <__main__.VocabularyItem object at 0x100e65208>, <__main__.VocabularyItem object at 0x100e65278>, <__main__.VocabularyItem object at 0x100e73cc0>, <__main__.VocabularyItem object at 0x100e866d8>, <__main__.VocabularyItem object at 0x100e92278>]

create_vi: tried definite: l_1, triggers = set(), weight = 172.09999999999715..already existed

create_vi: tried Agr: a_2, triggers = set(), weight = 49.30000000000026..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.80000000000018..already existed

create_vi: tried definite: l_1, triggers = set(), weight = 172.19999999999715..already existed

create_vi: tried Agr: o_2, triggers = set(), weight = 60.50000000000043..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 33.90000000000018..already existed

create_vi: tried definite: le_1, triggers = set(), weight = 19.300000000000026..already existed
  we're in a functional word...
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - but that newvi helped us find a new Agr node vi: o_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+feminine', '+definite', '-atomic'} to host {'+feminine', '-atomic'}
  - finally, make (sure) the nominalizer with current (non-empty!) values: {'+feminine'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_19', 'null_9'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'i_1', 'null_19', 'null_9'}
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_19', 'i_1', 'KEY_2', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'+feminine'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x100e6c860>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x100e75a20>, '-', <__main__.AgrTerminal object at 0x100eb1828>, '#', <__main__.Root object at 0x100e7ba90>, '-', <__main__.NominalizerTerminal object at 0x100e83e48>, '-', <__main__.SemanticTerminal object at 0x100e79be0>)
------------------------------
 spellout time 
------------------------------
now spelling out definite terminal with values {'+definite'}
we picked l_1: no super match (neither decl nor L1-gender)
now spelling out Agr terminal with values {'+feminine', '+definite', '-atomic'}
we picked e_2: no super match (neither decl nor L1-gender)
now spelling out KEY terminal with values set()
we picked KEY_2: no super match (neither decl nor L1-gender)
now spelling out nominalizer terminal with values {'+feminine', 'i', 'null'}
we picked null_1 bc its pronunciation was locally triggered
now spelling out atomic terminal with values {'i', '-atomic'}
we picked i_1 bc its pronunciation was locally triggered
input pronunciation: le#KEY-i
full_pronunciation: le#KEYi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: KEY to the selectional of the nominalizer whose values are {'+feminine'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'+feminine'}
    selectional: {'MILKCOW', 'PIBLING', 'GRANDPARENT', 'CHILD', 'OFFSPRING', 'CAR', 'FROG', 'TOWER', 'BALL', 'KEY'}
    selection_strength: True
    weight: 55.70000000000054
    linear: (<__main__.NominalizerTerminal object at 0x100e2a048>,)

create_vi: tried nominalizer: null_9, triggers = set(), weight = 37.69999999999999..already existed

create_vi: tried nominalizer: null_10, triggers = {('a', frozenset({'+atomic'}))}, weight = 22.300000000000075..already existed

create_vi: tried nominalizer: null_11, triggers = {('e', frozenset({'-atomic'}))}, weight = 20.100000000000037..already existed

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'+atomic'}))}, weight = 18.500000000000014..already existed

create_vi: tried nominalizer: null_17, triggers = {('a', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 20.900000000000034..already existed

create_vi: tried nominalizer: null_18, triggers = {('e', frozenset({'+atomic'})), ('e', frozenset({'-atomic'}))}, weight = 19.700000000000024..already existed

create_vi: tried nominalizer: null_19, triggers = {('i', frozenset({'-atomic'}))}, weight = 17.900000000000006..already existed

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.800000000000004..already existed

create_vi: tried nominalizer: null_23, triggers = {('a', frozenset({'+atomic'})), ('i', frozenset({'-atomic'}))}, weight = 17.900000000000006..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 172.19999999999715
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'+feminine', '-atomic'}
    diacritic: e_2
    triggers: set()
    weight: 33.90000000000018
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('i', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 11.9
     what if we combine triggers with the otherwise identical vi KEY_3 (triggers: {('e', frozenset({'+atomic'})), ('null', frozenset())})?
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: set()
    diacritic: null_1
    triggers: set()
    weight: 38.7999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 44.30000000000007
line done
line done
