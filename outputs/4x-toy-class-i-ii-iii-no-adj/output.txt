
---------------------

input line #0
input roots: [<__main__.Root object at 0x1070f3820>]
input values: [{'+definite'}, {'-atomic'}]
made our very first nominalizer: NominalizerTerminal:
    label: nominalizer
    values: set()
    selectional: {'SHIP'}
    selection_strength: True
    weight: 10.0
    linear: (<__main__.NominalizerTerminal object at 0x1070f3880>,)
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:

create_vi: made definite: le_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - finally, make (sure) the nominalizer with current values: {'le_1'} has root Root: SHIP in its selectional

now working with the word 'SHIP-i', mapping to 3 terminals:

create_vi: made atomic: i_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}

create_vi: made nominalizer: null_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'i_1'}

create_vi: made nominalizer: null_2, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_1', 'i_1', 'null_2'}

create_vi: made SHIP: SHIP_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'SHIP_1', 'null_1', 'i_1', 'null_2'}

create_vi: made SHIP: SHIP_2, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_2', 'SHIP_2', 'null_1', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'le_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107101790>, '#', <__main__.Root object at 0x1070f3b20>, '-', <__main__.NominalizerTerminal object at 0x107101ca0>, '-', <__main__.SemanticTerminal object at 0x107101b20>)
input pronunciation: le#SHIP-i
full_pronunciation: le#SHIPi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: SHIP to the selectional of the nominalizer whose values are {'le_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'le_1'}
    selectional: {'SHIP'}
    selection_strength: True
    weight: 10.0
    linear: (<__main__.NominalizerTerminal object at 0x1070f3fd0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'le_1'} as values: {'SHIP'}
..so we'll also combine the vis that spell out {'le_1'}

create_vi: tried nominalizer: null_3, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'le_1'}
    diacritic: null_2
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.0
line done

---------------------

input line #1
input roots: [<__main__.Root object at 0x1070f3910>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:

create_vi: made definite: lo_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>]

create_vi: made definite: l_1, triggers = set(), weight = 10.0

create_vi: made Agr: e_1, triggers = set(), weight = 10.0

create_vi: made Agr: o_1, triggers = set(), weight = 10.0
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:

create_vi: made atomic: o_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}

create_vi: made nominalizer: null_3, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}

create_vi: made nominalizer: null_4, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}

create_vi: made BOOK: BOOK_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}

create_vi: made BOOK: BOOK_2, triggers = {('null', frozenset()), ('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071089d0>, '#', <__main__.Root object at 0x107108f10>, '-', <__main__.NominalizerTerminal object at 0x107108ee0>, '-', <__main__.SemanticTerminal object at 0x107108d60>)
input pronunciation: lo#BOOK-o
full_pronunciation: l#BOOKo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 10.0
line done

---------------------

input line #2
input roots: [<__main__.Root object at 0x1070f3790>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:

create_vi: made definite: una_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - finally, make (sure) the nominalizer with current values: {'una_1'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:

create_vi: made atomic: a_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}

create_vi: made nominalizer: null_5, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_5'}

create_vi: made nominalizer: null_6, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_5', 'null_6'}

create_vi: made BALL: BALL_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_5', 'null_6', 'BALL_1'}

create_vi: made BALL: BALL_2, triggers = {('null', frozenset()), ('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_5', 'a_1', 'BALL_1', 'null_6', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10710eca0>, '#', <__main__.Root object at 0x107139220>, '-', <__main__.NominalizerTerminal object at 0x1071391f0>, '-', <__main__.SemanticTerminal object at 0x107139070>)
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.0
line done

---------------------

input line #3
input roots: [<__main__.Root object at 0x107108d90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:

create_vi: made definite: la_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 10.0..already existed

create_vi: made Agr: a_2, triggers = set(), weight = 10.0

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: made definite: un_1, triggers = set(), weight = 10.0

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}

create_vi: made nominalizer: null_7, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}

create_vi: made nominalizer: null_8, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}

create_vi: made ANCHOR: ANCHOR_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}

create_vi: made ANCHOR: ANCHOR_2, triggers = {('null', frozenset()), ('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10713d0a0>, '#', <__main__.Root object at 0x10713d5e0>, '-', <__main__.NominalizerTerminal object at 0x10713d5b0>, '-', <__main__.SemanticTerminal object at 0x10713d430>)
input pronunciation: la#ANCHOR-a
full_pronunciation: la#ANCHORa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #4
input roots: [<__main__.Root object at 0x10710eee0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:

create_vi: made definite: li_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: made Agr: i_2, triggers = set(), weight = 10.0

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}

create_vi: made nominalizer: null_9, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}

create_vi: made nominalizer: null_10, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}

create_vi: made TOMATO: TOMATO_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'TOMATO_1'}

create_vi: made TOMATO: TOMATO_2, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'TOMATO_1', 'null_10', 'TOMATO_2', 'null_9'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10713d7f0>, '-', <__main__.AgrTerminal object at 0x107139eb0>, '#', <__main__.Root object at 0x10713df10>, '-', <__main__.NominalizerTerminal object at 0x10713dee0>, '-', <__main__.SemanticTerminal object at 0x10713d7c0>)
input pronunciation: li#TOMATO-i
full_pronunciation: li#TOMATOi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOMATO to the selectional of the nominalizer whose values are {'i_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2'}
    selectional: {'TOMATO'}
    selection_strength: True
    weight: 10.0
    linear: (<__main__.NominalizerTerminal object at 0x10710e520>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'TOMATO'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_11, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #5
input roots: [<__main__.Root object at 0x107108d90>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}

create_vi: made POTATO: POTATO_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}

create_vi: made POTATO: POTATO_2, triggers = {('null', frozenset()), ('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107141c10>, '#', <__main__.Root object at 0x107142190>, '-', <__main__.NominalizerTerminal object at 0x107142160>, '-', <__main__.SemanticTerminal object at 0x107141fa0>)
input pronunciation: una#POTATO-a
full_pronunciation: una#POTATOa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #6
input roots: [<__main__.Root object at 0x107101d90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:

create_vi: made atomic: e_2, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}

create_vi: made nominalizer: null_11, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}

create_vi: made SHIP: SHIP_3, triggers = {('null', frozenset()), ('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107147520>, '-', <__main__.AgrTerminal object at 0x10713d160>, '#', <__main__.Root object at 0x107147850>, '-', <__main__.NominalizerTerminal object at 0x107147820>, '-', <__main__.SemanticTerminal object at 0x1071476a0>)
input pronunciation: la#SHIP-e
full_pronunciation: lo#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 11.099999999999996
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 10.0
line done

---------------------

input line #7
input roots: [<__main__.Root object at 0x10710e460>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10714b4f0>, '#', <__main__.Root object at 0x10714ba30>, '-', <__main__.NominalizerTerminal object at 0x10714ba00>, '-', <__main__.SemanticTerminal object at 0x10714b880>)
input pronunciation: una#ANCHOR-a
full_pronunciation: una#ANCHORa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #8
input roots: [<__main__.Root object at 0x107139fa0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-e', mapping to 3 terminals:

create_vi: made atomic: e_3, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}

create_vi: made nominalizer: null_12, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}

create_vi: made nominalizer: null_13, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13', 'ANCHOR_1'}

create_vi: made ANCHOR: ANCHOR_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'ANCHOR_1', 'null_13', 'null_12', 'ANCHOR_3'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10714b4f0>, '#', <__main__.Root object at 0x1071470a0>, '-', <__main__.NominalizerTerminal object at 0x107147b50>, '-', <__main__.SemanticTerminal object at 0x10714b190>)
input pronunciation: le#ANCHOR-e
full_pronunciation: l#ANCHORe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 10.0
line done

---------------------

input line #9
input roots: [<__main__.Root object at 0x107147460>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107101d90>, '#', <__main__.Root object at 0x10714f850>, '-', <__main__.NominalizerTerminal object at 0x10714f820>, '-', <__main__.SemanticTerminal object at 0x1071395b0>)
input pronunciation: una#BALL-a
full_pronunciation: una#BALLa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #10
input roots: [<__main__.Root object at 0x107141b20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:

create_vi: made definite: uno_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}

create_vi: made CASTLE: CASTLE_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}

create_vi: made CASTLE: CASTLE_2, triggers = {('null', frozenset()), ('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107144580>, '#', <__main__.Root object at 0x107144ac0>, '-', <__main__.NominalizerTerminal object at 0x107144a90>, '-', <__main__.SemanticTerminal object at 0x107144910>)
input pronunciation: uno#CASTLE-o
full_pronunciation: un#CASTLEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 10.899999999999997
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.9
line done

---------------------

input line #11
input roots: [<__main__.Root object at 0x10714ffa0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107155700>, '#', <__main__.Root object at 0x107155c40>, '-', <__main__.NominalizerTerminal object at 0x107155c10>, '-', <__main__.SemanticTerminal object at 0x107155a90>)
input pronunciation: uno#BOOK-o
full_pronunciation: uno#BOOKo
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #12
input roots: [<__main__.Root object at 0x10714bf40>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107156880>, '#', <__main__.Root object at 0x107156dc0>, '-', <__main__.NominalizerTerminal object at 0x107156d90>, '-', <__main__.SemanticTerminal object at 0x107156c10>)
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.9
line done

---------------------

input line #13
input roots: [<__main__.Root object at 0x10714fe20>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: SHIP in its selectional

now working with the word 'SHIP-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}

create_vi: made nominalizer: null_14, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'null_12', 'SHIP_2', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10715aa30>, '#', <__main__.Root object at 0x10715af70>, '-', <__main__.NominalizerTerminal object at 0x10715af40>, '-', <__main__.SemanticTerminal object at 0x10715adc0>)
input pronunciation: le#SHIP-i
full_pronunciation: le#SHIPi
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #14
input roots: [<__main__.Root object at 0x107156c40>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}

create_vi: made KEY: KEY_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}

create_vi: made KEY: KEY_2, triggers = {('null', frozenset()), ('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071557c0>, '#', <__main__.Root object at 0x1071442e0>, '-', <__main__.NominalizerTerminal object at 0x107144490>, '-', <__main__.SemanticTerminal object at 0x107144ac0>)
input pronunciation: una#KEY-e
full_pronunciation: un#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 11.399999999999995
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #15
input roots: [<__main__.Root object at 0x107156d90>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}

create_vi: made nominalizer: null_15, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}

create_vi: made SHELF: SHELF_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}

create_vi: made SHELF: SHELF_2, triggers = {('null', frozenset()), ('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107153520>, '#', <__main__.Root object at 0x107153a60>, '-', <__main__.NominalizerTerminal object at 0x107153a30>, '-', <__main__.SemanticTerminal object at 0x1071538b0>)
input pronunciation: uno#SHELF-e
full_pronunciation: uno#SHELFe
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #16
input roots: [<__main__.Root object at 0x107141250>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}

create_vi: made MOUSE: MOUSE_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'MOUSE_1', 'i_1'}

create_vi: made MOUSE: MOUSE_2, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'MOUSE_1', 'MOUSE_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107154700>, '#', <__main__.Root object at 0x107154c40>, '-', <__main__.NominalizerTerminal object at 0x107154c10>, '-', <__main__.SemanticTerminal object at 0x107154a90>)
input pronunciation: li#MOUSE-i
full_pronunciation: li#MOUSEi
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #17
input roots: [<__main__.Root object at 0x107153d30>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107148880>, '#', <__main__.Root object at 0x107148dc0>, '-', <__main__.NominalizerTerminal object at 0x107148d90>, '-', <__main__.SemanticTerminal object at 0x107148c10>)
input pronunciation: una#POTATO-a
full_pronunciation: uno#POTATOa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.499999999999998
line done

---------------------

input line #18
input roots: [<__main__.Root object at 0x107142a30>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: SHELF in its selectional

now working with the word 'SHELF-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'SHELF_1'}

create_vi: made SHELF: SHELF_3, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'SHELF_3', 'null_9', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10715da30>, '#', <__main__.Root object at 0x10715df70>, '-', <__main__.NominalizerTerminal object at 0x10715df40>, '-', <__main__.SemanticTerminal object at 0x10715ddc0>)
input pronunciation: li#SHELF-i
full_pronunciation: l#SHELFe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 12.89999999999999
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.9
line done

---------------------

input line #19
input roots: [<__main__.Root object at 0x1071541f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107148dc0>, '#', <__main__.Root object at 0x107154700>, '-', <__main__.NominalizerTerminal object at 0x107154a90>, '-', <__main__.SemanticTerminal object at 0x107154f10>)
input pronunciation: lo#SHELF-e
full_pronunciation: la#SHELFo
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.9
line done

---------------------

input line #20
input roots: [<__main__.Root object at 0x10715dc70>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10715a8b0>, '#', <__main__.Root object at 0x10715fb80>, '-', <__main__.NominalizerTerminal object at 0x10715fb50>, '-', <__main__.SemanticTerminal object at 0x10715f9d0>)
input pronunciation: una#KEY-e
full_pronunciation: un#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 11.999999999999993
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #21
input roots: [<__main__.Root object at 0x10714ff70>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CASTLE_1', 'null_10', 'i_1'}

create_vi: made CASTLE: CASTLE_3, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'CASTLE_3', 'CASTLE_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071627f0>, '#', <__main__.Root object at 0x107162d30>, '-', <__main__.NominalizerTerminal object at 0x107162d00>, '-', <__main__.SemanticTerminal object at 0x107162b80>)
input pronunciation: li#CASTLE-i
full_pronunciation: li#CASTLEi
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #22
input roots: [<__main__.Root object at 0x10715d550>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}

create_vi: made MOUSE: MOUSE_3, triggers = {('null', frozenset()), ('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071639a0>, '#', <__main__.Root object at 0x107163ee0>, '-', <__main__.NominalizerTerminal object at 0x107163eb0>, '-', <__main__.SemanticTerminal object at 0x107163d30>)
input pronunciation: lo#MOUSE-o
full_pronunciation: l#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 13.999999999999986
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #23
input roots: [<__main__.Root object at 0x107162f40>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107166220>, '-', <__main__.AgrTerminal object at 0x10715f670>, '#', <__main__.Root object at 0x107166550>, '-', <__main__.NominalizerTerminal object at 0x107166520>, '-', <__main__.SemanticTerminal object at 0x1071663a0>)
input pronunciation: la#BALL-a
full_pronunciation: lo#BALLe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 14.299999999999985
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 11.499999999999995
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #24
input roots: [<__main__.Root object at 0x1071644f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}

create_vi: made FROG: FROG_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}

create_vi: made FROG: FROG_2, triggers = {('null', frozenset()), ('a', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107164ee0>, '#', <__main__.Root object at 0x107163cd0>, '-', <__main__.NominalizerTerminal object at 0x107163d60>, '-', <__main__.SemanticTerminal object at 0x1071647c0>)
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #25
input roots: [<__main__.Root object at 0x107166d00>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: POTATO in its selectional

now working with the word 'POTATO-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_1', 'null_12', 'e_3', 'null_13'}

create_vi: made POTATO: POTATO_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_3', 'e_3', 'null_13', 'null_12', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716a220>, '-', <__main__.AgrTerminal object at 0x107164970>, '#', <__main__.Root object at 0x10716a550>, '-', <__main__.NominalizerTerminal object at 0x10716a520>, '-', <__main__.SemanticTerminal object at 0x10716a3a0>)
input pronunciation: le#POTATO-e
full_pronunciation: le#POTATOe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: POTATO to the selectional of the nominalizer whose values are {'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'e_1'}
    selectional: {'POTATO', 'SHIP', 'ANCHOR'}
    selection_strength: True
    weight: 11.499999999999995
    linear: (<__main__.NominalizerTerminal object at 0x107108580>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'SHIP', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_16, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'SHIP', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: made nominalizer: null_16, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_16
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_17, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_17
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_18, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_18
    triggers: {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 14.899999999999983
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 11.199999999999996
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.8
line done

---------------------

input line #26
input roots: [<__main__.Root object at 0x107154430>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_12', 'e_3', 'null_13'}

create_vi: made FROG: FROG_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'null_13', 'null_12', 'FROG_1', 'FROG_3'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10714a2e0>, '#', <__main__.Root object at 0x10714a820>, '-', <__main__.NominalizerTerminal object at 0x10714a7f0>, '-', <__main__.SemanticTerminal object at 0x10714a670>)
input pronunciation: le#FROG-e
full_pronunciation: l#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 15.299999999999981
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.499999999999998
line done

---------------------

input line #27
input roots: [<__main__.Root object at 0x1071627f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}

create_vi: made FLOWER: FLOWER_1, triggers = set(), weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}

create_vi: made FLOWER: FLOWER_2, triggers = {('null', frozenset()), ('e', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071654c0>, '#', <__main__.Root object at 0x107165a00>, '-', <__main__.NominalizerTerminal object at 0x1071659d0>, '-', <__main__.SemanticTerminal object at 0x107165850>)
input pronunciation: lo#FLOWER-e
full_pronunciation: lo#FLOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_9
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.499999999999998
line done

---------------------

input line #28
input roots: [<__main__.Root object at 0x10716adc0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'null_12', 'e_3', 'null_13'}

create_vi: made BALL: BALL_3, triggers = {('e', frozenset({'-atomic'})), ('null', frozenset())}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_3', 'BALL_1', 'e_3', 'null_13', 'null_12'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716c670>, '#', <__main__.Root object at 0x10716cbb0>, '-', <__main__.NominalizerTerminal object at 0x10716cb80>, '-', <__main__.SemanticTerminal object at 0x10716ca00>)
input pronunciation: le#BALL-e
full_pronunciation: l#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 15.899999999999979
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #29
input roots: [<__main__.Root object at 0x107165c10>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'null_12', 'null_14', 'i_1'}

create_vi: made KEY: KEY_3, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'KEY_3', 'null_12', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716c730>, '#', <__main__.Root object at 0x107165130>, '-', <__main__.NominalizerTerminal object at 0x107165310>, '-', <__main__.SemanticTerminal object at 0x107165ac0>)
input pronunciation: le#KEY-i
full_pronunciation: le#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.9
line done

---------------------

input line #30
input roots: [<__main__.Root object at 0x107165340>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_3', 'BALL_1', 'e_3', 'null_13', 'null_12'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716aa90>, '#', <__main__.Root object at 0x107164ca0>, '-', <__main__.NominalizerTerminal object at 0x107163d60>, '-', <__main__.SemanticTerminal object at 0x107163490>)
input pronunciation: le#BALL-e
full_pronunciation: li#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #31
input roots: [<__main__.Root object at 0x10713d7c0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071719d0>, '-', <__main__.AgrTerminal object at 0x1071659d0>, '#', <__main__.Root object at 0x107171e20>, '-', <__main__.NominalizerTerminal object at 0x107171d90>, '-', <__main__.SemanticTerminal object at 0x107171c70>)
input pronunciation: la#SHIP-e
full_pronunciation: la#SHIPe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: SHIP to the selectional of the nominalizer whose values are {'a_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 11.699999999999994
    linear: (<__main__.NominalizerTerminal object at 0x107139ca0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: made nominalizer: null_19, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_19
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: tried nominalizer: null_20, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: made nominalizer: null_20, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_20
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.0
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_21, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_21, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 16.79999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 12.99999999999999
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #32
input roots: [<__main__.Root object at 0x107162490>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BOOK_1', 'i_1'}

create_vi: made BOOK: BOOK_3, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'BOOK_3', 'null_9', 'BOOK_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170520>, '-', <__main__.AgrTerminal object at 0x107171f40>, '#', <__main__.Root object at 0x107170970>, '-', <__main__.NominalizerTerminal object at 0x1071708e0>, '-', <__main__.SemanticTerminal object at 0x1071707c0>)
input pronunciation: li#BOOK-i
full_pronunciation: li#BOOKi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'i_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'CASTLE'}
    selection_strength: True
    weight: 10.599999999999998
    linear: (<__main__.NominalizerTerminal object at 0x10710e520>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: made nominalizer: null_21, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_21
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_22, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_22
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: made nominalizer: null_23, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_23
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.0
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'SHELF', 'BOOK', 'TOMATO', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_24, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 17.199999999999996
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 11.699999999999994
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #33
input roots: [<__main__.Root object at 0x107166a00>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e0d0>, '-', <__main__.AgrTerminal object at 0x107170b50>, '#', <__main__.Root object at 0x10716e520>, '-', <__main__.NominalizerTerminal object at 0x10716e490>, '-', <__main__.SemanticTerminal object at 0x10716e370>)
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 10.599999999999998
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_24, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'SHELF', 'BOOK', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: made nominalizer: null_24, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_24
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: tried nominalizer: null_25, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'SHELF', 'BOOK', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_25, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 17.700000000000003
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.59999999999999
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #34
input roots: [<__main__.Root object at 0x107171040>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ebb0>, '-', <__main__.AgrTerminal object at 0x107170ac0>, '#', <__main__.Root object at 0x10716efd0>, '-', <__main__.NominalizerTerminal object at 0x10716ef70>, '-', <__main__.SemanticTerminal object at 0x10716ee50>)
input pronunciation: uno#CASTLE-o
full_pronunciation: uno#CASTLEe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 12.69999999999999
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 12.79999999999999
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_23
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #35
input roots: [<__main__.Root object at 0x107170700>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: SHIP in its selectional

now working with the word 'SHIP-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'null_12', 'SHIP_2', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c670>, '-', <__main__.AgrTerminal object at 0x10716e880>, '#', <__main__.Root object at 0x10716ef10>, '-', <__main__.NominalizerTerminal object at 0x10716e8e0>, '-', <__main__.SemanticTerminal object at 0x10717c910>)
input pronunciation: le#SHIP-i
full_pronunciation: le#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 18.20000000000001
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.59999999999999
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_17
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.8
line done

---------------------

input line #36
input roots: [<__main__.Root object at 0x10716e640>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}

create_vi: made TOMATO: TOMATO_3, triggers = {('null', frozenset()), ('o', frozenset({'+atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e1c0>, '-', <__main__.AgrTerminal object at 0x10716e8b0>, '#', <__main__.Root object at 0x1071701f0>, '-', <__main__.NominalizerTerminal object at 0x1071708b0>, '-', <__main__.SemanticTerminal object at 0x10716e250>)
input pronunciation: lo#TOMATO-o
full_pronunciation: la#TOMATOa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 13.299999999999988
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_16
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #37
input roots: [<__main__.Root object at 0x10716e490>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'MOUSE_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'MOUSE_1', 'MOUSE_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170670>, '-', <__main__.AgrTerminal object at 0x10716e850>, '#', <__main__.Root object at 0x107170490>, '-', <__main__.NominalizerTerminal object at 0x1071705b0>, '-', <__main__.SemanticTerminal object at 0x107170730>)
input pronunciation: li#MOUSE-i
full_pronunciation: le#MOUSEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 18.700000000000017
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.59999999999999
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #38
input roots: [<__main__.Root object at 0x10716ef70>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: SHELF in its selectional

now working with the word 'SHELF-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'SHELF_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'SHELF_3', 'null_9', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170850>, '#', <__main__.Root object at 0x107171ca0>, '-', <__main__.NominalizerTerminal object at 0x107171d90>, '-', <__main__.SemanticTerminal object at 0x107171cd0>)
input pronunciation: li#SHELF-i
full_pronunciation: li#SHELFi
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #39
input roots: [<__main__.Root object at 0x10716ed60>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171790>, '#', <__main__.Root object at 0x107164640>, '-', <__main__.NominalizerTerminal object at 0x1071647c0>, '-', <__main__.SemanticTerminal object at 0x10715aaf0>)
input pronunciation: uno#MOUSE-o
full_pronunciation: un#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 12.89999999999999
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #40
input roots: [<__main__.Root object at 0x107170b50>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ad90>, '-', <__main__.AgrTerminal object at 0x107162fd0>, '#', <__main__.Root object at 0x107165a00>, '-', <__main__.NominalizerTerminal object at 0x107165ac0>, '-', <__main__.SemanticTerminal object at 0x107165340>)
input pronunciation: la#BALL-a
full_pronunciation: la#BALLa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BALL to the selectional of the nominalizer whose values are {'a_2', 'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2', 'e_1'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 10.1
    linear: (<__main__.NominalizerTerminal object at 0x107148dc0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 19.400000000000027
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 13.699999999999987
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_16
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #41
input roots: [<__main__.Root object at 0x10716a220>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'MOUSE_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'MOUSE_1', 'MOUSE_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716cd90>, '#', <__main__.Root object at 0x10717c400>, '-', <__main__.NominalizerTerminal object at 0x10717c490>, '-', <__main__.SemanticTerminal object at 0x10717c640>)
input pronunciation: li#MOUSE-i
full_pronunciation: l#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 19.800000000000033
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #42
input roots: [<__main__.Root object at 0x10714ac70>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717cbb0>, '#', <__main__.Root object at 0x1071820a0>, '-', <__main__.NominalizerTerminal object at 0x10717cfd0>, '-', <__main__.SemanticTerminal object at 0x10717ceb0>)
input pronunciation: lo#CASTLE-o
full_pronunciation: lo#CASTLEo
vis_used:
Successful derivation!
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #43
input roots: [<__main__.Root object at 0x107171b50>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'null_13', 'null_12', 'FROG_1', 'FROG_3'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717cc10>, '-', <__main__.AgrTerminal object at 0x10717cf10>, '#', <__main__.Root object at 0x10717c400>, '-', <__main__.NominalizerTerminal object at 0x10717c9a0>, '-', <__main__.SemanticTerminal object at 0x10717c0a0>)
input pronunciation: le#FROG-e
full_pronunciation: le#FROGe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'e_1'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 13.899999999999986
    linear: (<__main__.NominalizerTerminal object at 0x107108580>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 20.40000000000004
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 12.89999999999999
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #44
input roots: [<__main__.Root object at 0x10717cdc0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FLOWER_1', 'null_10', 'i_1'}

create_vi: made FLOWER: FLOWER_3, triggers = {('null', frozenset()), ('i', frozenset({'-atomic'}))}, weight = 10.0
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'FLOWER_1', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c160>, '-', <__main__.AgrTerminal object at 0x10717ca90>, '#', <__main__.Root object at 0x10714a610>, '-', <__main__.NominalizerTerminal object at 0x10714aa00>, '-', <__main__.SemanticTerminal object at 0x107165f10>)
input pronunciation: li#FLOWER-i
full_pronunciation: li#FLOWERi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FLOWER to the selectional of the nominalizer whose values are {'i_2', 'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2', 'o_1'}
    selectional: {'SHELF', 'BOOK', 'CASTLE', 'MOUSE'}
    selection_strength: True
    weight: 10.2
    linear: (<__main__.NominalizerTerminal object at 0x107171ac0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_25, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: made nominalizer: null_25, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_25
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: tried nominalizer: null_26, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'SHELF', 'BOOK', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_26, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 20.800000000000047
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 12.99999999999999
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #45
input roots: [<__main__.Root object at 0x107165310>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10715fe50>, '#', <__main__.Root object at 0x107164a60>, '-', <__main__.NominalizerTerminal object at 0x107164640>, '-', <__main__.SemanticTerminal object at 0x107163d60>)
input pronunciation: lo#CASTLE-o
full_pronunciation: l#CASTLEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 21.300000000000054
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #46
input roots: [<__main__.Root object at 0x1071653d0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BOOK_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'BOOK_3', 'null_9', 'BOOK_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171940>, '-', <__main__.AgrTerminal object at 0x10716a0d0>, '#', <__main__.Root object at 0x107171f10>, '-', <__main__.NominalizerTerminal object at 0x107171b20>, '-', <__main__.SemanticTerminal object at 0x107171f70>)
input pronunciation: li#BOOK-i
full_pronunciation: le#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 21.500000000000057
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 13.099999999999989
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #47
input roots: [<__main__.Root object at 0x1071647f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: POTATO in its selectional

now working with the word 'POTATO-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_3', 'e_3', 'null_13', 'null_12', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071706d0>, '-', <__main__.AgrTerminal object at 0x10714a370>, '#', <__main__.Root object at 0x107170a90>, '-', <__main__.NominalizerTerminal object at 0x107170b80>, '-', <__main__.SemanticTerminal object at 0x107170550>)
input pronunciation: le#POTATO-e
full_pronunciation: li#POTATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 21.70000000000006
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 13.399999999999988
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #48
input roots: [<__main__.Root object at 0x107163cd0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e100>, '-', <__main__.AgrTerminal object at 0x107170100>, '#', <__main__.Root object at 0x10716e3a0>, '-', <__main__.NominalizerTerminal object at 0x10716e2e0>, '-', <__main__.SemanticTerminal object at 0x10716e250>)
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: BOOK to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 11.399999999999995
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_26, triggers = set(), weight = 10.0..already existed

create_vi: tried nominalizer: null_26, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_26, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: made nominalizer: null_26, triggers = set(), weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_26
    triggers: set()
    weight: 10.0

create_vi: tried nominalizer: null_27, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_27, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_27, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_27, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_27, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_27, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_27, triggers = set(), weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 22.000000000000064
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 14.799999999999983
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #49
input roots: [<__main__.Root object at 0x107171760>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e9d0>, '#', <__main__.Root object at 0x10716ecd0>, '-', <__main__.NominalizerTerminal object at 0x10716ed00>, '-', <__main__.SemanticTerminal object at 0x10716e5b0>)
input pronunciation: lo#BOOK-o
full_pronunciation: la#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_19
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.500000000000002
line done

---------------------

input line #50
input roots: [<__main__.Root object at 0x107170580>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ebb0>, '-', <__main__.AgrTerminal object at 0x10716e730>, '#', <__main__.Root object at 0x10716ec10>, '-', <__main__.NominalizerTerminal object at 0x10716e910>, '-', <__main__.SemanticTerminal object at 0x10716ea90>)
input pronunciation: lo#FLOWER-e
full_pronunciation: la#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 22.900000000000077
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 14.299999999999985
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_16
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #51
input roots: [<__main__.Root object at 0x10716eb80>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e0d0>, '#', <__main__.Root object at 0x107170dc0>, '-', <__main__.NominalizerTerminal object at 0x107170670>, '-', <__main__.SemanticTerminal object at 0x10716e850>)
input pronunciation: una#ANCHOR-a
full_pronunciation: un#ANCHORa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 13.599999999999987
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #52
input roots: [<__main__.Root object at 0x10716e6a0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'TOMATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'TOMATO_1', 'null_10', 'TOMATO_2', 'null_9'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170c70>, '-', <__main__.AgrTerminal object at 0x10716e5b0>, '#', <__main__.Root object at 0x107170ac0>, '-', <__main__.NominalizerTerminal object at 0x107170130>, '-', <__main__.SemanticTerminal object at 0x107170d90>)
input pronunciation: li#TOMATO-i
full_pronunciation: le#TOMATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 23.20000000000008
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 13.499999999999988
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.500000000000002
line done

---------------------

input line #53
input roots: [<__main__.Root object at 0x10716e820>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_3', 'BALL_1', 'e_3', 'null_13', 'null_12'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170cd0>, '#', <__main__.Root object at 0x107171a30>, '-', <__main__.NominalizerTerminal object at 0x107171af0>, '-', <__main__.SemanticTerminal object at 0x107171f70>)
input pronunciation: le#BALL-e
full_pronunciation: le#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.399999999999999
line done

---------------------

input line #54
input roots: [<__main__.Root object at 0x10716e310>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171a60>, '#', <__main__.Root object at 0x10715f700>, '-', <__main__.NominalizerTerminal object at 0x107163610>, '-', <__main__.SemanticTerminal object at 0x107164ca0>)
input pronunciation: la#POTATO-a
full_pronunciation: lo#POTATOo
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.9
line done

---------------------

input line #55
input roots: [<__main__.Root object at 0x107166ac0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716a3a0>, '-', <__main__.AgrTerminal object at 0x1071708b0>, '#', <__main__.Root object at 0x10716c7f0>, '-', <__main__.NominalizerTerminal object at 0x10716ce50>, '-', <__main__.SemanticTerminal object at 0x107154430>)
input pronunciation: la#ANCHOR-a
full_pronunciation: la#ANCHORo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 24.200000000000095
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 15.099999999999982
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #56
input roots: [<__main__.Root object at 0x1071663a0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13', 'ANCHOR_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'ANCHOR_1', 'null_13', 'null_12', 'ANCHOR_3'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c3a0>, '#', <__main__.Root object at 0x10717c190>, '-', <__main__.NominalizerTerminal object at 0x10717c070>, '-', <__main__.SemanticTerminal object at 0x10717c040>)
input pronunciation: le#ANCHOR-e
full_pronunciation: l#ANCHORe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 24.400000000000098
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #57
input roots: [<__main__.Root object at 0x10716a760>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717cbb0>, '#', <__main__.Root object at 0x107182460>, '-', <__main__.NominalizerTerminal object at 0x107182280>, '-', <__main__.SemanticTerminal object at 0x1071828b0>)
input pronunciation: uno#SHELF-e
full_pronunciation: uno#SHELFa
vis_used:
Failure
VocabularyItem:
    pronunciation: uno
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: uno_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #58
input roots: [<__main__.Root object at 0x107153f70>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071821f0>, '-', <__main__.AgrTerminal object at 0x107182760>, '#', <__main__.Root object at 0x10717cbb0>, '-', <__main__.NominalizerTerminal object at 0x10717ccd0>, '-', <__main__.SemanticTerminal object at 0x1071829a0>)
input pronunciation: una#FROG-a
full_pronunciation: una#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'a_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 12.99999999999999
    linear: (<__main__.NominalizerTerminal object at 0x107139ca0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: made nominalizer: null_27, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_27
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0

create_vi: tried nominalizer: null_28, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: made nominalizer: null_28, triggers = {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_28
    triggers: {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}
    weight: 10.0
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_29, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 14.099999999999985
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 15.199999999999982
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #59
input roots: [<__main__.Root object at 0x107182bb0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c4f0>, '#', <__main__.Root object at 0x10717c730>, '-', <__main__.NominalizerTerminal object at 0x10717c160>, '-', <__main__.SemanticTerminal object at 0x10717c0d0>)
input pronunciation: uno#FLOWER-e
full_pronunciation: un#FLOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 14.399999999999984
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #60
input roots: [<__main__.Root object at 0x107182d00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c460>, '#', <__main__.Root object at 0x10714a130>, '-', <__main__.NominalizerTerminal object at 0x10714ad30>, '-', <__main__.SemanticTerminal object at 0x10714a460>)
input pronunciation: una#FROG-a
full_pronunciation: un#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 14.499999999999984
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #61
input roots: [<__main__.Root object at 0x10713d7c0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107163be0>, '-', <__main__.AgrTerminal object at 0x107182af0>, '#', <__main__.Root object at 0x107171df0>, '-', <__main__.NominalizerTerminal object at 0x107171a60>, '-', <__main__.SemanticTerminal object at 0x107171c40>)
input pronunciation: la#FROG-a
full_pronunciation: lo#FROGe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 25.100000000000108
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 15.999999999999979
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #62
input roots: [<__main__.Root object at 0x10715f9d0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171f40>, '-', <__main__.AgrTerminal object at 0x107164970>, '#', <__main__.Root object at 0x107170370>, '-', <__main__.NominalizerTerminal object at 0x107170ee0>, '-', <__main__.SemanticTerminal object at 0x107170730>)
input pronunciation: la#FROG-a
full_pronunciation: la#FROGa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: FROG to the selectional of the nominalizer whose values are {'a_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 13.899999999999986
    linear: (<__main__.NominalizerTerminal object at 0x107139ca0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_29, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 25.400000000000112
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 15.999999999999979
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #63
input roots: [<__main__.Root object at 0x107162fd0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170130>, '#', <__main__.Root object at 0x107170910>, '-', <__main__.NominalizerTerminal object at 0x107170640>, '-', <__main__.SemanticTerminal object at 0x107170a90>)
input pronunciation: uno#TOMATO-o
full_pronunciation: una#TOMATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.200000000000003
line done

---------------------

input line #64
input roots: [<__main__.Root object at 0x107164a60>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170070>, '#', <__main__.Root object at 0x10716ec70>, '-', <__main__.NominalizerTerminal object at 0x10716e0a0>, '-', <__main__.SemanticTerminal object at 0x10716e8b0>)
input pronunciation: una#FROG-a
full_pronunciation: un#FROGo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 14.999999999999982
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #65
input roots: [<__main__.Root object at 0x107171970>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ec10>, '-', <__main__.AgrTerminal object at 0x10715d8b0>, '#', <__main__.Root object at 0x10718d220>, '-', <__main__.NominalizerTerminal object at 0x10718d190>, '-', <__main__.SemanticTerminal object at 0x10718d070>)
input pronunciation: uno#TOMATO-o
full_pronunciation: uno#TOMATOo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOMATO to the selectional of the nominalizer whose values are {'i_2', 'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2', 'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 10.699999999999998
    linear: (<__main__.NominalizerTerminal object at 0x107171ac0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 15.099999999999982
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.09999999999998
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_22
    triggers: {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #66
input roots: [<__main__.Root object at 0x107170f40>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: POTATO in its selectional

now working with the word 'POTATO-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_3', 'e_3', 'null_13', 'null_12', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716eaf0>, '-', <__main__.AgrTerminal object at 0x10716e2b0>, '#', <__main__.Root object at 0x10716e6d0>, '-', <__main__.NominalizerTerminal object at 0x10716e8b0>, '-', <__main__.SemanticTerminal object at 0x10716e6a0>)
input pronunciation: le#POTATO-e
full_pronunciation: le#POTATOe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: POTATO to the selectional of the nominalizer whose values are {'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'e_1'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 16.19999999999998
    linear: (<__main__.NominalizerTerminal object at 0x107108580>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 26.100000000000122
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 14.399999999999984
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #67
input roots: [<__main__.Root object at 0x10716e5b0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170880>, '#', <__main__.Root object at 0x107170a90>, '-', <__main__.NominalizerTerminal object at 0x107170ca0>, '-', <__main__.SemanticTerminal object at 0x1071701f0>)
input pronunciation: la#KEY-e
full_pronunciation: lo#KEYa
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #68
input roots: [<__main__.Root object at 0x10716e310>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FLOWER_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'FLOWER_1', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071700d0>, '#', <__main__.Root object at 0x107171bb0>, '-', <__main__.NominalizerTerminal object at 0x107171970>, '-', <__main__.SemanticTerminal object at 0x107170730>)
input pronunciation: li#FLOWER-i
full_pronunciation: l#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 26.900000000000134
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #69
input roots: [<__main__.Root object at 0x10716ee80>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171880>, '#', <__main__.Root object at 0x107171c40>, '-', <__main__.NominalizerTerminal object at 0x1071711c0>, '-', <__main__.SemanticTerminal object at 0x107171c10>)
input pronunciation: la#POTATO-a
full_pronunciation: lo#POTATOa
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #70
input roots: [<__main__.Root object at 0x107170460>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'null_13', 'null_12', 'FROG_1', 'FROG_3'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171b80>, '#', <__main__.Root object at 0x10716a910>, '-', <__main__.NominalizerTerminal object at 0x10716a850>, '-', <__main__.SemanticTerminal object at 0x107153b20>)
input pronunciation: le#FROG-e
full_pronunciation: li#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.299999999999999
line done

---------------------

input line #71
input roots: [<__main__.Root object at 0x107166a00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10714a460>, '-', <__main__.AgrTerminal object at 0x10716e160>, '#', <__main__.Root object at 0x10717cc40>, '-', <__main__.NominalizerTerminal object at 0x10717caf0>, '-', <__main__.SemanticTerminal object at 0x10717c250>)
input pronunciation: una#SHIP-e
full_pronunciation: uno#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 15.59999999999998
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.499999999999986
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.100000000000003
line done

---------------------

input line #72
input roots: [<__main__.Root object at 0x10714af70>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717cfd0>, '-', <__main__.AgrTerminal object at 0x107165ac0>, '#', <__main__.Root object at 0x107182ac0>, '-', <__main__.NominalizerTerminal object at 0x1071820a0>, '-', <__main__.SemanticTerminal object at 0x107182af0>)
input pronunciation: la#KEY-e
full_pronunciation: la#KEYa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 28.00000000000015
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 17.5
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 10.0
line done

---------------------

input line #73
input roots: [<__main__.Root object at 0x10716e3d0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10718d5b0>, '-', <__main__.AgrTerminal object at 0x10717c9d0>, '#', <__main__.Root object at 0x10714a460>, '-', <__main__.NominalizerTerminal object at 0x10718d970>, '-', <__main__.SemanticTerminal object at 0x10718d850>)
input pronunciation: la#KEY-e
full_pronunciation: lo#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 28.300000000000153
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.399999999999984
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 9.000000000000004
line done

---------------------

input line #74
input roots: [<__main__.Root object at 0x10714af70>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182ac0>, '#', <__main__.Root object at 0x107182b50>, '-', <__main__.NominalizerTerminal object at 0x107182c70>, '-', <__main__.SemanticTerminal object at 0x1071828e0>)
input pronunciation: lo#MOUSE-o
full_pronunciation: l#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 28.600000000000158
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.9
line done

---------------------

input line #75
input roots: [<__main__.Root object at 0x107162fd0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182370>, '-', <__main__.AgrTerminal object at 0x10714a520>, '#', <__main__.Root object at 0x10717cee0>, '-', <__main__.NominalizerTerminal object at 0x10717c2e0>, '-', <__main__.SemanticTerminal object at 0x10717ca60>)
input pronunciation: uno#CASTLE-o
full_pronunciation: uno#CASTLEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: CASTLE to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 12.499999999999991
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = set(), weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = set(), weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = set(), weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 15.999999999999979
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.69999999999999
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #76
input roots: [<__main__.Root object at 0x10714a040>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c760>, '-', <__main__.AgrTerminal object at 0x107182640>, '#', <__main__.Root object at 0x10717c6a0>, '-', <__main__.NominalizerTerminal object at 0x10717c910>, '-', <__main__.SemanticTerminal object at 0x10717c5e0>)
input pronunciation: una#SHIP-e
full_pronunciation: uno#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 16.299999999999983
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.79999999999999
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_3
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.900000000000004
line done

---------------------

input line #77
input roots: [<__main__.Root object at 0x107182fd0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170460>, '#', <__main__.Root object at 0x107170a00>, '-', <__main__.NominalizerTerminal object at 0x107170550>, '-', <__main__.SemanticTerminal object at 0x1071707c0>)
input pronunciation: una#ANCHOR-a
full_pronunciation: un#ANCHORo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 16.399999999999984
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #78
input roots: [<__main__.Root object at 0x107182f10>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170310>, '-', <__main__.AgrTerminal object at 0x10717c850>, '#', <__main__.Root object at 0x10716eeb0>, '-', <__main__.NominalizerTerminal object at 0x10716e700>, '-', <__main__.SemanticTerminal object at 0x10716e7c0>)
input pronunciation: lo#MOUSE-o
full_pronunciation: lo#MOUSEo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: MOUSE to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 12.89999999999999
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 29.200000000000166
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 16.999999999999993
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #79
input roots: [<__main__.Root object at 0x10717c1c0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e400>, '-', <__main__.AgrTerminal object at 0x1071707f0>, '#', <__main__.Root object at 0x10716e370>, '-', <__main__.NominalizerTerminal object at 0x10716e220>, '-', <__main__.SemanticTerminal object at 0x10716e430>)
input pronunciation: la#KEY-e
full_pronunciation: la#KEYa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 29.700000000000173
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 18.20000000000001
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_17
    triggers: {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}
    weight: 10.699999999999998
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.8
line done

---------------------

input line #80
input roots: [<__main__.Root object at 0x10717ccd0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071716d0>, '-', <__main__.AgrTerminal object at 0x10716eee0>, '#', <__main__.Root object at 0x107171040>, '-', <__main__.NominalizerTerminal object at 0x107171b20>, '-', <__main__.SemanticTerminal object at 0x107171a90>)
input pronunciation: una#FROG-a
full_pronunciation: una#FROGe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 16.69999999999999
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 18.20000000000001
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.800000000000004
line done

---------------------

input line #81
input roots: [<__main__.Root object at 0x107170880>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171c10>, '#', <__main__.Root object at 0x10716eb20>, '-', <__main__.NominalizerTerminal object at 0x10716e0d0>, '-', <__main__.SemanticTerminal object at 0x10716e8b0>)
input pronunciation: la#SHIP-e
full_pronunciation: lo#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.700000000000005
line done

---------------------

input line #82
input roots: [<__main__.Root object at 0x107171d90>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e490>, '#', <__main__.Root object at 0x10716e670>, '-', <__main__.NominalizerTerminal object at 0x10716ed30>, '-', <__main__.SemanticTerminal object at 0x10716edf0>)
input pronunciation: lo#CASTLE-o
full_pronunciation: l#CASTLEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 30.500000000000185
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.600000000000005
line done

---------------------

input line #83
input roots: [<__main__.Root object at 0x1071714c0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e9a0>, '#', <__main__.Root object at 0x107170760>, '-', <__main__.NominalizerTerminal object at 0x107170640>, '-', <__main__.SemanticTerminal object at 0x107170dc0>)
input pronunciation: la#BALL-a
full_pronunciation: lo#BALLe
vis_used:
Failure
VocabularyItem:
    pronunciation: lo
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: lo_1
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.500000000000005
line done

---------------------

input line #84
input roots: [<__main__.Root object at 0x107171c70>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170be0>, '#', <__main__.Root object at 0x107170d00>, '-', <__main__.NominalizerTerminal object at 0x107170190>, '-', <__main__.SemanticTerminal object at 0x107170b80>)
input pronunciation: la#BALL-a
full_pronunciation: l#BALLa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 31.200000000000195
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #85
input roots: [<__main__.Root object at 0x10716e310>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182f10>, '#', <__main__.Root object at 0x107182730>, '-', <__main__.NominalizerTerminal object at 0x1071825b0>, '-', <__main__.SemanticTerminal object at 0x107182040>)
input pronunciation: lo#MOUSE-o
full_pronunciation: l#MOUSEe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 31.5000000000002
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.400000000000006
line done

---------------------

input line #86
input roots: [<__main__.Root object at 0x107171f10>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071828e0>, '#', <__main__.Root object at 0x107182100>, '-', <__main__.NominalizerTerminal object at 0x107182b20>, '-', <__main__.SemanticTerminal object at 0x1071822b0>)
input pronunciation: la#ANCHOR-a
full_pronunciation: l#ANCHORe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 31.800000000000203
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_23
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.300000000000006
line done

---------------------

input line #87
input roots: [<__main__.Root object at 0x10716e1c0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c6a0>, '-', <__main__.AgrTerminal object at 0x107171100>, '#', <__main__.Root object at 0x10717cbe0>, '-', <__main__.NominalizerTerminal object at 0x10717c250>, '-', <__main__.SemanticTerminal object at 0x10717cac0>)
input pronunciation: la#SHIP-e
full_pronunciation: la#SHIPe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: SHIP to the selectional of the nominalizer whose values are {'a_2', 'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2', 'e_1'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 11.399999999999995
    linear: (<__main__.NominalizerTerminal object at 0x107148dc0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 32.10000000000021
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.60000000000003
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_3
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_20
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.200000000000006
line done

---------------------

input line #88
input roots: [<__main__.Root object at 0x107162d30>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c3a0>, '-', <__main__.AgrTerminal object at 0x107182610>, '#', <__main__.Root object at 0x107165cd0>, '-', <__main__.NominalizerTerminal object at 0x107165340>, '-', <__main__.SemanticTerminal object at 0x1071651f0>)
input pronunciation: lo#FLOWER-e
full_pronunciation: la#FLOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 32.600000000000215
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.70000000000003
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #89
input roots: [<__main__.Root object at 0x107163490>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c640>, '#', <__main__.Root object at 0x10717c0a0>, '-', <__main__.NominalizerTerminal object at 0x10717ca90>, '-', <__main__.SemanticTerminal object at 0x10717c730>)
input pronunciation: lo#SHELF-e
full_pronunciation: la#SHELFe
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.300000000000006
line done

---------------------

input line #90
input roots: [<__main__.Root object at 0x10714a130>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FLOWER_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'FLOWER_1', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c6a0>, '#', <__main__.Root object at 0x10717c040>, '-', <__main__.NominalizerTerminal object at 0x10717c490>, '-', <__main__.SemanticTerminal object at 0x10717c880>)
input pronunciation: li#FLOWER-i
full_pronunciation: le#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #91
input roots: [<__main__.Root object at 0x10714af70>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182cd0>, '-', <__main__.AgrTerminal object at 0x107165e20>, '#', <__main__.Root object at 0x107182e50>, '-', <__main__.NominalizerTerminal object at 0x107182d90>, '-', <__main__.SemanticTerminal object at 0x107182ac0>)
input pronunciation: uno#FLOWER-e
full_pronunciation: una#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 17.700000000000003
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.70000000000003
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_20
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.200000000000006
line done

---------------------

input line #92
input roots: [<__main__.Root object at 0x10717c700>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182ee0>, '-', <__main__.AgrTerminal object at 0x1071480a0>, '#', <__main__.Root object at 0x1071708b0>, '-', <__main__.NominalizerTerminal object at 0x1071704c0>, '-', <__main__.SemanticTerminal object at 0x107170ee0>)
input pronunciation: una#SHIP-e
full_pronunciation: una#SHIPa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 17.800000000000004
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.70000000000003
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_3
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.500000000000002
line done

---------------------

input line #93
input roots: [<__main__.Root object at 0x107162fd0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CASTLE_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'CASTLE_3', 'CASTLE_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071702b0>, '#', <__main__.Root object at 0x107170100>, '-', <__main__.NominalizerTerminal object at 0x107170640>, '-', <__main__.SemanticTerminal object at 0x107170820>)
input pronunciation: li#CASTLE-i
full_pronunciation: le#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #94
input roots: [<__main__.Root object at 0x107182790>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: POTATO in its selectional

now working with the word 'POTATO-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'POTATO_3', 'e_3', 'null_13', 'null_12', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e310>, '#', <__main__.Root object at 0x10716e5b0>, '-', <__main__.NominalizerTerminal object at 0x10716ea30>, '-', <__main__.SemanticTerminal object at 0x10716ee50>)
input pronunciation: le#POTATO-e
full_pronunciation: l#POTATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.000000000000234
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.200000000000003
line done

---------------------

input line #95
input roots: [<__main__.Root object at 0x107182c10>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e190>, '-', <__main__.AgrTerminal object at 0x1071627f0>, '#', <__main__.Root object at 0x107171b80>, '-', <__main__.NominalizerTerminal object at 0x107171eb0>, '-', <__main__.SemanticTerminal object at 0x107171dc0>)
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 17.900000000000006
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 19.800000000000033
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.8
line done

---------------------

input line #96
input roots: [<__main__.Root object at 0x107170b20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071711c0>, '-', <__main__.AgrTerminal object at 0x10716edf0>, '#', <__main__.Root object at 0x10716ca30>, '-', <__main__.NominalizerTerminal object at 0x107166790>, '-', <__main__.SemanticTerminal object at 0x10716aa90>)
input pronunciation: uno#SHELF-e
full_pronunciation: uno#SHELFe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: SHELF to the selectional of the nominalizer whose values are {'i_2', 'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2', 'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 11.599999999999994
    linear: (<__main__.NominalizerTerminal object at 0x107171ac0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 18.000000000000007
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 18.90000000000002
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_23
    triggers: {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}
    weight: 10.499999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.100000000000007
line done

---------------------

input line #97
input roots: [<__main__.Root object at 0x10716a3d0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171dc0>, '#', <__main__.Root object at 0x10716ed00>, '-', <__main__.NominalizerTerminal object at 0x10716e820>, '-', <__main__.SemanticTerminal object at 0x10716e2e0>)
input pronunciation: la#POTATO-a
full_pronunciation: l#POTATOa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.50000000000024
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #98
input roots: [<__main__.Root object at 0x10716c190>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'TOMATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'TOMATO_1', 'null_10', 'TOMATO_2', 'null_9'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ea30>, '-', <__main__.AgrTerminal object at 0x107171820>, '#', <__main__.Root object at 0x10716e1c0>, '-', <__main__.NominalizerTerminal object at 0x10716e9a0>, '-', <__main__.SemanticTerminal object at 0x10716ecd0>)
input pronunciation: li#TOMATO-i
full_pronunciation: li#TOMATOi
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOMATO to the selectional of the nominalizer whose values are {'i_2'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'i_2'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 11.899999999999993
    linear: (<__main__.NominalizerTerminal object at 0x10710e520>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 34.700000000000244
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 16.69999999999999
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #99
input roots: [<__main__.Root object at 0x10716c700>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071703a0>, '-', <__main__.AgrTerminal object at 0x10716e910>, '#', <__main__.Root object at 0x107170d00>, '-', <__main__.NominalizerTerminal object at 0x1071709d0>, '-', <__main__.SemanticTerminal object at 0x107170850>)
input pronunciation: lo#SHELF-e
full_pronunciation: lo#SHELFe
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: SHELF to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 13.999999999999986
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_29, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_29, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 35.20000000000025
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.400000000000027
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.200000000000006
line done

---------------------

input line #100
input roots: [<__main__.Root object at 0x107171670>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BOOK_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'BOOK_3', 'null_9', 'BOOK_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182340>, '-', <__main__.AgrTerminal object at 0x1071708b0>, '#', <__main__.Root object at 0x1071826a0>, '-', <__main__.NominalizerTerminal object at 0x107182820>, '-', <__main__.SemanticTerminal object at 0x1071824c0>)
input pronunciation: li#BOOK-i
full_pronunciation: le#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 35.60000000000026
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 16.69999999999999
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.100000000000003
line done

---------------------

input line #101
input roots: [<__main__.Root object at 0x10716e490>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071824f0>, '#', <__main__.Root object at 0x107182d00>, '-', <__main__.NominalizerTerminal object at 0x107182310>, '-', <__main__.SemanticTerminal object at 0x107182100>)
input pronunciation: una#ANCHOR-a
full_pronunciation: una#ANCHORe
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.2
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.300000000000006
line done

---------------------

input line #102
input roots: [<__main__.Root object at 0x1071707c0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: SHELF in its selectional

now working with the word 'SHELF-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'SHELF_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'SHELF_3', 'null_9', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c790>, '#', <__main__.Root object at 0x10717cbe0>, '-', <__main__.NominalizerTerminal object at 0x10717cdf0>, '-', <__main__.SemanticTerminal object at 0x10717c460>)
input pronunciation: li#SHELF-i
full_pronunciation: li#SHELFe
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 9.000000000000004
line done

---------------------

input line #103
input roots: [<__main__.Root object at 0x10716e0a0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c310>, '#', <__main__.Root object at 0x10717cc10>, '-', <__main__.NominalizerTerminal object at 0x10717cca0>, '-', <__main__.SemanticTerminal object at 0x10717cd60>)
input pronunciation: una#KEY-e
full_pronunciation: una#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #104
input roots: [<__main__.Root object at 0x107182580>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c850>, '-', <__main__.AgrTerminal object at 0x107166a30>, '#', <__main__.Root object at 0x10717c5e0>, '-', <__main__.NominalizerTerminal object at 0x10717c580>, '-', <__main__.SemanticTerminal object at 0x10717c370>)
input pronunciation: uno#TOMATO-o
full_pronunciation: uno#TOMATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 18.90000000000002
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 19.800000000000033
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2', 'o_1'}
    diacritic: null_21
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.599999999999998
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.200000000000006
line done

---------------------

input line #105
input roots: [<__main__.Root object at 0x10714a8e0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c880>, '-', <__main__.AgrTerminal object at 0x10714a130>, '#', <__main__.Root object at 0x1071627f0>, '-', <__main__.NominalizerTerminal object at 0x107162190>, '-', <__main__.SemanticTerminal object at 0x107165310>)
input pronunciation: lo#TOMATO-o
full_pronunciation: lo#TOMATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 36.50000000000027
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.000000000000036
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.100000000000007
line done

---------------------

input line #106
input roots: [<__main__.Root object at 0x10714a1f0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'TOMATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'TOMATO_1', 'null_10', 'TOMATO_2', 'null_9'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182100>, '#', <__main__.Root object at 0x107182e50>, '-', <__main__.NominalizerTerminal object at 0x107182b50>, '-', <__main__.SemanticTerminal object at 0x1071821f0>)
input pronunciation: li#TOMATO-i
full_pronunciation: le#TOMATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: le
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: le_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.900000000000004
line done

---------------------

input line #107
input roots: [<__main__.Root object at 0x107165e20>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: KEY in its selectional

now working with the word 'KEY-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'KEY_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'KEY_1', 'KEY_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071823a0>, '-', <__main__.AgrTerminal object at 0x107163610>, '#', <__main__.Root object at 0x107170e20>, '-', <__main__.NominalizerTerminal object at 0x107170460>, '-', <__main__.SemanticTerminal object at 0x1071707f0>)
input pronunciation: una#KEY-e
full_pronunciation: uno#KEYo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 19.100000000000023
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.000000000000036
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #108
input roots: [<__main__.Root object at 0x107166a00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170be0>, '#', <__main__.Root object at 0x1071709a0>, '-', <__main__.NominalizerTerminal object at 0x107170d60>, '-', <__main__.SemanticTerminal object at 0x107170ac0>)
input pronunciation: uno#FLOWER-e
full_pronunciation: un#FLOWERo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 19.200000000000024
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.500000000000002
line done

---------------------

input line #109
input roots: [<__main__.Root object at 0x10717ca00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e0a0>, '#', <__main__.Root object at 0x10716e3a0>, '-', <__main__.NominalizerTerminal object at 0x10716ee50>, '-', <__main__.SemanticTerminal object at 0x10716e670>)
input pronunciation: uno#MOUSE-o
full_pronunciation: una#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.399999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #110
input roots: [<__main__.Root object at 0x1071822e0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e2e0>, '-', <__main__.AgrTerminal object at 0x10717c6d0>, '#', <__main__.Root object at 0x107171340>, '-', <__main__.NominalizerTerminal object at 0x107171310>, '-', <__main__.SemanticTerminal object at 0x107171c70>)
input pronunciation: uno#SHELF-e
full_pronunciation: una#SHELFe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 19.50000000000003
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 20.700000000000045
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 8.000000000000007
line done

---------------------

input line #111
input roots: [<__main__.Root object at 0x1071828e0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716c4c0>, '-', <__main__.AgrTerminal object at 0x10716e070>, '#', <__main__.Root object at 0x10715f850>, '-', <__main__.NominalizerTerminal object at 0x10715f220>, '-', <__main__.SemanticTerminal object at 0x10715f700>)
input pronunciation: una#BALL-a
full_pronunciation: uno#BALLe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 19.60000000000003
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 20.20000000000004
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_3
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 7.9000000000000075
line done

---------------------

input line #112
input roots: [<__main__.Root object at 0x107170580>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'KEY_3', 'null_12', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071647c0>, '#', <__main__.Root object at 0x107171b80>, '-', <__main__.NominalizerTerminal object at 0x1071714c0>, '-', <__main__.SemanticTerminal object at 0x107171d60>)
input pronunciation: le#KEY-i
full_pronunciation: l#KEYi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 37.500000000000284
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.2
line done

---------------------

input line #113
input roots: [<__main__.Root object at 0x1071541f0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: SHELF in its selectional

now working with the word 'SHELF-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'SHELF_1', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'SHELF_2', 'null_3', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e430>, '#', <__main__.Root object at 0x10716ed90>, '-', <__main__.NominalizerTerminal object at 0x10716eac0>, '-', <__main__.SemanticTerminal object at 0x10716e790>)
input pronunciation: lo#SHELF-e
full_pronunciation: la#SHELFo
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #114
input roots: [<__main__.Root object at 0x10715f3d0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e910>, '-', <__main__.AgrTerminal object at 0x107164e50>, '#', <__main__.Root object at 0x107170640>, '-', <__main__.NominalizerTerminal object at 0x107170fd0>, '-', <__main__.SemanticTerminal object at 0x107170eb0>)
input pronunciation: una#POTATO-a
full_pronunciation: una#POTATOa
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: POTATO to the selectional of the nominalizer whose values are {'a_2', 'e_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'a_2', 'e_1'}
    selectional: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
    selection_strength: True
    weight: 11.899999999999993
    linear: (<__main__.NominalizerTerminal object at 0x107148dc0>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'e_1'}

create_vi: made nominalizer: null_29, triggers = set(), weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_29
    triggers: set()
    weight: 10.0

create_vi: tried nominalizer: null_30, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: made nominalizer: null_30, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0
....made the new vi: VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_30
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.0
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2'}

create_vi: tried nominalizer: null_31, triggers = set(), weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'a_2', 'e_1'} as values: {'POTATO', 'KEY', 'SHIP', 'BALL', 'FROG', 'ANCHOR'}
..so we'll also combine the vis that spell out {'a_2', 'e_1'}

create_vi: tried nominalizer: null_31, triggers = {('e', frozenset({'-atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('e', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('e', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('i', frozenset({'-atomic'})), ('e', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('i', frozenset({'-atomic'})), ('a', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = set(), weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('i', frozenset({'-atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 19.800000000000033
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 20.90000000000005
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.200000000000003
line done

---------------------

input line #115
input roots: [<__main__.Root object at 0x107171310>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170700>, '#', <__main__.Root object at 0x107170550>, '-', <__main__.NominalizerTerminal object at 0x107170460>, '-', <__main__.SemanticTerminal object at 0x107170280>)
input pronunciation: lo#TOMATO-o
full_pronunciation: la#TOMATOa
vis_used:
Failure
VocabularyItem:
    pronunciation: la
    label: definite
    values: {'+definite', '+atomic'}
    diacritic: la_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #116
input roots: [<__main__.Root object at 0x10715f6a0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: BALL in its selectional

now working with the word 'BALL-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BALL_3', 'BALL_1', 'e_3', 'null_13', 'null_12'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182400>, '-', <__main__.AgrTerminal object at 0x10716e730>, '#', <__main__.Root object at 0x107182190>, '-', <__main__.NominalizerTerminal object at 0x107182d00>, '-', <__main__.SemanticTerminal object at 0x107182700>)
input pronunciation: le#BALL-e
full_pronunciation: le#BALLi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 38.6000000000003
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 17.299999999999997
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.1
line done

---------------------

input line #117
input roots: [<__main__.Root object at 0x1071709d0>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CASTLE_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'CASTLE_3', 'CASTLE_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182790>, '#', <__main__.Root object at 0x107166c70>, '-', <__main__.NominalizerTerminal object at 0x107166a00>, '-', <__main__.SemanticTerminal object at 0x107162490>)
input pronunciation: li#CASTLE-i
full_pronunciation: l#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 38.8000000000003
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 10.0
line done

---------------------

input line #118
input roots: [<__main__.Root object at 0x10716e670>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'CASTLE_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'CASTLE_3', 'CASTLE_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c4c0>, '-', <__main__.AgrTerminal object at 0x107162d30>, '#', <__main__.Root object at 0x10717c310>, '-', <__main__.NominalizerTerminal object at 0x10717ccd0>, '-', <__main__.SemanticTerminal object at 0x10717c4f0>)
input pronunciation: li#CASTLE-i
full_pronunciation: le#CASTLEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 39.000000000000306
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 17.199999999999996
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.9
line done

---------------------

input line #119
input roots: [<__main__.Root object at 0x107170d00>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10714fb20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c8e0>, '-', <__main__.AgrTerminal object at 0x10715da60>, '#', <__main__.Root object at 0x10717ce20>, '-', <__main__.NominalizerTerminal object at 0x10717ca30>, '-', <__main__.SemanticTerminal object at 0x10717c250>)
input pronunciation: uno#TOMATO-o
full_pronunciation: uno#TOMATOo
vis_used:
Successful derivation!
Since it worked, and the nominalizer's value(s) contributed to spellout (was a diacritic in vis_used), let's add Root: TOMATO to the selectional of the nominalizer whose values are {'o_1'}
Before changes, that nominalizer was NominalizerTerminal:
    label: nominalizer
    values: {'o_1'}
    selectional: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
    selection_strength: True
    weight: 15.099999999999982
    linear: (<__main__.NominalizerTerminal object at 0x107101b50>,)
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'o_1'} as values: {'SHELF', 'BOOK', 'TOMATO', 'FLOWER', 'CASTLE', 'MOUSE'}
..so we'll also combine the vis that spell out {'o_1'}

create_vi: tried nominalizer: null_31, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2'}

create_vi: tried nominalizer: null_31, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
..plus that nominalizer selected (some of) the same Roots as the nominalizer with {'i_2', 'o_1'} as values: {'BOOK', 'MOUSE', 'SHELF', 'TOMATO', 'FLOWER', 'CASTLE'}
..so we'll also combine the vis that spell out {'i_2', 'o_1'}

create_vi: tried nominalizer: null_31, triggers = {('i', frozenset({'-atomic'})), ('o', frozenset({'+atomic'}))}, weight = 10.0..already existed

create_vi: tried nominalizer: null_31, triggers = {('o', frozenset({'+atomic'}))}, weight = 10.0..already existed
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 20.20000000000004
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 21.200000000000053
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #120
input roots: [<__main__.Root object at 0x10714a610>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139c70>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c7c0>, '-', <__main__.AgrTerminal object at 0x10715dd30>, '#', <__main__.Root object at 0x107162bb0>, '-', <__main__.NominalizerTerminal object at 0x107162490>, '-', <__main__.SemanticTerminal object at 0x107166a00>)
input pronunciation: uno#BOOK-o
full_pronunciation: una#BOOKo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 20.500000000000043
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 21.300000000000054
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #121
input roots: [<__main__.Root object at 0x107166a30>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'MOUSE_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'MOUSE_1', 'MOUSE_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182460>, '#', <__main__.Root object at 0x107182190>, '-', <__main__.NominalizerTerminal object at 0x107182940>, '-', <__main__.SemanticTerminal object at 0x107182100>)
input pronunciation: li#MOUSE-i
full_pronunciation: l#MOUSEi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 39.40000000000031
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.8
line done

---------------------

input line #122
input roots: [<__main__.Root object at 0x107166e80>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: TOMATO in its selectional

now working with the word 'TOMATO-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'TOMATO_1', 'TOMATO_3', 'null_3', 'null_4', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x107139430>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x1071822e0>, '-', <__main__.AgrTerminal object at 0x10715d3d0>, '#', <__main__.Root object at 0x107170550>, '-', <__main__.NominalizerTerminal object at 0x1071700d0>, '-', <__main__.SemanticTerminal object at 0x107170d30>)
input pronunciation: lo#TOMATO-o
full_pronunciation: la#TOMATOo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 39.700000000000315
VocabularyItem:
    pronunciation: a
    label: Agr
    values: {'+atomic'}
    diacritic: a_2
    triggers: set()
    weight: 21.300000000000054
VocabularyItem:
    pronunciation: TOMATO
    label: TOMATO
    values: set()
    diacritic: TOMATO_3
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.400000000000002
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.300000000000002
line done

---------------------

input line #123
input roots: [<__main__.Root object at 0x10717c820>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170850>, '#', <__main__.Root object at 0x107170a90>, '-', <__main__.NominalizerTerminal object at 0x107170fd0>, '-', <__main__.SemanticTerminal object at 0x107170f70>)
input pronunciation: lo#FLOWER-e
full_pronunciation: l#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.00000000000032
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_2
    triggers: {('null', frozenset()), ('e', frozenset({'+atomic'}))}
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 7.800000000000008
line done

---------------------

input line #124
input roots: [<__main__.Root object at 0x10715df10>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: BALL in its selectional

now working with the word 'BALL-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'BALL_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'BALL_1', 'null_8', 'null_7', 'BALL_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e670>, '#', <__main__.Root object at 0x10716e640>, '-', <__main__.NominalizerTerminal object at 0x10716e970>, '-', <__main__.SemanticTerminal object at 0x10716e9a0>)
input pronunciation: una#BALL-a
full_pronunciation: un#BALLo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 20.800000000000047
VocabularyItem:
    pronunciation: BALL
    label: BALL
    values: set()
    diacritic: BALL_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.200000000000003
line done

---------------------

input line #125
input roots: [<__main__.Root object at 0x107170970>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13', 'ANCHOR_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'ANCHOR_1', 'null_13', 'null_12', 'ANCHOR_3'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x10710ee20>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e2e0>, '-', <__main__.AgrTerminal object at 0x1071707c0>, '#', <__main__.Root object at 0x1071714c0>, '-', <__main__.NominalizerTerminal object at 0x107171b80>, '-', <__main__.SemanticTerminal object at 0x107171c70>)
input pronunciation: le#ANCHOR-e
full_pronunciation: li#ANCHORi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.300000000000324
VocabularyItem:
    pronunciation: i
    label: Agr
    values: {'-atomic'}
    diacritic: i_2
    triggers: set()
    weight: 18.600000000000016
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.700000000000001
line done

---------------------

input line #126
input roots: [<__main__.Root object at 0x10716e370>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13', 'ANCHOR_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'ANCHOR_1', 'null_13', 'null_12', 'ANCHOR_3'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107164670>, '#', <__main__.Root object at 0x107153070>, '-', <__main__.NominalizerTerminal object at 0x107153190>, '-', <__main__.SemanticTerminal object at 0x10715f250>)
input pronunciation: le#ANCHOR-e
full_pronunciation: l#ANCHORe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.50000000000033
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.800000000000004
line done

---------------------

input line #127
input roots: [<__main__.Root object at 0x1071717f0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: CASTLE in its selectional

now working with the word 'CASTLE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'CASTLE_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'CASTLE_2', 'null_3', 'null_4', 'CASTLE_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716a3a0>, '#', <__main__.Root object at 0x107171580>, '-', <__main__.NominalizerTerminal object at 0x1071714f0>, '-', <__main__.SemanticTerminal object at 0x107171a60>)
input pronunciation: uno#CASTLE-o
full_pronunciation: una#CASTLEa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: CASTLE
    label: CASTLE
    values: set()
    diacritic: CASTLE_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.200000000000003
line done

---------------------

input line #128
input roots: [<__main__.Root object at 0x10715adc0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'FLOWER_1', 'null_3', 'null_15'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_15', 'null_3', 'FLOWER_1', 'FLOWER_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171880>, '#', <__main__.Root object at 0x10716e4f0>, '-', <__main__.NominalizerTerminal object at 0x10716ed00>, '-', <__main__.SemanticTerminal object at 0x10716e790>)
input pronunciation: uno#FLOWER-e
full_pronunciation: una#FLOWERa
vis_used:
Failure
VocabularyItem:
    pronunciation: una
    label: definite
    values: {'-definite', '+atomic'}
    diacritic: una_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.100000000000003
line done

---------------------

input line #129
input roots: [<__main__.Root object at 0x10715af10>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: SHELF in its selectional

now working with the word 'SHELF-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1', 'SHELF_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'SHELF_3', 'null_9', 'SHELF_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716e4c0>, '#', <__main__.Root object at 0x107165310>, '-', <__main__.NominalizerTerminal object at 0x1071480a0>, '-', <__main__.SemanticTerminal object at 0x10716e6d0>)
input pronunciation: li#SHELF-i
full_pronunciation: l#SHELFe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 40.90000000000033
VocabularyItem:
    pronunciation: SHELF
    label: SHELF
    values: set()
    diacritic: SHELF_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.700000000000005
line done

---------------------

input line #130
input roots: [<__main__.Root object at 0x10715f970>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: FROG in its selectional

now working with the word 'FROG-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'FROG_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'FROG_1', 'FROG_2'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170a90>, '#', <__main__.Root object at 0x1071700a0>, '-', <__main__.NominalizerTerminal object at 0x107170f40>, '-', <__main__.SemanticTerminal object at 0x107170ee0>)
input pronunciation: la#FROG-a
full_pronunciation: l#FROGa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 41.20000000000034
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_14
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 9.300000000000002
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 9.000000000000004
line done

---------------------

input line #131
input roots: [<__main__.Root object at 0x10715af40>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: FROG in its selectional

now working with the word 'FROG-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'FROG_1', 'null_12', 'e_3', 'null_13'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_3', 'null_13', 'null_12', 'FROG_1', 'FROG_3'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182ee0>, '-', <__main__.AgrTerminal object at 0x1071541f0>, '#', <__main__.Root object at 0x107182370>, '-', <__main__.NominalizerTerminal object at 0x107182a00>, '-', <__main__.SemanticTerminal object at 0x1071826d0>)
input pronunciation: le#FROG-e
full_pronunciation: le#FROGi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 41.40000000000034
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 18.000000000000007
VocabularyItem:
    pronunciation: FROG
    label: FROG
    values: set()
    diacritic: FROG_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_12
    triggers: set()
    weight: 9.300000000000002
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.600000000000001
line done

---------------------

input line #132
input roots: [<__main__.Root object at 0x10715a970>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'i_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182940>, '#', <__main__.Root object at 0x107182d30>, '-', <__main__.NominalizerTerminal object at 0x107182ca0>, '-', <__main__.SemanticTerminal object at 0x107182cd0>)
input pronunciation: uno#BOOK-o
full_pronunciation: un#BOOKo
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 21.400000000000055
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'i_2'}
    diacritic: null_10
    triggers: {('i', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.100000000000003
line done

---------------------

input line #133
input roots: [<__main__.Root object at 0x107170730>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: SHIP in its selectional

now working with the word 'SHIP-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'null_12', 'SHIP_2', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182c10>, '#', <__main__.Root object at 0x10717c520>, '-', <__main__.NominalizerTerminal object at 0x10717c2b0>, '-', <__main__.SemanticTerminal object at 0x10717c5e0>)
input pronunciation: le#SHIP-i
full_pronunciation: li#SHIPi
vis_used:
Failure
VocabularyItem:
    pronunciation: li
    label: definite
    values: {'-atomic', '+definite'}
    diacritic: li_1
    triggers: set()
    weight: 10.0
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_2
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.299999999999999
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.500000000000002
line done

---------------------

input line #134
input roots: [<__main__.Root object at 0x10714a460>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'KEY_3', 'null_12', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c2e0>, '-', <__main__.AgrTerminal object at 0x107166cd0>, '#', <__main__.Root object at 0x10714f4f0>, '-', <__main__.NominalizerTerminal object at 0x10714f7c0>, '-', <__main__.SemanticTerminal object at 0x10714f400>)
input pronunciation: le#KEY-i
full_pronunciation: le#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.00000000000035
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 18.30000000000001
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.600000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.600000000000005
line done

---------------------

input line #135
input roots: [<__main__.Root object at 0x1071706a0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'lo', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710eb20>, <__main__.VocabularyItem object at 0x10713df10>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'lo_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: BOOK in its selectional

now working with the word 'BOOK-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'BOOK_1', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'BOOK_2', 'null_3', 'null_4', 'BOOK_1', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717c4f0>, '-', <__main__.AgrTerminal object at 0x10715d3d0>, '#', <__main__.Root object at 0x10717c700>, '-', <__main__.NominalizerTerminal object at 0x10717c340>, '-', <__main__.SemanticTerminal object at 0x10717cca0>)
input pronunciation: lo#BOOK-o
full_pronunciation: lo#BOOKe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.30000000000035
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 23.300000000000082
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_2
    triggers: {('null', frozenset()), ('o', frozenset({'+atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_15
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 10.1
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 7.700000000000008
line done

---------------------

input line #136
input roots: [<__main__.Root object at 0x10714bdc0>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: ANCHOR in its selectional

now working with the word 'ANCHOR-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'ANCHOR_1', 'null_7', 'ANCHOR_2'}
done processing input, time to test
we selected the nominalizer with values: set()
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10717ca30>, '#', <__main__.Root object at 0x107182130>, '-', <__main__.NominalizerTerminal object at 0x1071827c0>, '-', <__main__.SemanticTerminal object at 0x107182df0>)
input pronunciation: la#ANCHOR-a
full_pronunciation: l#ANCHORa
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.60000000000036
VocabularyItem:
    pronunciation: ANCHOR
    label: ANCHOR
    values: set()
    diacritic: ANCHOR_2
    triggers: {('null', frozenset()), ('a', frozenset({'+atomic'}))}
    weight: 9.9
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 8.900000000000004
line done

---------------------

input line #137
input roots: [<__main__.Root object at 0x10714f190>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: BOOK in its selectional

now working with the word 'BOOK-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'BOOK_1', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'BOOK_3', 'null_9', 'BOOK_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107182730>, '-', <__main__.AgrTerminal object at 0x107154430>, '#', <__main__.Root object at 0x107182e80>, '-', <__main__.NominalizerTerminal object at 0x107182d90>, '-', <__main__.SemanticTerminal object at 0x107182700>)
input pronunciation: li#BOOK-i
full_pronunciation: le#BOOKi
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 42.80000000000036
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 18.400000000000013
VocabularyItem:
    pronunciation: BOOK
    label: BOOK
    values: set()
    diacritic: BOOK_3
    triggers: {('null', frozenset()), ('i', frozenset({'-atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2', 'e_1'}
    diacritic: null_29
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: i
    label: atomic
    values: {'-atomic'}
    diacritic: i_1
    triggers: set()
    weight: 9.400000000000002
line done

---------------------

input line #138
input roots: [<__main__.Root object at 0x10717c040>]
input values: [{'+definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'la', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1070f3970>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x107108100>, <__main__.VocabularyItem object at 0x10710eb20>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'la_1'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'i_2', 'o_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071085e0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170a00>, '-', <__main__.AgrTerminal object at 0x107165310>, '#', <__main__.Root object at 0x107170460>, '-', <__main__.NominalizerTerminal object at 0x107170f40>, '-', <__main__.SemanticTerminal object at 0x107170fa0>)
input pronunciation: la#POTATO-a
full_pronunciation: lo#POTATOo
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 43.100000000000364
VocabularyItem:
    pronunciation: o
    label: Agr
    values: {'+atomic'}
    diacritic: o_1
    triggers: set()
    weight: 23.300000000000082
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_3
    triggers: {('e', frozenset({'-atomic'})), ('null', frozenset())}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'o_1'}
    diacritic: null_4
    triggers: {('o', frozenset({'+atomic'}))}
    weight: 10.2
VocabularyItem:
    pronunciation: o
    label: atomic
    values: {'+atomic'}
    diacritic: o_2
    triggers: set()
    weight: 9.000000000000004
line done

---------------------

input line #139
input roots: [<__main__.Root object at 0x107153250>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: SHIP in its selectional

now working with the word 'SHIP-e', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'e_2', 'null_11', 'null_7', 'SHIP_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_11', 'e_2', 'null_7', 'SHIP_3', 'SHIP_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107170760>, '#', <__main__.Root object at 0x10716ebb0>, '-', <__main__.NominalizerTerminal object at 0x10716ea90>, '-', <__main__.SemanticTerminal object at 0x10716eac0>)
input pronunciation: una#SHIP-e
full_pronunciation: un#SHIPe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 21.80000000000006
VocabularyItem:
    pronunciation: SHIP
    label: SHIP
    values: set()
    diacritic: SHIP_1
    triggers: set()
    weight: 10.1
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_11
    triggers: {('e', frozenset({'+atomic'}))}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 7.6000000000000085
line done

---------------------

input line #140
input roots: [<__main__.Root object at 0x107163be0>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'una', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x10710ea30>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'una_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'una_1'}) gets set to 0
    > and we make sure a nominalizer with a_2 instead of una_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'a_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'a_2'} has root Root: POTATO in its selectional

now working with the word 'POTATO-a', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'null_8', 'null_7', 'POTATO_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'a_1', 'POTATO_2', 'null_8', 'null_7', 'POTATO_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10716ed60>, '#', <__main__.Root object at 0x10716e2b0>, '-', <__main__.NominalizerTerminal object at 0x10716e040>, '-', <__main__.SemanticTerminal object at 0x10716ed00>)
input pronunciation: una#POTATO-a
full_pronunciation: un#POTATOe
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 21.900000000000063
VocabularyItem:
    pronunciation: POTATO
    label: POTATO
    values: set()
    diacritic: POTATO_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_7
    triggers: set()
    weight: 9.300000000000002
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'+atomic'}
    diacritic: e_2
    triggers: set()
    weight: 7.500000000000009
line done

---------------------

input line #141
input roots: [<__main__.Root object at 0x107162190>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'li', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: i_3, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'li_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'i_2'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: i_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'i_2'} has root Root: FLOWER in its selectional

now working with the word 'FLOWER-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_9', 'FLOWER_1', 'null_10', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_10', 'null_9', 'FLOWER_1', 'FLOWER_3'}
done processing input, time to test
we selected the nominalizer with values: {'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171d90>, '-', <__main__.AgrTerminal object at 0x107170eb0>, '#', <__main__.Root object at 0x10716ca30>, '-', <__main__.NominalizerTerminal object at 0x10716cf70>, '-', <__main__.SemanticTerminal object at 0x10716ad90>)
input pronunciation: li#FLOWER-i
full_pronunciation: le#FLOWERe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 43.50000000000037
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 18.400000000000013
VocabularyItem:
    pronunciation: FLOWER
    label: FLOWER
    values: set()
    diacritic: FLOWER_1
    triggers: set()
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'e_1'}
    diacritic: null_13
    triggers: {('e', frozenset({'-atomic'}))}
    weight: 10.0
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.500000000000005
line done

---------------------

input line #142
input roots: [<__main__.Root object at 0x10715af10>]
input values: [{'-definite'}, {'+atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'uno', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x1071398b0>]

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: un_2, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'uno_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'-definite', '+atomic'} to host {'+atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'o_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - finally, make (sure) the nominalizer with current values: {'o_1'} has root Root: MOUSE in its selectional

now working with the word 'MOUSE-o', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_4', 'null_3', 'o_2'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'MOUSE_1', 'null_3', 'null_4', 'MOUSE_3', 'o_2'}
done processing input, time to test
we selected the nominalizer with values: {'a_2'}
we broke out
we used sprouting_rules: []
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x10713d6a0>, '#', <__main__.Root object at 0x107164970>, '-', <__main__.NominalizerTerminal object at 0x10718d9d0>, '-', <__main__.SemanticTerminal object at 0x10718d460>)
input pronunciation: uno#MOUSE-o
full_pronunciation: un#MOUSEa
vis_used:
Failure
VocabularyItem:
    pronunciation: un
    label: definite
    values: {'-definite'}
    diacritic: un_1
    triggers: set()
    weight: 22.000000000000064
VocabularyItem:
    pronunciation: MOUSE
    label: MOUSE
    values: set()
    diacritic: MOUSE_1
    triggers: set()
    weight: 9.9
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 9.8
VocabularyItem:
    pronunciation: a
    label: atomic
    values: {'+atomic'}
    diacritic: a_1
    triggers: set()
    weight: 8.800000000000004
line done

---------------------

input line #143
input roots: [<__main__.Root object at 0x107156c40>]
input values: [{'+definite'}, {'-atomic'}]
we selected the nominalizer with values: set()
we broke out

now working with the word 'le', mapping to 1 terminals:
generalize_vi: here's what is in match_list: [<__main__.VocabularyItem object at 0x1071019d0>, <__main__.VocabularyItem object at 0x107101dc0>, <__main__.VocabularyItem object at 0x10710ea30>]

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: o_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried definite: l_2, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: a_3, triggers = set(), weight = 10.0..already existed

create_vi: tried Agr: e_4, triggers = set(), weight = 10.0..already existed
  we're in a functional word...
  - we add the newvi's diacritic: nominalizer's values are now {'le_1'}
  - but that newvi helped us find a new Agr node vi: o_1
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
     and (3) if the Agr was split out of the newvi in THIS input observation, we change the nominalizer we're currently using to have the split out value(s): {'e_1'}
  - but that newvi helped us find a new Agr node vi: a_2
     and (2) we make sure an Agr sprouting rule exists, splitting {'+definite', '+atomic'} to host {'+atomic'}
  - but that newvi helped us find a new Agr node vi: e_1
     so (1) we clean up our nominalizer inventory: 
    > the nominalizer with these values ({'le_1'}) gets set to 0
    > and we make sure a nominalizer with e_1 instead of le_1 exists
     and (2) we make sure an Agr sprouting rule exists, splitting {'-atomic', '+definite'} to host {'-atomic'}
  - finally, make (sure) the nominalizer with current values: {'e_1'} has root Root: KEY in its selectional

now working with the word 'KEY-i', mapping to 3 terminals:
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'KEY_1', 'null_12', 'null_14', 'i_1'}
generalize_vi: here's what is in match_list: []
  we're in a lexical word...
  - we add the newvi's diacritic: diacritics_in_this_word now contains {'i_1', 'null_14', 'KEY_3', 'null_12', 'KEY_1'}
done processing input, time to test
we selected the nominalizer with values: {'a_2', 'e_1'}
we broke out
we used sprouting_rules: [<__main__.SproutingRule object at 0x1071081f0>]
now we have this TerminalChain: (<__main__.SemanticTerminal object at 0x107171c40>, '-', <__main__.AgrTerminal object at 0x107156fd0>, '#', <__main__.Root object at 0x10716e2b0>, '-', <__main__.NominalizerTerminal object at 0x10716ee80>, '-', <__main__.SemanticTerminal object at 0x10716e850>)
input pronunciation: le#KEY-i
full_pronunciation: le#KEYe
vis_used:
Failure
VocabularyItem:
    pronunciation: l
    label: definite
    values: {'+definite'}
    diacritic: l_1
    triggers: set()
    weight: 43.800000000000374
VocabularyItem:
    pronunciation: e
    label: Agr
    values: {'-atomic'}
    diacritic: e_1
    triggers: set()
    weight: 18.500000000000014
VocabularyItem:
    pronunciation: KEY
    label: KEY
    values: set()
    diacritic: KEY_1
    triggers: set()
    weight: 9.500000000000002
VocabularyItem:
    pronunciation: null
    label: nominalizer
    values: {'a_2'}
    diacritic: null_8
    triggers: {('a', frozenset({'+atomic'}))}
    weight: 9.700000000000001
VocabularyItem:
    pronunciation: e
    label: atomic
    values: {'-atomic'}
    diacritic: e_3
    triggers: set()
    weight: 8.400000000000006
line done
